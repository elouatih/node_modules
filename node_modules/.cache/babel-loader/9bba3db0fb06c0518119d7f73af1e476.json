{"ast":null,"code":"var _jsxFileName = \"/home/elouati/Bureau/projet_working/client/src/Game/controls/ValidationTour.js\";\nimport React from 'react';\nimport { socket } from \"../../socket.js\";\nimport PropTypes from 'prop-types';\nimport { Button } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ValidationTour extends React.Component {\n  /* \n      Input : props={tour,actions}\n              tour : number : number of round\n              actions : list of  actions played for each tile\n       Syntax : <ValidationTour tour={number of the round} actions={list of actions} />\n  */\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = () => {\n      /*         const origin = this.props.origin\n              const updated = this.props.updated\n      \n              this.setState({ validated: true })\n              let log = {}\n              for (const index in origin) {\n                  let subLog = {}\n                  for (const entry in origin[index]) {\n                      if (origin[index][entry] !== updated[index][entry]) subLog.activity = updated[index][entry]\n                  }\n                  if (Object.entries(subLog).length !== 0) log[index] = subLog\n      \n              } */\n      //let actions = [{ hexID: 13, action: \"swapActivity\", typeAction: 0 }]\n      let lstActions = this.props.actions;\n      delete lstActions.cost;\n      socket.emit(\"addActions\", lstActions, () => {});\n      console.log(lstActions);\n      this.props.endRound(); //const csv = this.generateCSV(this.props.actions)\n    };\n\n    this.state = {\n      validated: false\n    }; //this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  /* \n      Function : generateCSV \n      \n      Syntax  : csvData=generateCSV(data)\n      \n      Input   : data : an object to convert\n          \n      Outputs : csvData : input object with csv format\n  \n      Description : convert an object to csv format\n    \n      Author : Hugo KELHETTER\n  */\n  generateCSV(data) {\n    let str = \"\";\n    console.log(Object.keys(data));\n\n    if (data !== undefined) {\n      str = Object.keys(data) + \"\\n\";\n      str += Object.values(data) + \"\\n\";\n    }\n\n    console.log(str);\n    return str;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.tour !== this.props.tour) this.setState({\n      validated: false\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: this.state.validated ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Nombre de joueurs pr\\xEAts : nb joueurs pr\\xEAts/ nb joueurs totaux\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 41\n      }, this) : /*#__PURE__*/_jsxDEV(Button, {\n        onClick: this.handleSubmit,\n        className: \"validation\",\n        variant: \"contained\",\n        color: \"primary\",\n        children: \"Finir le tour\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nValidationTour.propTypes = {\n  tour: PropTypes.number.isRequired,\n  actions: PropTypes.object.isRequired\n};\nexport default ValidationTour;","map":{"version":3,"sources":["/home/elouati/Bureau/projet_working/client/src/Game/controls/ValidationTour.js"],"names":["React","socket","PropTypes","Button","ValidationTour","Component","constructor","props","handleSubmit","lstActions","actions","cost","emit","console","log","endRound","state","validated","generateCSV","data","str","Object","keys","undefined","values","componentDidUpdate","prevProps","prevState","tour","setState","render","propTypes","number","isRequired","object"],"mappings":";AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,mBAAvB;;;;AAEA,MAAMC,cAAN,SAA6BJ,KAAK,CAACK,SAAnC,CAA6C;AACzC;AACJ;AACA;AACA;AACA;AACA;AAEIC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAmBnBC,YAnBmB,GAmBJ,MAAM;AACjB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ;AACA,UAAIC,UAAU,GAAG,KAAKF,KAAL,CAAWG,OAA5B;AACA,aAAOD,UAAU,CAACE,IAAlB;AACAV,MAAAA,MAAM,CAACW,IAAP,CAAY,YAAZ,EAA0BH,UAA1B,EAAsC,MAAM,CAAG,CAA/C;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ;AACA,WAAKF,KAAL,CAAWQ,QAAX,GAnBiB,CAoBjB;AACH,KAxCkB;;AAEf,SAAKC,KAAL,GAAa;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAb,CAFe,CAGf;AACH;;AAqCD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,QAAIC,GAAG,GAAG,EAAV;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYO,MAAM,CAACC,IAAP,CAAYH,IAAZ,CAAZ;;AACA,QAAIA,IAAI,KAAKI,SAAb,EAAwB;AACpBH,MAAAA,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYH,IAAZ,IAAoB,IAA1B;AAGAC,MAAAA,GAAG,IAAIC,MAAM,CAACG,MAAP,CAAcL,IAAd,IAAsB,IAA7B;AACH;;AACDN,IAAAA,OAAO,CAACC,GAAR,CAAYM,GAAZ;AACA,WAAOA,GAAP;AACH;;AACDK,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACrC,QAAID,SAAS,CAACE,IAAV,KAAmB,KAAKrB,KAAL,CAAWqB,IAAlC,EAAwC,KAAKC,QAAL,CAAc;AAAEZ,MAAAA,SAAS,EAAE;AAAb,KAAd;AAC3C;;AAEDa,EAAAA,MAAM,GAAG;AAEL,wBACI;AAAA,gBACK,KAAKd,KAAL,CAAWC,SAAX,gBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAvB,gBACG,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKT,YAAtB;AAAoC,QAAA,SAAS,EAAC,YAA9C;AAA2D,QAAA,OAAO,EAAC,WAAnE;AAA+E,QAAA,KAAK,EAAC,SAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFR,qBADJ;AAMH;;AAtFwC;;AAAvCJ,c,CAaK2B,S,GAAY;AACfH,EAAAA,IAAI,EAAE1B,SAAS,CAAC8B,MAAV,CAAiBC,UADR;AAEfvB,EAAAA,OAAO,EAAER,SAAS,CAACgC,MAAV,CAAiBD;AAFX,C;AA4EvB,eAAe7B,cAAf","sourcesContent":["\n\nimport React from 'react'\nimport { socket } from \"../../socket.js\"\nimport PropTypes from 'prop-types';\nimport { Button } from '@material-ui/core'\n\nclass ValidationTour extends React.Component {\n    /* \n        Input : props={tour,actions}\n                tour : number : number of round\n                actions : list of  actions played for each tile\n\n        Syntax : <ValidationTour tour={number of the round} actions={list of actions} />\n    */\n    constructor(props) {\n        super(props)\n        this.state = { validated: false }\n        //this.handleSubmit = this.handleSubmit.bind(this)\n    }\n    static propTypes = {\n        tour: PropTypes.number.isRequired,\n        actions: PropTypes.object.isRequired\n    }\n    /* \n        Function : handleSubmit\n     \n        Syntax  : handleSubmit()\n     \n        Description : compare the objects origin and updated from the props and \n                        create a new object containing all the differences\n        \n        Author : Hugo KELHETTER\n    */\n    handleSubmit = () => {\n        /*         const origin = this.props.origin\n                const updated = this.props.updated\n        \n                this.setState({ validated: true })\n                let log = {}\n                for (const index in origin) {\n                    let subLog = {}\n                    for (const entry in origin[index]) {\n                        if (origin[index][entry] !== updated[index][entry]) subLog.activity = updated[index][entry]\n                    }\n                    if (Object.entries(subLog).length !== 0) log[index] = subLog\n        \n                } */\n        //let actions = [{ hexID: 13, action: \"swapActivity\", typeAction: 0 }]\n        let lstActions = this.props.actions\n        delete lstActions.cost\n        socket.emit(\"addActions\", lstActions, () => { })\n        console.log(lstActions)\n        this.props.endRound()\n        //const csv = this.generateCSV(this.props.actions)\n    }\n    /* \n        Function : generateCSV \n        \n        Syntax  : csvData=generateCSV(data)\n        \n        Input   : data : an object to convert\n            \n        Outputs : csvData : input object with csv format\n    \n        Description : convert an object to csv format\n      \n        Author : Hugo KELHETTER\n    */\n    generateCSV(data) {\n        let str = \"\"\n        console.log(Object.keys(data))\n        if (data !== undefined) {\n            str = Object.keys(data) + \"\\n\";\n\n\n            str += Object.values(data) + \"\\n\";\n        }\n        console.log(str)\n        return str;\n    }\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.tour !== this.props.tour) this.setState({ validated: false })\n    }\n\n    render() {\n\n        return (\n            <>\n                {this.state.validated ? <p>Nombre de joueurs prêts : nb joueurs prêts/ nb joueurs totaux</p> :\n                    <Button onClick={this.handleSubmit} className=\"validation\" variant=\"contained\" color=\"primary\">Finir le tour</Button>}\n            </>\n        )\n    }\n}\n\nexport default ValidationTour"]},"metadata":{},"sourceType":"module"}