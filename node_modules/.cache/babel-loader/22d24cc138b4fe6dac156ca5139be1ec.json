{"ast":null,"code":"import _classCallCheck from\"/home/elouati/Bureau/projet_working/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/elouati/Bureau/projet_working/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/elouati/Bureau/projet_working/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/elouati/Bureau/projet_working/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import{socket}from'../socket';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Chat=/*#__PURE__*/function(_React$Component){_inherits(Chat,_React$Component);var _super=_createSuper(Chat);/*             \n        Input : props={lstPlayer,lstConvo,authore}\n                lstPlayer : object : list of all the players\n                lstConvo : object : list of all the conversations\n                authore : string : name of the player\n\n        Syntax : <Chat lstPlayer={lstPlayer} lstConvo={lstConvo} authore={authore} />\n            \n        Author : Hugo KELHETTER\n    */function Chat(props){var _this;_classCallCheck(this,Chat);_this=_super.call(this,props);_this.handleSubmit=function(e){e.preventDefault();if(!_this.state.textValue)return;var newMessage={msg:_this.state.textValue,authore:_this.props.authore,convo:_this.state.convo};_this.setState({messages:_this.addMessage(newMessage),textValue:\"\"});socket.emit(\"sendMessage\",newMessage);};_this.receiveMessage=function(newMessage){var messages=_this.state.messages;var message={msg:[newMessage.msg],authore:[newMessage.authore]};messages[newMessage.convo].push(message);};_this.handleConvoChange=function(event){_this.setState({convo:event.target.value});};var _messages={};Object.keys(_this.props.lstConvo).map(function(convo){return _messages[convo]=[];});_this.state={textValue:\"\",convo:Object.keys(_this.props.lstConvo)[0],messages:_messages,inConvo:false};//this.handleSubmit = this.handleSubmit.bind(this)\n//this.handleConvoChange = this.handleConvoChange.bind(this)\n//this.receiveMessage = this.receiveMessage.bind(this)\n_this.lastMessage=/*#__PURE__*/React.createRef();return _this;}_createClass(Chat,[{key:\"shouldComponentUpdate\",value:/* \n        Function : shouldComponentUpdate\n    \n        Description : the component only updates if the state changes\n            \n        Author : Hugo KELHETTER\n    */function shouldComponentUpdate(nextProps,nextState){return this.state!==nextState||this.props.lstConvo!==nextProps.lstConvo;}/* \n        Function : handleSubmit\n    \n        Syntax  : handleSubmit(e)\n            \n        Input   : e : event calling the function\n        \n        Description : \n            update this.state.messages by adding a new value to the object \n                containing conversation room's name a string and author's id\n            this.state.textValue is set to \"\"\n        \n        Author : Hugo KELHETTER\n    */},{key:\"addMessage\",value:function addMessage(newMessage){var messages=this.state.messages;messages[this.state.convo].push(newMessage);return messages;}},{key:\"updateText\",value:/* \n        Function : updateText \n    \n        Syntax  : updateText(e)\n            \n        Input   : e : the value of the event calling the function\n            \n        Description : update this.state.textValue based on the pressed key\n\n        Author : Hugo KELHETTER\n            \n    */function updateText(e){this.setState({textValue:e});}},{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.scrollToBottom();socket.on(\"receiveMessage\",function(data){_this2.setState({message:_this2.addMessage(data)});});}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevState){var _this3=this;Object.keys(this.props.lstConvo).map(function(convo){if(_this3.state.messages[convo]===undefined)_this3.state.messages[convo]=[];});if(prevState.messages[this.state.convo].length!==this.state.messages[this.state.convo].length)this.scrollToBottom();}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){socket.removeAllListeners();}/* \n        Function : scrollToBottom\n    \n        Syntax  : scrollToBottom()\n        \n        Description : focus on the bottom of the chat\n            \n    */},{key:\"scrollToBottom\",value:function scrollToBottom(){var _this$lastMessage,_this$lastMessage$cur;(_this$lastMessage=this.lastMessage)===null||_this$lastMessage===void 0?void 0:(_this$lastMessage$cur=_this$lastMessage.current)===null||_this$lastMessage$cur===void 0?void 0:_this$lastMessage$cur.scrollIntoView({behavior:'smooth'});}/* \n        Function : handleConvoChange\n            \n        Description : set the active conversation\n\n        Author : Hugo KELHETTER\n            \n    */},{key:\"render\",value:/* \n        Function : render\n    \n        Syntax  : render()\n            \n        Description : display a chat + available conversations\n        \n        Author : Hugo KELHETTER\n    */function render(){var _this4=this;return/*#__PURE__*/_jsx(\"div\",{className:\"chat\",children:/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{id:\"convoChoice\",children:/*#__PURE__*/_jsx(\"select\",{name:\"convoSelect\",onChange:this.handleConvoChange,children:Object.keys(this.props.lstConvo).map(function(convo){return/*#__PURE__*/_jsx(\"option\",{children:convo},convo);})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"convo\",children:[Object.values(this.state.messages[this.state.convo]).map(function(msg,i){var _this4$state$authore;return/*#__PURE__*/_jsxs(\"div\",{className:\"message \".concat(msg.authore==_this4.props.authore?\"\":\"received\"),children:[/*#__PURE__*/_jsxs(\"p\",{className:\"msg\",children:[\" \",msg.msg]}),/*#__PURE__*/_jsx(\"p\",{className:\"authore\",children:msg.authore===_this4.props.authore?\"Vous\":(_this4$state$authore=_this4.state.authore)===null||_this4$state$authore===void 0?void 0:_this4$state$authore.name})]},i);}),/*#__PURE__*/_jsx(\"div\",{className:\"dummy\",ref:this.lastMessage})]}),/*#__PURE__*/_jsx(\"div\",{className:\"submit\",children:/*#__PURE__*/_jsx(\"form\",{onSubmit:this.handleSubmit,children:/*#__PURE__*/_jsxs(\"fieldset\",{disabled:this.state.inConvo,children:[/*#__PURE__*/_jsx(\"input\",{id:\"inputChat\",autoComplete:\"off\",value:this.state.textValue,onChange:function onChange(e){return _this4.updateText(e.target.value);}}),/*#__PURE__*/_jsx(\"input\",{type:\"submit\"})]})})})]})});}}]);return Chat;}(React.Component);export{Chat as default};","map":{"version":3,"sources":["/home/elouati/Bureau/projet_working/client/src/Game/Chat.js"],"names":["React","socket","Chat","props","handleSubmit","e","preventDefault","state","textValue","newMessage","msg","authore","convo","setState","messages","addMessage","emit","receiveMessage","message","push","handleConvoChange","event","target","value","Object","keys","lstConvo","map","inConvo","lastMessage","createRef","nextProps","nextState","scrollToBottom","on","data","prevProps","prevState","undefined","length","removeAllListeners","current","scrollIntoView","behavior","values","i","name","updateText","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { socket } from '../socket'\nimport PropTypes from 'prop-types';\n\nexport default class Chat extends React.Component {\n    /*             \n        Input : props={lstPlayer,lstConvo,authore}\n                lstPlayer : object : list of all the players\n                lstConvo : object : list of all the conversations\n                authore : string : name of the player\n\n        Syntax : <Chat lstPlayer={lstPlayer} lstConvo={lstConvo} authore={authore} />\n            \n        Author : Hugo KELHETTER\n    */\n    constructor(props) {\n        super(props)\n        let messages = {}\n        Object.keys(this.props.lstConvo).map((convo) =>\n            messages[convo] = []\n        )\n        this.state = { textValue: \"\", convo: Object.keys(this.props.lstConvo)[0], messages, inConvo: false }\n        //this.handleSubmit = this.handleSubmit.bind(this)\n        //this.handleConvoChange = this.handleConvoChange.bind(this)\n        //this.receiveMessage = this.receiveMessage.bind(this)\n        this.lastMessage = React.createRef()\n    }\n    static propTypes = {\n        lstPlayer: PropTypes.object.isRequired,\n        lstConvo: PropTypes.object.isRequired\n    }\n    /* \n        Function : shouldComponentUpdate\n    \n        Description : the component only updates if the state changes\n            \n        Author : Hugo KELHETTER\n    */\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.state !== nextState || this.props.lstConvo !== nextProps.lstConvo\n    }\n    /* \n        Function : handleSubmit\n    \n        Syntax  : handleSubmit(e)\n            \n        Input   : e : event calling the function\n        \n        Description : \n            update this.state.messages by adding a new value to the object \n                containing conversation room's name a string and author's id\n            this.state.textValue is set to \"\"\n        \n        Author : Hugo KELHETTER\n    */\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (!this.state.textValue) return\n        const newMessage = { msg: this.state.textValue, authore: this.props.authore, convo: this.state.convo }\n        this.setState({\n            messages: this.addMessage(newMessage),\n            textValue: \"\"\n        })\n        socket.emit(\"sendMessage\", newMessage)\n\n    }\n    addMessage(newMessage) {\n        let messages = this.state.messages\n        messages[this.state.convo].push(newMessage)\n        return messages\n    }\n    receiveMessage = (newMessage) => {\n        let messages = this.state.messages\n        const message = { msg: [newMessage.msg], authore: [newMessage.authore] }\n        messages[newMessage.convo].push(message)\n    }\n    /* \n        Function : updateText \n    \n        Syntax  : updateText(e)\n            \n        Input   : e : the value of the event calling the function\n            \n        Description : update this.state.textValue based on the pressed key\n\n        Author : Hugo KELHETTER\n            \n    */\n    updateText(e) {\n        this.setState({ textValue: e })\n    }\n    componentDidMount() {\n        this.scrollToBottom()\n        socket.on(\"receiveMessage\", (data) => {\n            this.setState({ message: this.addMessage(data) })\n        })\n    }\n    componentDidUpdate(prevProps, prevState) {\n        Object.keys(this.props.lstConvo).map((convo) => {\n            if (this.state.messages[convo] === undefined) this.state.messages[convo] = []\n        })\n        if (prevState.messages[this.state.convo].length !== this.state.messages[this.state.convo].length) this.scrollToBottom()\n\n    }\n    componentWillUnmount() {\n        socket.removeAllListeners()\n    }\n    /* \n        Function : scrollToBottom\n    \n        Syntax  : scrollToBottom()\n        \n        Description : focus on the bottom of the chat\n            \n    */\n    scrollToBottom() {\n        this.lastMessage?.current?.scrollIntoView({ behavior: 'smooth' })\n    }\n    /* \n        Function : handleConvoChange\n            \n        Description : set the active conversation\n\n        Author : Hugo KELHETTER\n            \n    */\n    handleConvoChange = (event) => {\n        this.setState({ convo: event.target.value })\n    }\n    /* \n        Function : render\n    \n        Syntax  : render()\n            \n        Description : display a chat + available conversations\n        \n        Author : Hugo KELHETTER\n    */\n    render() {\n        return (\n            <div className=\"chat\">\n                <>\n                    <div id=\"convoChoice\">\n\n                        <select name=\"convoSelect\" onChange={this.handleConvoChange}>\n                            {Object.keys(this.props.lstConvo).map((convo) =>\n                                <option key={convo} >{convo}</option>\n                            )}\n                        </select>\n                    </div>\n                    <div className=\"convo\">\n                        {Object.values(this.state.messages[this.state.convo]).map((msg, i) =>\n                            <div key={i} className={`message ${msg.authore == this.props.authore ? \"\" : \"received\"}`}>\n                                <p className=\"msg\"> {msg.msg}</p>\n                                <p className=\"authore\">{msg.authore === this.props.authore ? \"Vous\" : this.state.authore?.name}</p>\n                            </div>\n\n                        )}\n                        {/* empty div to focus on with scrollToBottom */}\n                        <div className=\"dummy\" ref={this.lastMessage}></div>\n                    </div>\n                    <div className=\"submit\">\n                        <form onSubmit={this.handleSubmit} >\n                            <fieldset disabled={this.state.inConvo}>\n                                <input id=\"inputChat\" autoComplete=\"off\" value={this.state.textValue} onChange={e => this.updateText(e.target.value)} />\n                                <input type=\"submit\"></input>\n                            </fieldset>\n                        </form>\n                    </div>\n                </>\n\n\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}