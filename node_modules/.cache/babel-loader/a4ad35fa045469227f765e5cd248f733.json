{"ast":null,"code":"var _jsxFileName = \"/home/elouati/Bureau/projet_working/client/src/Interface/utils/Timer/Component/Time/Time.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet time;\n\nconst Time = props => {\n  _s();\n\n  const getValidDisplayTime = (hours, minutes, seconds) => {\n    let tmp = '';\n\n    if (props.displayHours !== false) {\n      tmp = tmp + (hours / 100).toFixed(2).slice(2);\n\n      if (props.displayMinutes !== false) {\n        tmp = tmp + \":\";\n      }\n    }\n\n    if (props.displayMinutes !== false) {\n      tmp = tmp + (minutes / 100).toFixed(2).slice(2);\n\n      if (props.displaySeconds !== false) {\n        tmp = tmp + \":\";\n      }\n    }\n\n    if (props.displaySeconds !== false) {\n      tmp = tmp + (seconds / 100).toFixed(2).slice(2);\n    }\n\n    return tmp;\n  };\n\n  let defaultTime;\n\n  if (props.fromTime !== undefined) {\n    defaultTime = new Date(props.fromTime);\n  } else {\n    defaultTime = new Date(Date.now());\n  }\n\n  const [text, setText] = useState(getValidDisplayTime(defaultTime.getHours(), defaultTime.getMinutes(), defaultTime.getSeconds()));\n  const [idInterval, setIdInterval] = useState(0);\n  const [isCount, setIsCount] = useState(false);\n\n  const startStopwatch = () => {\n    if (time === undefined) {\n      if (props.fromTime !== undefined) {\n        time = new Date(props.fromTime);\n      } else {\n        time = new Date(2000, 0, 0, 0, 0, 0, 0);\n      }\n    }\n\n    let start = Date.now();\n    const id = setInterval(function () {\n      const delta = Date.now() - start;\n      time.setMinutes(defaultTime.getMinutes());\n      time.setHours(defaultTime.getHours());\n      time.setSeconds(Math.floor(delta / 1000) + defaultTime.getMinutes());\n      props.hint(time.getSeconds());\n      setText(getValidDisplayTime(time.getHours(), time.getMinutes(), time.getSeconds()));\n    }, 1000);\n    setIdInterval(id);\n  };\n\n  const [isFinished, setIsFinished] = useState(false);\n\n  const startTimer = () => {\n    let countDownDate = new Date(Date.now());\n    countDownDate.setSeconds(countDownDate.getSeconds() + defaultTime.getSeconds() + 1);\n    countDownDate.setMinutes(countDownDate.getMinutes() + defaultTime.getMinutes());\n    countDownDate.setHours(countDownDate.getHours() + defaultTime.getHours());\n    const x = setInterval(function () {\n      const now = new Date().getTime();\n      const distance = countDownDate - now;\n      console.log(\"DISTANCE IS : \" + distance);\n\n      if (distance <= 0.01) {\n        clearInterval(x);\n        setIsFinished(true);\n      }\n\n      console.log(\"Finished BOOLEAN : \" + isFinished);\n      const hours = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n      const minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n      const seconds = Math.floor(distance % (1000 * 60) / 1000);\n      props.hint(seconds);\n      setText(getValidDisplayTime(hours, minutes, seconds));\n    }, 1000); //setIsFinished(true);\n  };\n\n  if (isFinished === true) {\n    props.finishEvent();\n    setIsFinished(false);\n  }\n\n  if (props.isOn === true && isCount === false) {\n    if (props.watchType === \"timer\") {\n      startTimer();\n    } else if (props.watchType === \"stopwatch\") {\n      startStopwatch();\n    }\n\n    setIsCount(true);\n  } else if (props.isOn === false && isCount === true) {\n    clearInterval(idInterval);\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Time, \"fWMCJQZHYQMwiTj+6IenxNeVMUQ=\");\n\n_c = Time;\nexport default Time;\n\nvar _c;\n\n$RefreshReg$(_c, \"Time\");","map":{"version":3,"sources":["/home/elouati/Bureau/projet_working/client/src/Interface/utils/Timer/Component/Time/Time.js"],"names":["React","useState","time","Time","props","getValidDisplayTime","hours","minutes","seconds","tmp","displayHours","toFixed","slice","displayMinutes","displaySeconds","defaultTime","fromTime","undefined","Date","now","text","setText","getHours","getMinutes","getSeconds","idInterval","setIdInterval","isCount","setIsCount","startStopwatch","start","id","setInterval","delta","setMinutes","setHours","setSeconds","Math","floor","hint","isFinished","setIsFinished","startTimer","countDownDate","x","getTime","distance","console","log","clearInterval","finishEvent","isOn","watchType"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\n\nlet time;\n\nconst Time = (props) => {\n\n    const getValidDisplayTime = (hours, minutes, seconds) => {\n        let tmp = '';\n        if(props.displayHours !== false){\n            tmp = tmp + (hours/100).toFixed(2).slice(2);\n            if(props.displayMinutes !== false){\n                tmp = tmp + \":\"\n            }\n        }\n        if(props.displayMinutes !== false){\n            tmp = tmp + (minutes/100).toFixed(2).slice(2);\n            if(props.displaySeconds !== false){\n                tmp = tmp + \":\"\n            }\n        }\n        if(props.displaySeconds !== false){\n            tmp = tmp + (seconds/100).toFixed(2).slice(2);\n        }\n        return tmp\n    };\n\n    let defaultTime;\n\n    if(props.fromTime !== undefined){\n        defaultTime = new Date(props.fromTime);\n    }\n    else {\n        defaultTime = new Date(Date.now())\n    }\n\n    const [text, setText] = useState(getValidDisplayTime(defaultTime.getHours(),defaultTime.getMinutes(), defaultTime.getSeconds()));\n    const [idInterval, setIdInterval] = useState(0);\n    const [isCount, setIsCount] = useState(false);\n\n    const startStopwatch = () => {\n        if (time === undefined) {\n            if(props.fromTime !== undefined) {\n                time = new Date(props.fromTime);\n            }\n            else {\n                time = new Date(2000,0,0,0,0,0,0);\n            }\n        }\n        let start = Date.now();\n        const id = setInterval(function () {\n            const delta = Date.now() - start;\n            time.setMinutes(defaultTime.getMinutes());\n            time.setHours(defaultTime.getHours());\n            time.setSeconds(Math.floor(delta / 1000) + defaultTime.getMinutes());\n            props.hint(time.getSeconds());\n            setText(getValidDisplayTime(time.getHours(), time.getMinutes(), time.getSeconds()));\n        }, 1000);\n        setIdInterval(id)\n    };\n    const [isFinished, setIsFinished] = useState(false);\n    const startTimer = () => {\n        let countDownDate =new Date(Date.now());\n        countDownDate.setSeconds(countDownDate.getSeconds() +defaultTime.getSeconds() + 1);\n        countDownDate.setMinutes(countDownDate.getMinutes() + defaultTime.getMinutes());\n        countDownDate.setHours(countDownDate.getHours() + defaultTime.getHours());\n\n        const x = setInterval(function() {\n            const now = new Date().getTime();\n            const distance = countDownDate - now;\n            console.log(\"DISTANCE IS : \" + distance);\n            if (distance <= 0.01) {\n                clearInterval(x);\n                setIsFinished(true);\n            }\n            console.log(\"Finished BOOLEAN : \" + isFinished);\n            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n            const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n            props.hint(seconds);\n            setText(getValidDisplayTime(hours,minutes,seconds));\n        }, 1000);\n        //setIsFinished(true);\n    };\n    if(isFinished === true) {\n        props.finishEvent();\n        setIsFinished(false);\n    }\n\n    if(props.isOn === true && isCount === false){\n        if(props.watchType === \"timer\"){\n            startTimer();\n        }\n        else if (props.watchType === \"stopwatch\"){\n            startStopwatch()\n        }\n        setIsCount(true);\n    }\n    else if (props.isOn === false && isCount === true) {\n        clearInterval(idInterval)\n    }\n\n    return(\n        <React.Fragment>\n            <div>{text}</div>\n        </React.Fragment>\n    )\n};\n\nexport default Time;"]},"metadata":{},"sourceType":"module"}