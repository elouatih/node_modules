{"ast":null,"code":"var _jsxFileName = \"/home/elouati/Bureau/projet_working/client/src/Game/Chat.js\";\nimport React from 'react';\nimport { socket } from '../socket';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class Chat extends React.Component {\n  /*             \n      Input : props={lstPlayer,lstConvo,authore}\n              lstPlayer : object : list of all the players\n              lstConvo : object : list of all the conversations\n              authore : string : name of the player\n       Syntax : <Chat lstPlayer={lstPlayer} lstConvo={lstConvo} authore={authore} />\n          \n      Author : Hugo KELHETTER\n  */\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      if (!this.state.textValue) return;\n      const newMessage = {\n        msg: this.state.textValue,\n        authore: this.props.authore,\n        convo: this.state.convo\n      };\n      this.setState({\n        messages: this.addMessage(newMessage),\n        textValue: \"\"\n      });\n      socket.emit(\"sendMessage\", newMessage);\n    };\n\n    this.receiveMessage = newMessage => {\n      let messages = this.state.messages;\n      const message = {\n        msg: [newMessage.msg],\n        authore: [newMessage.authore]\n      };\n      messages[newMessage.convo].push(message);\n    };\n\n    this.handleConvoChange = event => {\n      this.setState({\n        convo: event.target.value\n      });\n    };\n\n    let _messages = {};\n    Object.keys(this.props.lstConvo).map(convo => _messages[convo] = []);\n    this.state = {\n      textValue: \"\",\n      convo: Object.keys(this.props.lstConvo)[0],\n      messages: _messages,\n      inConvo: false\n    }; //this.handleSubmit = this.handleSubmit.bind(this)\n    //this.handleConvoChange = this.handleConvoChange.bind(this)\n    //this.receiveMessage = this.receiveMessage.bind(this)\n\n    this.lastMessage = /*#__PURE__*/React.createRef();\n  }\n\n  /* \n      Function : shouldComponentUpdate\n  \n      Description : the component only updates if the state changes\n          \n      Author : Hugo KELHETTER\n  */\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.state !== nextState || this.props.lstConvo !== nextProps.lstConvo;\n  }\n  /* \n      Function : handleSubmit\n  \n      Syntax  : handleSubmit(e)\n          \n      Input   : e : event calling the function\n      \n      Description : \n          update this.state.messages by adding a new value to the object \n              containing conversation room's name a string and author's id\n          this.state.textValue is set to \"\"\n      \n      Author : Hugo KELHETTER\n  */\n\n\n  addMessage(newMessage) {\n    let messages = this.state.messages;\n    messages[this.state.convo].push(newMessage);\n    return messages;\n  }\n\n  /* \n      Function : updateText \n  \n      Syntax  : updateText(e)\n          \n      Input   : e : the value of the event calling the function\n          \n      Description : update this.state.textValue based on the pressed key\n       Author : Hugo KELHETTER\n          \n  */\n  updateText(e) {\n    this.setState({\n      textValue: e\n    });\n  }\n\n  componentDidMount() {\n    this.scrollToBottom();\n    socket.on(\"receiveMessage\", data => {\n      this.setState({\n        message: this.addMessage(data)\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    Object.keys(this.props.lstConvo).map(convo => {\n      if (this.state.messages[convo] === undefined) this.state.messages[convo] = [];\n    });\n    if (prevState.messages[this.state.convo].length !== this.state.messages[this.state.convo].length) this.scrollToBottom();\n  }\n\n  componentWillUnmount() {\n    socket.removeAllListeners();\n  }\n  /* \n      Function : scrollToBottom\n  \n      Syntax  : scrollToBottom()\n      \n      Description : focus on the bottom of the chat\n          \n  */\n\n\n  scrollToBottom() {\n    var _this$lastMessage, _this$lastMessage$cur;\n\n    (_this$lastMessage = this.lastMessage) === null || _this$lastMessage === void 0 ? void 0 : (_this$lastMessage$cur = _this$lastMessage.current) === null || _this$lastMessage$cur === void 0 ? void 0 : _this$lastMessage$cur.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }\n  /* \n      Function : handleConvoChange\n          \n      Description : set the active conversation\n       Author : Hugo KELHETTER\n          \n  */\n\n\n  /* \n      Function : render\n  \n      Syntax  : render()\n          \n      Description : display a chat + available conversations\n      \n      Author : Hugo KELHETTER\n  */\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat\",\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"convoChoice\",\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"convoSelect\",\n            onChange: this.handleConvoChange,\n            children: Object.keys(this.props.lstConvo).map(convo => /*#__PURE__*/_jsxDEV(\"option\", {\n              children: convo\n            }, convo, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"convo\",\n          children: [Object.values(this.state.messages[this.state.convo]).map((msg, i) => {\n            var _this$state$authore;\n\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `message ${msg.authore == this.props.authore ? \"\" : \"received\"}`,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"msg\",\n                children: [\" \", msg.msg]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"authore\",\n                children: msg.authore === this.props.authore ? \"Vous\" : (_this$state$authore = this.state.authore) === null || _this$state$authore === void 0 ? void 0 : _this$state$authore.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 33\n              }, this)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 29\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dummy\",\n            ref: this.lastMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"submit\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: this.handleSubmit,\n            children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n              disabled: this.state.inConvo,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"inputChat\",\n                autoComplete: \"off\",\n                value: this.state.textValue,\n                onChange: e => this.updateText(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nChat.propTypes = {\n  lstPlayer: PropTypes.object.isRequired,\n  lstConvo: PropTypes.object.isRequired\n};","map":{"version":3,"sources":["/home/elouati/Bureau/projet_working/client/src/Game/Chat.js"],"names":["React","socket","PropTypes","Chat","Component","constructor","props","handleSubmit","e","preventDefault","state","textValue","newMessage","msg","authore","convo","setState","messages","addMessage","emit","receiveMessage","message","push","handleConvoChange","event","target","value","Object","keys","lstConvo","map","inConvo","lastMessage","createRef","shouldComponentUpdate","nextProps","nextState","updateText","componentDidMount","scrollToBottom","on","data","componentDidUpdate","prevProps","prevState","undefined","length","componentWillUnmount","removeAllListeners","current","scrollIntoView","behavior","render","values","i","name","propTypes","lstPlayer","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { socket } from '../socket'\nimport PropTypes from 'prop-types';\n\nexport default class Chat extends React.Component {\n    /*             \n        Input : props={lstPlayer,lstConvo,authore}\n                lstPlayer : object : list of all the players\n                lstConvo : object : list of all the conversations\n                authore : string : name of the player\n\n        Syntax : <Chat lstPlayer={lstPlayer} lstConvo={lstConvo} authore={authore} />\n            \n        Author : Hugo KELHETTER\n    */\n    constructor(props) {\n        super(props)\n        let messages = {}\n        Object.keys(this.props.lstConvo).map((convo) =>\n            messages[convo] = []\n        )\n        this.state = { textValue: \"\", convo: Object.keys(this.props.lstConvo)[0], messages, inConvo: false }\n        //this.handleSubmit = this.handleSubmit.bind(this)\n        //this.handleConvoChange = this.handleConvoChange.bind(this)\n        //this.receiveMessage = this.receiveMessage.bind(this)\n        this.lastMessage = React.createRef()\n    }\n    static propTypes = {\n        lstPlayer: PropTypes.object.isRequired,\n        lstConvo: PropTypes.object.isRequired\n    }\n    /* \n        Function : shouldComponentUpdate\n    \n        Description : the component only updates if the state changes\n            \n        Author : Hugo KELHETTER\n    */\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.state !== nextState || this.props.lstConvo !== nextProps.lstConvo\n    }\n    /* \n        Function : handleSubmit\n    \n        Syntax  : handleSubmit(e)\n            \n        Input   : e : event calling the function\n        \n        Description : \n            update this.state.messages by adding a new value to the object \n                containing conversation room's name a string and author's id\n            this.state.textValue is set to \"\"\n        \n        Author : Hugo KELHETTER\n    */\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (!this.state.textValue) return\n        const newMessage = { msg: this.state.textValue, authore: this.props.authore, convo: this.state.convo }\n        this.setState({\n            messages: this.addMessage(newMessage),\n            textValue: \"\"\n        })\n        socket.emit(\"sendMessage\", newMessage)\n\n    }\n    addMessage(newMessage) {\n        let messages = this.state.messages\n        messages[this.state.convo].push(newMessage)\n        return messages\n    }\n    receiveMessage = (newMessage) => {\n        let messages = this.state.messages\n        const message = { msg: [newMessage.msg], authore: [newMessage.authore] }\n        messages[newMessage.convo].push(message)\n    }\n    /* \n        Function : updateText \n    \n        Syntax  : updateText(e)\n            \n        Input   : e : the value of the event calling the function\n            \n        Description : update this.state.textValue based on the pressed key\n\n        Author : Hugo KELHETTER\n            \n    */\n    updateText(e) {\n        this.setState({ textValue: e })\n    }\n    componentDidMount() {\n        this.scrollToBottom()\n        socket.on(\"receiveMessage\", (data) => {\n            this.setState({ message: this.addMessage(data) })\n        })\n    }\n    componentDidUpdate(prevProps, prevState) {\n        Object.keys(this.props.lstConvo).map((convo) => {\n            if (this.state.messages[convo] === undefined) this.state.messages[convo] = []\n        })\n        if (prevState.messages[this.state.convo].length !== this.state.messages[this.state.convo].length) this.scrollToBottom()\n\n    }\n    componentWillUnmount() {\n        socket.removeAllListeners()\n    }\n    /* \n        Function : scrollToBottom\n    \n        Syntax  : scrollToBottom()\n        \n        Description : focus on the bottom of the chat\n            \n    */\n    scrollToBottom() {\n        this.lastMessage?.current?.scrollIntoView({ behavior: 'smooth' })\n    }\n    /* \n        Function : handleConvoChange\n            \n        Description : set the active conversation\n\n        Author : Hugo KELHETTER\n            \n    */\n    handleConvoChange = (event) => {\n        this.setState({ convo: event.target.value })\n    }\n    /* \n        Function : render\n    \n        Syntax  : render()\n            \n        Description : display a chat + available conversations\n        \n        Author : Hugo KELHETTER\n    */\n    render() {\n        return (\n            <div className=\"chat\">\n                <>\n                    <div id=\"convoChoice\">\n\n                        <select name=\"convoSelect\" onChange={this.handleConvoChange}>\n                            {Object.keys(this.props.lstConvo).map((convo) =>\n                                <option key={convo} >{convo}</option>\n                            )}\n                        </select>\n                    </div>\n                    <div className=\"convo\">\n                        {Object.values(this.state.messages[this.state.convo]).map((msg, i) =>\n                            <div key={i} className={`message ${msg.authore == this.props.authore ? \"\" : \"received\"}`}>\n                                <p className=\"msg\"> {msg.msg}</p>\n                                <p className=\"authore\">{msg.authore === this.props.authore ? \"Vous\" : this.state.authore?.name}</p>\n                            </div>\n\n                        )}\n                        {/* empty div to focus on with scrollToBottom */}\n                        <div className=\"dummy\" ref={this.lastMessage}></div>\n                    </div>\n                    <div className=\"submit\">\n                        <form onSubmit={this.handleSubmit} >\n                            <fieldset disabled={this.state.inConvo}>\n                                <input id=\"inputChat\" autoComplete=\"off\" value={this.state.textValue} onChange={e => this.updateText(e.target.value)} />\n                                <input type=\"submit\"></input>\n                            </fieldset>\n                        </form>\n                    </div>\n                </>\n\n\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}