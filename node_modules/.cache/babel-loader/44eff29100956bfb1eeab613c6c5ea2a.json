{"ast":null,"code":"/* \n    Function : handleClickTile\n\n    Syntax  : handleClickTile(h)\n        \n    Input   : h : data of the selectedTile\n        \n    Description : \n        change the state of selectedTile based on which tile is clicked and the current state\n        if the current state's id is equal to h's id, the state is set to null\n        else it is updated to h's data     \n\n    Author : Hugo KELHETTER\n*/\nimport { socket } from \"../../socket\";\nimport isIncluded from \"../../Interface/utils/isIncluded\";\nimport deleteItemArray from \"../../Interface/utils/deleteItemArray\";\n\nfunction handleClickTileFarmer(h) {\n  var _this$state$selectedT;\n\n  console.log(\"SELECTED TILE = \", this.state.selectedTile);\n  console.log(\"h.props.id = \" + h.props.id + \" .state.selectedTile.id = \" + ((_this$state$selectedT = this.state.selectedTile) === null || _this$state$selectedT === void 0 ? void 0 : _this$state$selectedT.id));\n  const boolean = isIncluded(this.state.selectedTile, h.props)[0];\n  const value = isIncluded(this.state.selectedTile, h.props)[1];\n  console.log(\"BOOLEAN = \", boolean);\n  console.log(\"VALUE = \", value);\n\n  if (boolean) {\n    this.setState({\n      selectedTile: deleteItemArray(this.state.selectedTile, value)\n    });\n  }\n  /*if (h.props.id === this.state.selectedTile?.id) {\n      this.setState({ selectedTile: null })\n  }*/\n  else {\n      this.setState({\n        selectedTile: [...this.state.selectedTile, h.props]\n      });\n      console.log(\"SELECTED TILE = \", this.state.selectedTile); //this.setState({ selectedTile: h.props })\n      //console.log(\"SELECTED TILE \", this.state.selectedTile?.id);\n\n      if (this.props.role === 1) {\n        socket.emit(\"getPlayerActivity\", this.state.id, h.props.id, response => {\n          console.log(\"GET PLAYER ACTIVITY IS : \", response[0]); //let { selectedTile } = this.state;\n\n          this.setState(state => {\n            const selectedTile = state.selectedTile.map(item => {\n              console.log(\"item = \", item.practice);\n              const source = {\n                practice: response[0].practice\n              };\n              console.log(\"SOURCE = \", source);\n              const returned = Object.assign(item, source);\n              return item;\n            });\n            return { ...state,\n              selectedTile\n            };\n          });\n          /*this.setState({\n              selectedTile : {\n                  ...this.state.selectedTile,\n                  practice: response[0].practice\n              }\n          })*/\n          //console.log(this.state.selectedTile.practice);\n\n          /*const newSelectedTile = this.state.selectedTile;\n          //console.log(newSelectedTile);\n          //newSelectedTile.practice = response[0].practice;\n          this.setState({[this.state.selectedTile.practice]: response[0].practice});\n          console.log(this.state.selectedTile)*/\n        });\n      }\n    }\n}\n\nexport default handleClickTileFarmer;","map":{"version":3,"sources":["/home/elouati/Bureau/projet_working/client/src/Game/controls/handleClickTileFarmer.js"],"names":["socket","isIncluded","deleteItemArray","handleClickTileFarmer","h","console","log","state","selectedTile","props","id","boolean","value","setState","role","emit","response","map","item","practice","source","returned","Object","assign"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,MAAR,QAAqB,cAArB;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,OAAOC,eAAP,MAA4B,uCAA5B;;AAEA,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;AAAA;;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgC,KAAKC,KAAL,CAAWC,YAA3C;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBF,CAAC,CAACK,KAAF,CAAQC,EAA1B,GAA+B,4BAA/B,6BAA8D,KAAKH,KAAL,CAAWC,YAAzE,0DAA8D,sBAAyBE,EAAvF,CAAZ;AACA,QAAMC,OAAO,GAAGV,UAAU,CAAC,KAAKM,KAAL,CAAWC,YAAZ,EAA0BJ,CAAC,CAACK,KAA5B,CAAV,CAA6C,CAA7C,CAAhB;AACA,QAAMG,KAAK,GAAGX,UAAU,CAAC,KAAKM,KAAL,CAAWC,YAAZ,EAA0BJ,CAAC,CAACK,KAA5B,CAAV,CAA6C,CAA7C,CAAd;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BK,OAA1B;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBM,KAAxB;;AACA,MAAID,OAAJ,EAAY;AACR,SAAKE,QAAL,CAAc;AAACL,MAAAA,YAAY,EAAEN,eAAe,CAAC,KAAKK,KAAL,CAAWC,YAAZ,EAA0BI,KAA1B;AAA9B,KAAd;AACH;AACD;AACJ;AACA;AALI,OAMK;AACD,WAAKC,QAAL,CAAc;AAACL,QAAAA,YAAY,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,YAAf,EAA6BJ,CAAC,CAACK,KAA/B;AAAf,OAAd;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgC,KAAKC,KAAL,CAAWC,YAA3C,EAFC,CAGD;AACA;;AACA,UAAG,KAAKC,KAAL,CAAWK,IAAX,KAAoB,CAAvB,EAAyB;AACrBd,QAAAA,MAAM,CAACe,IAAP,CAAY,mBAAZ,EAAiC,KAAKR,KAAL,CAAWG,EAA5C,EAAgDN,CAAC,CAACK,KAAF,CAAQC,EAAxD,EAA6DM,QAAQ,IAAI;AACrEX,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCU,QAAQ,CAAC,CAAD,CAAjD,EADqE,CAErE;;AACA,eAAKH,QAAL,CACIN,KAAK,IAAI;AACL,kBAAMC,YAAY,GAAGD,KAAK,CAACC,YAAN,CAAmBS,GAAnB,CAAuBC,IAAI,IAAI;AAChDb,cAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBY,IAAI,CAACC,QAA5B;AACA,oBAAMC,MAAM,GAAG;AAACD,gBAAAA,QAAQ,EAAEH,QAAQ,CAAC,CAAD,CAAR,CAAYG;AAAvB,eAAf;AACAd,cAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBc,MAAzB;AACA,oBAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcL,IAAd,EAAoBE,MAApB,CAAjB;AACA,qBAAOF,IAAP;AACH,aANoB,CAArB;AAOA,mBAAO,EACH,GAAGX,KADA;AAEHC,cAAAA;AAFG,aAAP;AAIH,WAbL;AAeA;AAChB;AACA;AACA;AACA;AACA;AACgB;;AACA;AAChB;AACA;AACA;AACA;AACa,SA9BD;AA+BH;AACJ;AACJ;;AACD,eAAeL,qBAAf","sourcesContent":["/* \n    Function : handleClickTile\n\n    Syntax  : handleClickTile(h)\n        \n    Input   : h : data of the selectedTile\n        \n    Description : \n        change the state of selectedTile based on which tile is clicked and the current state\n        if the current state's id is equal to h's id, the state is set to null\n        else it is updated to h's data     \n\n    Author : Hugo KELHETTER\n*/\nimport {socket} from \"../../socket\";\nimport isIncluded from \"../../Interface/utils/isIncluded\";\nimport deleteItemArray from \"../../Interface/utils/deleteItemArray\";\n\nfunction handleClickTileFarmer(h) {\n    console.log(\"SELECTED TILE = \", this.state.selectedTile);\n    console.log(\"h.props.id = \" + h.props.id + \" .state.selectedTile.id = \" + this.state.selectedTile?.id)\n    const boolean = isIncluded(this.state.selectedTile, h.props)[0];\n    const value = isIncluded(this.state.selectedTile, h.props)[1];\n    console.log(\"BOOLEAN = \", boolean);\n    console.log(\"VALUE = \", value);\n    if (boolean){\n        this.setState({selectedTile: deleteItemArray(this.state.selectedTile, value)});\n    }\n    /*if (h.props.id === this.state.selectedTile?.id) {\n        this.setState({ selectedTile: null })\n    }*/\n    else {\n        this.setState({selectedTile: [...this.state.selectedTile, h.props]})\n        console.log(\"SELECTED TILE = \", this.state.selectedTile);\n        //this.setState({ selectedTile: h.props })\n        //console.log(\"SELECTED TILE \", this.state.selectedTile?.id);\n        if(this.props.role === 1){\n            socket.emit(\"getPlayerActivity\", this.state.id, h.props.id, (response => {\n                console.log(\"GET PLAYER ACTIVITY IS : \", response[0]);\n                //let { selectedTile } = this.state;\n                this.setState(\n                    state => {\n                        const selectedTile = state.selectedTile.map(item => {\n                            console.log(\"item = \", item.practice);\n                            const source = {practice: response[0].practice}\n                            console.log(\"SOURCE = \", source);\n                            const returned = Object.assign(item, source);\n                            return item;\n                        } )\n                        return {\n                            ...state,\n                            selectedTile\n                        }\n                    }\n                )\n                /*this.setState({\n                    selectedTile : {\n                        ...this.state.selectedTile,\n                        practice: response[0].practice\n                    }\n                })*/\n                //console.log(this.state.selectedTile.practice);\n                /*const newSelectedTile = this.state.selectedTile;\n                //console.log(newSelectedTile);\n                //newSelectedTile.practice = response[0].practice;\n                this.setState({[this.state.selectedTile.practice]: response[0].practice});\n                console.log(this.state.selectedTile)*/\n            }))\n        }\n    }\n}\nexport default handleClickTileFarmer"]},"metadata":{},"sourceType":"module"}