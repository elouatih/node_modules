{"ast":null,"code":"var _jsxFileName = \"/home/elouati/Bureau/projet_working/client/src/Game/animator/AnimatorLoader.js\";\nimport React from 'react';\nimport { socket } from '../../socket.js';\nimport PropTypes from 'prop-types';\nimport { generateHexes, generateRivers } from \"../map/MapUtil.js\";\nimport Bassin from \"../map/Bassin.js\";\nimport handleClickTile from '../controls/handleClickTileFarmer.js';\nimport ChangeTile from './ChangeTile.js';\nimport Menu from '../controls/Menu.js';\nimport { Button, Typography } from '@material-ui/core'; //import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\n//import CheckBoxIcon from '@material-ui/icons/CheckBox';\n\nimport ConfirmDialog from \"../controls/ConfirmDialog.js\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport SetFarmers from \"../../Interface/Animator/SetFarmers\";\nimport SetTimeInterface from \"../../Interface/Animator/SetTimeInterface\";\nimport Settings from \"../../Interface/Animator/Settings\";\nimport Style from \"../../Interface/Header/Header.module.scss\";\nimport StyleStrategy from \"../../Interface/Strategy/Strategy.module.scss\";\nimport Checkbox from \"../../Interface/utils/Checkbox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class AnimatorLoader extends React.Component {\n  /* \n      Input : props={name}\n              name: string : name of the player\n      \n      Syntax : <AnimatorLoader name=\"player's name\"/>\n  */\n  constructor(props) {\n    super(props);\n\n    this.addConvo = data => {\n      if (data.convoName.length === 0) {\n        alert(\"vous devez entrer un nom\");\n        return false;\n      }\n\n      for (const entry in this.state.lstConvo) {\n        if (entry === data.convoName) {\n          alert(\"Nom déjà pris\");\n          return false;\n        }\n      }\n\n      let newConvo = [];\n      const name = data.convoName;\n\n      for (const entry in data.lstPlayer) {\n        if (!(entry === \"convoName\" || entry === \"lstConvo\")) {\n          if (data.lstPlayer[entry]) newConvo.push(entry);\n        }\n      }\n\n      if (newConvo.length > 0) {\n        this.setState({\n          lstConvo: { ...this.state.lstConvo,\n            [name]: newConvo\n          }\n        });\n        return true;\n      }\n\n      alert(\"Vous devez selectionner des joueurs\");\n      return false;\n    };\n\n    this.componentWillMount = () => {\n      this.selectedCheckboxes = new Set();\n    };\n\n    this.toggleCheckbox = label => {\n      const newSelected = new Set();\n\n      if (this.selectedCheckboxes.has(label)) {\n        //this.setValueActivity(label, 0);\n        this.selectedCheckboxes.delete(label);\n        this.setState({\n          selected: newSelected\n        });\n      } else {\n        this.selectedCheckboxes.add(label);\n        this.setState({\n          selected: newSelected\n        });\n      }\n    };\n\n    this.updateMap = tileChange => {\n      let tile = this.state.map.moreHexas[tileChange.selectedTile - 1];\n      delete tileChange.selectedTile;\n      tile = this.updateObject(tile, tileChange);\n      this.setState({\n        selectedTile: \"\"\n      });\n    };\n\n    this.getFinishTourPlayers = () => {\n      let finishBool = 0; //if(this.state.lstPlayer && this.state.lstPlayer.length){\n\n      for (var i = 0; i < this.state.lstPlayer.length; i++) {\n        if (this.state.lstPlayer[i].Id !== 11) {\n          socket.emit(\"getFinishTourPlayer\", this.state.lstPlayer[i].Id, response => {\n            console.log(\"FINISH TOUR \" + this.state.lstPlayer[i].Id + \" : \", response.FinishTour);\n            finishBool = finishBool + (response.FinishTour ? 1 : 0);\n            console.log(\"FINISH TOUR \" + this.state.lstPlayer[i].Id + \" : \", finishBool);\n          });\n        }\n      }\n      /*this.state.lstPlayer.map(item => {\n          if(item.Id !== 11){\n              socket.emit(\"getFinishTourPlayer\", item.Id, (response) => {\n                  console.log(\"FINISH TOUR \" + item.Id + \" : \", response.FinishTour);\n                  finishBool = finishBool + (response.FinishTour? 1: 0);\n                  console.log(\"FINISH TOUR \" + item.Id + \" : \", finishBool)\n              })}\n      })*/\n      //}\n\n\n      console.log(\"FINISH BOOL = \", finishBool);\n      return finishBool;\n    };\n\n    this.numberPlayers = () => {\n      return this.state.lstPlayer.length - 1;\n    };\n\n    this.handleSubmit = () => {\n      /*         console.log(this.state.action)\n              switch (this.state.action) {\n                  case \"Commencer la partie\":\n                      this.setState({ mapReady: false })\n                      socket.emit(\"mapReady\")\n                      break;\n                  case \"Terminer la partie\":\n                      socket.emit(\"endGame\")\n                      break;\n                  default:\n                      socket.emit(\"nextTurn\", () => {\n                          socket.emit(\"getTurn\", (response) => {\n                              this.setState({ tour: response })\n                          })\n                      })\n              } */\n      const action = this.actionToString();\n\n      if (action === \"Finir les modifications\") {\n        if (this.state.tour === -1) {\n          socket.emit(\"mapReady\");\n          console.log(\"mapReady\");\n          this.setState({\n            tour: 0\n          });\n        } else {\n          socket.emit(\"inputPhase\");\n          console.log(\"inputphase\");\n        }\n      } else {\n        console.log(\"this.getFinishTourPlayers()\", this.getFinishTourPlayers());\n        console.log(\"this.numberPlayers\", this.numberPlayers());\n\n        if (this.getFinishTourPlayers() === this.numberPlayers()) {\n          console.log(\"TOUR FINISHED\");\n          console.log(\"this.getFinishTourPlayers()\", this.getFinishTourPlayers());\n          socket.emit(\"nextTurn\", () => {\n            socket.emit(\"getTurn\", response => {\n              console.log(response);\n              this.setState({\n                tour: response\n              });\n            });\n          });\n        }\n      }\n\n      this.setState({\n        displayConfirmDialog: false,\n        farmersPlaying: !this.state.farmersPlaying\n      });\n    };\n\n    this.cancel = () => {\n      this.setState({\n        displayConfirmDialog: false\n      });\n    };\n\n    this.handleContinue = event => {\n      /* console.log(event.currentTarget, event.currentTarget.name)\n      this.setState({ farmersPlaying: !this.state.farmersPlaying })\n      if (!this.state.farmersPlaying) { socket.emit(\"inputPhase\", () => { }) } */\n      this.setState({\n        action: event.currentTarget.name,\n        displayConfirmDialog: true\n      });\n    };\n\n    this.submit = () => {\n      this.setState({\n        pAgris: this.selectedCheckboxes.has(\" 1.\"),\n        pTimers: this.selectedCheckboxes.has(\" 2.\"),\n        pNumber: this.selectedCheckboxes.has(\" 3.\"),\n        allDefault: false\n      });\n      console.log(this.state.pAgris, this.state.pTimers, this.state.pNumber, this.state.allDefault);\n    };\n\n    this.createCheckbox = label => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"agri\",\n        children: /*#__PURE__*/_jsxDEV(Checkbox, {\n          label: label,\n          isChecked: this.selectedCheckboxes.has(label),\n          handleCheckboxChange: this.toggleCheckbox\n        }, label, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n\n    this.state = {\n      interfaceCtx: 1,\n      lstPlayer: \"\",\n      lstTile: \"\",\n      map: {\n        moreHexas: \"\",\n        moreRivers: null\n      },\n      mapReady: true,\n      tour: -1,\n      action: \"\",\n      disconnected: false,\n      farmersPlaying: false,\n      listPlayer: [],\n      agriPlayer: [],\n      pAgris: false,\n      pTimers: false,\n      pNumber: false,\n      allDefault: true,\n      selected: new Set(),\n      finishTour: true\n    }; //this.addConvo = this.addConvo.bind(this)\n\n    this.handleClickTile = handleClickTile.bind(this);\n  }\n\n  /*\n      Function : componentDidMount\n       Description : retrieve the map and players's data\n       Author : Hugo KELHETTER\n    */\n  componentDidMount() {\n    socket.on(\"disconnect\", () => {\n      this.setState({\n        disconnected: true\n      });\n    });\n    socket.on(\"connect\", () => {\n      if (this.state.disconnected) {\n        socket.emit('reconnect', this.props.room, this.props.name, () => {\n          this.setState({\n            disconnected: false\n          });\n        });\n      }\n    });\n    socket.emit(\"getCurrentGrid\", response => {\n      const newHexas = generateHexes(response);\n      let lstTile = newHexas[1];\n      const newRivers = generateRivers(newHexas[0]); //const tampon = this.createTampon(newHexas, this.state.map.player)\n\n      this.setState({\n        map: { ...this.state.map,\n          moreHexas: newHexas[0],\n          moreRivers: newRivers,\n          selectedTile: null\n        },\n        lstTile\n      });\n    });\n    socket.emit(\"playersInRoom\", response => {\n      //console.log(\"RESPONSE\");\n      //console.log(response);\n      this.setState({\n        listPlayer: response\n      });\n      this.setState({\n        lstPlayer: response\n      }); //})\n    });\n    socket.emit(\"agriInRoom\", response => {\n      //console.log(\"RESPONSE\");\n      const agriculteursInRoom = [];\n      response.map(item => agriculteursInRoom.push(item.Name));\n      this.setState({\n        agriPlayer: agriculteursInRoom\n      }); //this.setState({agriPlayer: response})\n      //})\n    });\n    /*socket.emit(\"getSettings\", (response) => {\n        const s = response[0];\n        console.log(\"SETTINGS = \", s);\n        this.setState({\n            pAgris: s.PersonalizedAgris,\n            pTimers: s.PersonalizedTimers,\n            pNumber: s.PersonalizedNumber,\n            allDefault: s.DefaultData\n        })\n     })*/\n  }\n  /*\n      Function : updateObject\n       Syntax  : obj=updateObject(source,newData)\n       Input   : source : object : the object to update\n                newData : object : the object containing new data\n       Output  : obj : object : an updated object\n       Description : update source with the subset of data contained in newData\n                      let source = {firstname:hugo,name:kelhetter} and newData={firstname:jhon}\n                      let newObject=updateObject(source,newData)\n                      newObject = {firstname:jhon,name:kelhetter}\n       Author : Hugo KELHETTER\n  \n  */\n\n\n  updateObject(source, newData) {\n    for (const key in newData) {\n      source[key] = newData[key];\n    }\n\n    return source;\n  }\n  /*\n      Function : updateMap\n       Syntax  : updateMap(tileChange)\n       Input   : tileChange : object : new set of data for a tile of the map\n       Description : update the map with new data\n       Author : Hugo KELHETTER\n  \n  */\n\n\n  openTuto() {\n    window.open(`${window.location.href}tutorial?tuto=2`);\n  }\n\n  actionToString() {\n    if (this.state.farmersPlaying) return \"Finir le tour\";\n    return \"Finir les modifications\";\n  }\n\n  endGame() {\n    socket.emit(\"endGame\");\n  }\n  /* author Hossam ELOUATI */\n\n\n  settingsOptions(nextInterface) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: Style.Header,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: Style.Content,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: Style.TextColor,\n              children: \"Jeu S\\xE9rieux - Le Bassin de Moderbach\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: Style.TextColor,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row text-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-sm-6\",\n                children: [\"Pseudo : \", this.props.pseudo]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-sm-6\",\n                children: \"R\\xF4le : Animateur\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: StyleStrategy.nextInterface,\n            onClick: nextInterface,\n            children: \"Passer \\xE0 l'interface suivante\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          className: StyleStrategy.none4,\n          children: [/*#__PURE__*/_jsxDEV(\"header\", {\n            className: \"text-center\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: StyleStrategy.header,\n              children: \"Choisir entre ces options\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n            className: \"row text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: StyleStrategy.header2,\n              children: [this.createCheckbox(\" 1.\"), \" Personnaliser les r\\xF4les des agriculteurs\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 378,\n                columnNumber: 33\n              }, this), this.createCheckbox(\" 2.\"), \" Personnaliser les dur\\xE9es de chaque phase\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 33\n              }, this), this.selectedCheckboxes.has(\" 1.\") === false ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [this.createCheckbox(\" 3.\"), \" Choisir un nombre pour chaque type d'agriculteurs\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 384,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.submit,\n              className: StyleStrategy.nextInterface,\n              children: \"Valider\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 25\n          }, this), console.log(this.selectedCheckboxes)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n  agriActivity() {\n    return /*#__PURE__*/_jsxDEV(SetFarmers, {\n      pseudo: this.props.name,\n      listAgri: this.state.agriPlayer,\n      nextInterface: () => this.setState({\n        interfaceCtx: this.state.pTimers === true ? 3 : 4\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 16\n    }, this);\n  }\n  /* author Hossam ELOUATI */\n\n\n  setTimers() {\n    return /*#__PURE__*/_jsxDEV(SetTimeInterface, {\n      pseudo: this.props.name,\n      nextInterface: () => this.setState({\n        interfaceCtx: 4\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 16\n    }, this);\n  }\n\n  settings() {\n    return /*#__PURE__*/_jsxDEV(Settings, {\n      pseudo: this.props.name,\n      nextInterface: () => this.setState({\n        interfaceCtx: this.state.pAgris === true ? 2 : this.state.pTimers === true ? 3 : 4\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 16\n    }, this);\n  }\n  /*     Description : display the UI of the animator : the map, and controls over the map and the game in general\n  *       Author : Hugo KELHETTER\n  * */\n\n\n  principal() {\n    var _this$state$selectedT;\n\n    {\n      console.log(\"LIST PLAYER = \", this.state.lstPlayer);\n    }\n    {\n      this.state.listPlayer.map(item => console.log(\"ID : \" + item.Id + \" Name : \" + item.Name));\n    }\n    const buttonValue = this.actionToString(); //const buttonValue = this.state.mapReady ? \"Commencer la partie\" : `Terminer le tour ${this.state.tour}`\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.state.displayConfirmDialog && /*#__PURE__*/_jsxDEV(ConfirmDialog, {\n        cancel: this.cancel,\n        confirm: this.handleSubmit,\n        action: this.state.action\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(Menu, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"menu\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: this.openTuto,\n              children: \"Aide\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"tour actuel : \", this.state.tour]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" \", this.state.mapReady && \"Vous pouvez modifier la carte avant le début de la partie. \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 450,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: \" Cliquez sur une case pour apporter des modifications\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" L'identifiant de la partie est : \", this.props.room]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              \"data-testid\": \"submit\",\n              name: buttonValue,\n              value: buttonValue,\n              onClick: this.handleContinue,\n              children: buttonValue\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              \"data-testid\": \"submit\",\n              name: \"Terminer la partie\",\n              onClick: this.endGame,\n              children: \"Terminer la partie\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 25\n          }, this), this.state.lstPlayer !== \"\" && this.state.lstTile !== \"\" && this.state.selectedTile && !this.state.farmersPlaying && /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"changeTile\",\n            children: /*#__PURE__*/_jsxDEV(ChangeTile, {\n              lstPlayer: this.state.lstPlayer,\n              lstTile: this.state.map.moreHexas,\n              updateMap: this.updateMap,\n              selectedTile: this.state.selectedTile,\n              type: this.state.selectedTile.className,\n              id: this.state.selectedTile.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 21\n        }, this), this.state.map.moreHexas !== \"\" && /*#__PURE__*/_jsxDEV(Bassin, {\n          handleClick: this.handleClickTile,\n          selectedId: (_this$state$selectedT = this.state.selectedTile) === null || _this$state$selectedT === void 0 ? void 0 : _this$state$selectedT.id,\n          map: this.state.map,\n          role: this.props.role,\n          id: this.state.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n  /*\n  Function : render\n   Syntax  : render()\n   Description : display the UI of the animator : the map, and controls over the map and the game in general\n   Author : Hossam ELOUATI\n  */\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: this.state.interfaceCtx === 2 ? this.agriActivity() : this.state.interfaceCtx === 3 ? this.setTimers() : this.state.interfaceCtx === 1 ? this.settingsOptions(() => this.setState({\n        interfaceCtx: this.state.pAgris === true ? 2 : this.state.pTimers === true ? 3 : 4\n      })) : this.principal()\n    }, void 0, false);\n  }\n\n}\nAnimatorLoader.propTypes = {\n  name: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["/home/elouati/Bureau/projet_working/client/src/Game/animator/AnimatorLoader.js"],"names":["React","socket","PropTypes","generateHexes","generateRivers","Bassin","handleClickTile","ChangeTile","Menu","Button","Typography","ConfirmDialog","ListItem","ListItemText","SetFarmers","SetTimeInterface","Settings","Style","StyleStrategy","Checkbox","AnimatorLoader","Component","constructor","props","addConvo","data","convoName","length","alert","entry","state","lstConvo","newConvo","name","lstPlayer","push","setState","componentWillMount","selectedCheckboxes","Set","toggleCheckbox","label","newSelected","has","delete","selected","add","updateMap","tileChange","tile","map","moreHexas","selectedTile","updateObject","getFinishTourPlayers","finishBool","i","Id","emit","response","console","log","FinishTour","numberPlayers","handleSubmit","action","actionToString","tour","displayConfirmDialog","farmersPlaying","cancel","handleContinue","event","currentTarget","submit","pAgris","pTimers","pNumber","allDefault","createCheckbox","interfaceCtx","lstTile","moreRivers","mapReady","disconnected","listPlayer","agriPlayer","finishTour","bind","componentDidMount","on","room","newHexas","newRivers","agriculteursInRoom","item","Name","source","newData","key","openTuto","window","open","location","href","endGame","settingsOptions","nextInterface","Header","Content","TextColor","pseudo","none4","header","header2","agriActivity","setTimers","settings","principal","buttonValue","className","id","role","render","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { socket } from '../../socket.js'\nimport PropTypes from 'prop-types';\nimport { generateHexes, generateRivers } from \"../map/MapUtil.js\"\nimport Bassin from \"../map/Bassin.js\"\nimport handleClickTile from '../controls/handleClickTileFarmer.js'\nimport ChangeTile from './ChangeTile.js'\nimport Menu from '../controls/Menu.js'\nimport { Button, Typography } from '@material-ui/core'\n//import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\n//import CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport ConfirmDialog from \"../controls/ConfirmDialog.js\"\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport SetFarmers from \"../../Interface/Animator/SetFarmers\";\nimport SetTimeInterface from \"../../Interface/Animator/SetTimeInterface\";\nimport Settings from \"../../Interface/Animator/Settings\";\nimport Style from \"../../Interface/Header/Header.module.scss\";\nimport StyleStrategy from \"../../Interface/Strategy/Strategy.module.scss\";\nimport Checkbox from \"../../Interface/utils/Checkbox\";\n\nexport default class AnimatorLoader extends React.Component {\n    /* \n        Input : props={name}\n                name: string : name of the player\n        \n        Syntax : <AnimatorLoader name=\"player's name\"/>\n    */\n    constructor(props) {\n        super(props)\n        this.state = {\n            interfaceCtx: 1,\n            lstPlayer: \"\", lstTile: \"\", map: {moreHexas: \"\", moreRivers: null}, mapReady: true, tour: -1, action: \"\",\n            disconnected: false, farmersPlaying: false, listPlayer: [], agriPlayer: [],\n            pAgris: false, pTimers: false, pNumber: false, allDefault: true, selected: new Set(),\n            finishTour: true\n        }\n        //this.addConvo = this.addConvo.bind(this)\n        this.handleClickTile = handleClickTile.bind(this)\n\n    }\n\n    static propTypes = {\n        name: PropTypes.string.isRequired\n    }\n    /* \nFunction : addConvo\n\nSyntax  : boolean=addConvo(data)\n\nInput   : object following the next pattern\n            {\n                convoName : \"name of the conversation\",\n                player1 : boolean,\n                player2 : boolean\n                ...\n            }\n            playerN's represents the player's name and the value represents \n                    whether or not it is part of the conversation\n\nOutput  : the success of the function\n\nDescription : display the different components of the app\n\nAuthor : Hugo KELHETTER\n    \n*/\n    addConvo = (data) => {\n\n        if (data.convoName.length === 0) {\n            alert(\"vous devez entrer un nom\")\n            return false\n        }\n        for (const entry in this.state.lstConvo) {\n            if (entry === data.convoName) {\n                alert(\"Nom déjà pris\")\n                return false\n            }\n        }\n\n        let newConvo = []\n        const name = data.convoName\n        for (const entry in data.lstPlayer) {\n            if (!(entry === \"convoName\" || entry === \"lstConvo\")) {\n                if (data.lstPlayer[entry]) newConvo.push(entry)\n            }\n        }\n\n        if (newConvo.length > 0) {\n            this.setState({lstConvo: {...this.state.lstConvo, [name]: newConvo}})\n            return true\n        }\n        alert(\"Vous devez selectionner des joueurs\")\n        return false\n    }\n    componentWillMount = () => {\n        this.selectedCheckboxes = new Set();\n    }\n\n    toggleCheckbox = (label) => {\n        const newSelected = new Set();\n        if (this.selectedCheckboxes.has(label)) {\n            //this.setValueActivity(label, 0);\n            this.selectedCheckboxes.delete(label);\n            this.setState({selected: newSelected});\n\n        } else {\n            this.selectedCheckboxes.add(label);\n            this.setState({selected: newSelected});\n        }\n    }\n\n    /*\n        Function : componentDidMount\n\n        Description : retrieve the map and players's data\n\n        Author : Hugo KELHETTER\n \n    */\n    componentDidMount() {\n        socket.on(\"disconnect\", () => {\n            this.setState({disconnected: true});\n        })\n\n        socket.on(\"connect\", () => {\n            if (this.state.disconnected) {\n                socket.emit('reconnect', this.props.room, this.props.name, () => {\n                    this.setState({disconnected: false})\n                });\n            }\n        })\n\n        socket.emit(\"getCurrentGrid\", (response) => {\n            const newHexas = generateHexes(response)\n            let lstTile = newHexas[1]\n            const newRivers = generateRivers(newHexas[0])\n            //const tampon = this.createTampon(newHexas, this.state.map.player)\n            this.setState({\n                map: {...this.state.map, moreHexas: newHexas[0], moreRivers: newRivers, selectedTile: null},\n                lstTile\n            })\n\n        })\n        socket.emit(\"playersInRoom\", (response) => {\n            //console.log(\"RESPONSE\");\n            //console.log(response);\n            this.setState({listPlayer: response})\n            this.setState({lstPlayer: response})\n            //})\n        })\n\n        socket.emit(\"agriInRoom\", (response) => {\n            //console.log(\"RESPONSE\");\n            const agriculteursInRoom = []\n            response.map((item) => agriculteursInRoom.push(item.Name));\n            this.setState({agriPlayer: agriculteursInRoom})\n            //this.setState({agriPlayer: response})\n            //})\n        })\n\n        /*socket.emit(\"getSettings\", (response) => {\n            const s = response[0];\n            console.log(\"SETTINGS = \", s);\n            this.setState({\n                pAgris: s.PersonalizedAgris,\n                pTimers: s.PersonalizedTimers,\n                pNumber: s.PersonalizedNumber,\n                allDefault: s.DefaultData\n            })\n\n        })*/\n    }\n\n    /*\n        Function : updateObject\n\n        Syntax  : obj=updateObject(source,newData)\n\n        Input   : source : object : the object to update\n                  newData : object : the object containing new data\n\n        Output  : obj : object : an updated object\n\n        Description : update source with the subset of data contained in newData\n                        let source = {firstname:hugo,name:kelhetter} and newData={firstname:jhon}\n                        let newObject=updateObject(source,newData)\n                        newObject = {firstname:jhon,name:kelhetter}\n\n        Author : Hugo KELHETTER\n    \n    */\n    updateObject(source, newData) {\n        for (const key in newData) {\n            source[key] = newData[key]\n        }\n        return source\n    }\n\n    /*\n        Function : updateMap\n\n        Syntax  : updateMap(tileChange)\n\n        Input   : tileChange : object : new set of data for a tile of the map\n\n        Description : update the map with new data\n\n        Author : Hugo KELHETTER\n    \n    */\n\n    updateMap = (tileChange) => {\n        let tile = this.state.map.moreHexas[tileChange.selectedTile - 1]\n        delete tileChange.selectedTile\n        tile = this.updateObject(tile, tileChange)\n        this.setState({selectedTile: \"\"})\n    }\n    /* \n        Function : handleSubmit\n\n        Syntax  : handleSubmit()\n\n        Description : if mapReady == false then it starts the game for other players\n                      else it ends the turn\n\n        Author : Hugo KELHETTER\n    \n    */\n    getFinishTourPlayers = () => {\n        let finishBool = 0;\n        //if(this.state.lstPlayer && this.state.lstPlayer.length){\n        for(var i=0; i<this.state.lstPlayer.length; i++){\n            if(this.state.lstPlayer[i].Id !== 11){\n                socket.emit(\"getFinishTourPlayer\", this.state.lstPlayer[i].Id, (response) => {\n                    console.log(\"FINISH TOUR \" + this.state.lstPlayer[i].Id + \" : \", response.FinishTour);\n                    finishBool = finishBool + (response.FinishTour? 1: 0);\n                    console.log(\"FINISH TOUR \" + this.state.lstPlayer[i].Id + \" : \", finishBool)\n                })}\n        }\n        /*this.state.lstPlayer.map(item => {\n            if(item.Id !== 11){\n                socket.emit(\"getFinishTourPlayer\", item.Id, (response) => {\n                    console.log(\"FINISH TOUR \" + item.Id + \" : \", response.FinishTour);\n                    finishBool = finishBool + (response.FinishTour? 1: 0);\n                    console.log(\"FINISH TOUR \" + item.Id + \" : \", finishBool)\n                })}\n        })*/\n        //}\n        console.log(\"FINISH BOOL = \", finishBool);\n        return finishBool;\n    }\n\n    numberPlayers = () => {\n        return this.state.lstPlayer.length - 1;\n    }\n\n    handleSubmit = () => {\n        /*         console.log(this.state.action)\n                switch (this.state.action) {\n                    case \"Commencer la partie\":\n                        this.setState({ mapReady: false })\n                        socket.emit(\"mapReady\")\n                        break;\n                    case \"Terminer la partie\":\n                        socket.emit(\"endGame\")\n                        break;\n                    default:\n                        socket.emit(\"nextTurn\", () => {\n                            socket.emit(\"getTurn\", (response) => {\n                                this.setState({ tour: response })\n                            })\n                        })\n                } */\n        const action = this.actionToString()\n        if (action === \"Finir les modifications\") {\n            if (this.state.tour === -1) {\n                socket.emit(\"mapReady\")\n                console.log(\"mapReady\")\n                this.setState({tour: 0})\n            } else {\n                socket.emit(\"inputPhase\")\n                console.log(\"inputphase\")\n            }\n        } else {\n            console.log(\"this.getFinishTourPlayers()\", this.getFinishTourPlayers());\n            console.log(\"this.numberPlayers\", this.numberPlayers());\n            if(this.getFinishTourPlayers() === this.numberPlayers()){\n                console.log(\"TOUR FINISHED\");\n                console.log(\"this.getFinishTourPlayers()\", this.getFinishTourPlayers());\n                socket.emit(\"nextTurn\", () => {\n                    socket.emit(\"getTurn\", (response) => {\n                        console.log(response)\n                        this.setState({tour: response})\n                    })\n                })\n            }\n        }\n        this.setState({displayConfirmDialog: false, farmersPlaying: !this.state.farmersPlaying})\n    }\n    cancel = () => {\n        this.setState({displayConfirmDialog: false})\n    }\n    handleContinue = (event) => {\n        /* console.log(event.currentTarget, event.currentTarget.name)\n        this.setState({ farmersPlaying: !this.state.farmersPlaying })\n        if (!this.state.farmersPlaying) { socket.emit(\"inputPhase\", () => { }) } */\n        this.setState({action: event.currentTarget.name, displayConfirmDialog: true})\n    }\n\n    openTuto() {\n        window.open(`${window.location.href}tutorial?tuto=2`)\n    }\n\n    actionToString() {\n        if (this.state.farmersPlaying) return \"Finir le tour\"\n        return \"Finir les modifications\"\n    }\n\n    endGame() {\n        socket.emit(\"endGame\")\n    }\n\n\n    /* author Hossam ELOUATI */\n\n    submit = () => {\n        this.setState({\n            pAgris: this.selectedCheckboxes.has(\" 1.\"),\n            pTimers: this.selectedCheckboxes.has(\" 2.\"),\n            pNumber: this.selectedCheckboxes.has(\" 3.\"),\n            allDefault: false\n        })\n        console.log(this.state.pAgris,this.state.pTimers,this.state.pNumber,this.state.allDefault);\n    }\n\n    createCheckbox = (label) => (\n        <>\n            <label htmlFor={\"agri\"}>\n                <Checkbox label={label} isChecked={ this.selectedCheckboxes.has(label)} handleCheckboxChange={this.toggleCheckbox} key={label}/>\n            </label>\n        </>\n    )\n\n    settingsOptions(nextInterface) {\n        return (\n            <>\n                <div className={Style.Header}>\n                    <div className={Style.Content}>\n                        <div className=\"text-center\">\n                            <div className={Style.TextColor}>\n                                Jeu Sérieux - Le Bassin de Moderbach\n                            </div>\n                        </div>\n                        <div className={Style.TextColor}>\n                            <div className=\"row text-center\">\n                                <div className=\"col-sm-6\">Pseudo : {this.props.pseudo}</div>\n                                <div className=\"col-sm-6\">Rôle : Animateur</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <div className=\"text-center\">\n                        <button className={StyleStrategy.nextInterface} onClick={nextInterface}>\n                            Passer à l'interface suivante\n                        </button>\n                    </div>\n                    <section className={StyleStrategy.none4}>\n                        <header className=\"text-center\">\n                            <div className={StyleStrategy.header}>\n                                Choisir entre ces options\n                            </div>\n                        </header>\n                        <section className=\"row text-center\">\n                            <div className={StyleStrategy.header2}>\n                                {this.createCheckbox(\" 1.\")} Personnaliser les rôles des agriculteurs\n                                <br/>\n                                {this.createCheckbox(\" 2.\")} Personnaliser les durées de chaque phase\n                                <br/>\n                                {(this.selectedCheckboxes.has(\" 1.\") === false) ?\n                                    (<>\n                                        {this.createCheckbox(\" 3.\")} Choisir un nombre pour chaque type d'agriculteurs\n                                        <br/>\n                                    </>): null}\n                                {/*(this.selectedCheckboxes.has(\" 3.\" === false)) ?\n                                        (<>\n                                            {this.createCheckbox(\" 4.\")} Définir les types d'agriculteurs aléatoirement\n                                        </>) : null\n                                    }\n                                    {(this.selectedCheckboxes.has(\" 4.\" === false)) ?\n                                        (<>\n                                            {this.createCheckbox(\" 3.\")} Choisir un nombre pour chaque type d'agriculteurs\n                                        </>) : null\n                                    }\n                                    <br/>\n                                    </br>) : null*/}\n\n                            </div>\n                            <button onClick={this.submit} className={StyleStrategy.nextInterface}>Valider</button>\n                        </section>\n                        {console.log(this.selectedCheckboxes)}\n                    </section>\n                </div>\n            </>\n        );\n    }\n    agriActivity() {\n        return <SetFarmers pseudo={this.props.name}\n                           listAgri={this.state.agriPlayer}\n                            nextInterface={() => this.setState({\n                                interfaceCtx: (this.state.pTimers === true) ? 3 : 4\n                            })}/>\n    }\n\n    /* author Hossam ELOUATI */\n    setTimers() {\n        return <SetTimeInterface pseudo={this.props.name}\n                                 nextInterface={() => this.setState({interfaceCtx: 4})}/>\n    }\n\n    settings() {\n        return <Settings pseudo={this.props.name} nextInterface={\n            () => this.setState({\n                    interfaceCtx: (this.state.pAgris === true) ? 2 : (this.state.pTimers === true) ? 3 : 4\n                })}/>\n    }\n\n    /*     Description : display the UI of the animator : the map, and controls over the map and the game in general\n    *       Author : Hugo KELHETTER\n    * */\n    principal() {\n        {console.log(\"LIST PLAYER = \", this.state.lstPlayer)}\n        {this.state.listPlayer.map(item => (\n            console.log(\"ID : \" + item.Id + \" Name : \" + item.Name)))}\n        const buttonValue = this.actionToString()\n        //const buttonValue = this.state.mapReady ? \"Commencer la partie\" : `Terminer le tour ${this.state.tour}`\n        return (<>\n            {this.state.displayConfirmDialog &&\n            <ConfirmDialog cancel={this.cancel} confirm={this.handleSubmit} action={this.state.action}/>}\n\n            <div className=\"App\">\n                {\n                    < Menu>\n                        <div id=\"menu\">\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.openTuto}>\n                                Aide\n                            </Button>\n                            <Typography>tour actuel : {this.state.tour}</Typography>\n                            <Typography> {this.state.mapReady && \"Vous pouvez modifier la carte avant le début de la partie. \"}</Typography>\n                            <Typography> Cliquez sur une case pour apporter des modifications</Typography>\n                            <Typography> L'identifiant de la partie est : {this.props.room}</Typography>\n                            <Button variant=\"contained\" color=\"primary\" data-testid=\"submit\" name={buttonValue}\n                                    value={buttonValue} onClick={this.handleContinue}>\n                                {buttonValue}\n                            </Button>\n\n                            <Button variant=\"contained\" color=\"primary\" data-testid=\"submit\" name=\"Terminer la partie\"\n                                    onClick={this.endGame}>\n                                Terminer la partie\n                            </Button>\n                        </div>\n                        {(this.state.lstPlayer !== \"\" && this.state.lstTile !== \"\" && this.state.selectedTile && !this.state.farmersPlaying) &&\n                        <div id=\"changeTile\">\n                            <ChangeTile lstPlayer={this.state.lstPlayer} lstTile={this.state.map.moreHexas}\n                                        updateMap={this.updateMap}\n                                        selectedTile={this.state.selectedTile} type={this.state.selectedTile.className}\n                                        id={this.state.selectedTile.id}/>\n                        </div>\n                        }\n                    </Menu>\n                }\n                    {\n                        this.state.map.moreHexas !== \"\" &&\n                        <Bassin handleClick={this.handleClickTile} selectedId={this.state.selectedTile?.id}\n                                map={this.state.map} role={this.props.role} id={this.state.id}/>\n                    }\n            </div>\n        </>);\n    }\n\n    /*\n    Function : render\n\n    Syntax  : render()\n\n    Description : display the UI of the animator : the map, and controls over the map and the game in general\n\n    Author : Hossam ELOUATI\n \n*/\n    render() {\n        return (\n            <>\n                {\n                    this.state.interfaceCtx === 2 ? this.agriActivity() :\n                        this.state.interfaceCtx === 3 ? this.setTimers() :\n                            this.state.interfaceCtx === 1 ? this.settingsOptions(() => this.setState({\n                                    interfaceCtx: (this.state.pAgris === true) ? 2 : (this.state.pTimers === true) ? 3 : 4\n                                })):\n                                this.principal()\n                }\n                {/*{console.log(\"STATE ID = \" + this.state.id + \"\\nROLE = \"+this.props.role)}\n                <Updating ut={23} ub={3} oldUb={-1} oldUt={0} formations={[1, 0, 9, 1]} role={this.props.role} h={0} m={0} s={20}\n                   pseudo={this.props.name} bassin={nameSubBassin(getSubBassin(this.state.id))} numeroPhase={1} tour={this.state.tour}/>);*/}\n            </> )\n    }\n}"]},"metadata":{},"sourceType":"module"}