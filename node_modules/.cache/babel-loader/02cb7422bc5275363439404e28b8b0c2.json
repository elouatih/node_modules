{"ast":null,"code":"import{HexUtils}from'react-hexgrid';export var layout={spacing:1,orientation:{f0:Math.sqrt(3.0),f1:Math.sqrt(3.0)/2.0,f2:0.0,f3:3.0/2.0,b0:Math.sqrt(3.0)/3.0,b1:-1.0/3.0,b2:0.0,b3:2.0/3.0,startAngle:0.5},size:{y:3,x:3},origin:{x:0,y:0}};/* \n    Function : generateHexes\n\n    Syntax  : hexas=generateHexes()\n    \n    Outputs : hexas : object containing all data to create the hexagones (position)\n                        and the data for the game's interaction ( activity,subBasin...)\n\n    Description : return an object containing all the data needed to generate the map in class Bassin\n        \n    Author : Hugo KELHETTER\n*/export function generateHexes(data){var hexas={};var lstTile={};var hex;for(var i=0;i<data.length;i++){hex=HexUtils.pixelToHex({x:data[i].xOutlet,y:data[i].yOutlet},layout);//map ardiere\n//hex = HexUtils.pixelToHex({ x: (data[i].x0 + 164.6719013516826) * 4, y: (328 + data[i].y0) * -4 }, layout)\n// merge hex and data[i] into hexas[i]\nhexas[i]=Object.assign(hex,data[i]);hexas[i].modified=false;if(hexas[i].player!=null){lstTile[i]={player:hexas[i].player,id:hexas[i].Id,cellPlayer:hexas[i].cellPlayer};}//renameProperty(hexas[i], \"mainCLC1\", \"activity\")\n}return[hexas,lstTile];}/* this function doesn't work */ /* export function generateMap(data) {\n    let hexas = {};\n    let hex;\n    let hex2;\n    let rivers = [];\n    let path;\n    for (let i = 0; i < data.length; i++) {\n\n        hex = HexUtils.pixelToHex({ x: (data[i].xOutlet), y: (data[i].yOutlet) }, layout)\n        //map ardiere\n        //hex = HexUtils.pixelToHex({ x: (data[i].x0 + 164.6719013516826) * 4, y: (328 + data[i].y0) * -4 }, layout)\n        // merge hex and data[i] into hexas[i]\n        if (!hexas[i]) {\n            hexas[i] = Object.assign(hex, data[i])\n            hexas[i].modified = false\n        }\n        let j = hexas[hexas[i].downTile + 2]\n        if (!hexas[j]) {\n            hexas[j] = Object.assign(hex, data[j])\n            hexas[j].modified = false\n\n        }\n        path = {\n            start: hexas[i],\n            end: hexas[j],\n            outletFlowAcc: hexas[i].outletFlowAcc\n        }\n        rivers.push(path);\n        //renameProperty(hexas[i], \"mainCLC1\", \"activity\")\n    }\n    return [hexas, rivers]\n} */ /* \n    Function : generateRivers \n\n    Syntax  : rivers=generateRivers()\n\n    Outputs : array of object containing the start and end of each rivers\n\n    Description : cycle through the hexagones to create and array of object path\n                    containing the hexagon where the river starts and and where it ends\n                    by reading the downStreamCell property\n    \n    Author : Hugo KELHETTER\n*/export function generateRivers(moreHexas){var rivers=[];var path;for(var i=0;i<Object.keys(moreHexas).length;i++){path={start:moreHexas[i],end:moreHexas[moreHexas[i].downTile-1],outletFlowAcc:moreHexas[i].outletFlowAcc};rivers.push(path);}return rivers;}/* \n    Function : setPlayerClass\n\n    Syntax\n        playerClass=setPlayerClass(PlayerId)\n    \n    Input\n        PlayerId    :player's id\n\n    Outputs\n        playerClass :player's id on subBasin\n\n    Description\n        Compute player's id on their subBasin based on their global id\n\n    Author : Hugo KELHETTER\n*/export function setPlayerClass(player){if(player===0||player>9)return\"\";//attributé à aucun joueur\nswitch(player%3){case 0:return\"troisieme\";//attribué aux joueurs 3, 6 ou 9\ncase 1:return\"premier\";//attribué aux joueurs 1, 4 ou en 7\ncase 2:return\"deuxieme\";//attribué aux joueurs 2, 5 ou 8\ndefault:return\"\";}}/* \n    Function : activityToString\n\n    Syntax\n        tileActivity=activityToString(activity)\n    \n    Input\n        activity    :tile's activity\n\n    Outputs\n        tileactivity:string corresponding to the activity\n\n    Description\n        returns a string based on the input\n        this is meant to set className to components and apply css style\n    \n    Author : Hugo KELHETTER\n*/export function activityToString(activity){switch(activity){case 1:return\"ville\";case 2:return\"agriculture\";case 3:return\"foret\";case 5:return\"water\";default:return\"notInBassin\";}}/* \n    Function : getSubBassin\n\n    Syntax\n        subBassin=getSubBassin(id)\n    \n    Input\n        id    :player's id\n\n    Outputs\n        playerClass :player's subBasin\n\n    Description\n        Calculate player's subBassin based on their id\n\n    Author : Hugo KELHETTER\n*/export function getSubBassin(id){if(id<4)return 1;if(id<7)return 2;return 3;}/* \n    Function : setMapSize\n\n    Syntax : setMapSize()\n        \n    Description : return a size considering if the scrren if in portrait or landscape \n        \n*/export function setMapSize(){return window.matchMedia('(orientation:landscape)').matches?'50%':'100%';}/* \n    Function : setBaseCLasses \n    \n    Syntax  : classes=setBaseClasses(hex)\n    \n    Input   : hex : object : contains the data of an hexagon\n    \n    Output : classes : string : a set of css classes to add to the hexagon\n\n    Description : return a string of classes to add to the hexagon\n        \n    Author : Hugo KELHETTER\n*/export function setBaseClasses(hex){var classname=activityToString(hex.mainCLC1);if(hex.eco==1)classname+=\" eco\";return classname;}","map":{"version":3,"sources":["/home/elouati/Bureau/client/src/Game/map/MapUtil.js"],"names":["HexUtils","layout","spacing","orientation","f0","Math","sqrt","f1","f2","f3","b0","b1","b2","b3","startAngle","size","y","x","origin","generateHexes","data","hexas","lstTile","hex","i","length","pixelToHex","xOutlet","yOutlet","Object","assign","modified","player","id","Id","cellPlayer","generateRivers","moreHexas","rivers","path","keys","start","end","downTile","outletFlowAcc","push","setPlayerClass","activityToString","activity","getSubBassin","setMapSize","window","matchMedia","matches","setBaseClasses","classname","mainCLC1","eco"],"mappings":"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","sourcesContent":["import { HexUtils } from 'react-hexgrid'\nexport const layout = {\n    spacing: 1,\n    orientation: {\n        f0: Math.sqrt(3.0), f1: Math.sqrt(3.0) / 2.0, f2: 0.0, f3: 3.0 / 2.0, b0: Math.sqrt(3.0) / 3.0, b1: -1.0 / 3.0, b2: 0.0, b3: 2.0 / 3.0, startAngle: 0.5\n    },\n    size: {\n        y: 3,\n        x: 3,\n    },\n    origin: {\n        x: 0,\n        y: 0,\n    },\n}\n/* \n    Function : generateHexes\n\n    Syntax  : hexas=generateHexes()\n    \n    Outputs : hexas : object containing all data to create the hexagones (position)\n                        and the data for the game's interaction ( activity,subBasin...)\n\n    Description : return an object containing all the data needed to generate the map in class Bassin\n        \n    Author : Hugo KELHETTER\n*/\nexport function generateHexes(data) {\n    let hexas = {};\n    let lstTile = {}\n    let hex;\n    for (let i = 0; i < data.length; i++) {\n\n        hex = HexUtils.pixelToHex({ x: (data[i].xOutlet), y: (data[i].yOutlet) }, layout)\n        //map ardiere\n        //hex = HexUtils.pixelToHex({ x: (data[i].x0 + 164.6719013516826) * 4, y: (328 + data[i].y0) * -4 }, layout)\n        // merge hex and data[i] into hexas[i]\n        hexas[i] = Object.assign(hex, data[i])\n        hexas[i].modified = false\n        if (hexas[i].player != null) {\n            lstTile[i] = { player: hexas[i].player, id: hexas[i].Id, cellPlayer: hexas[i].cellPlayer }\n        }\n        //renameProperty(hexas[i], \"mainCLC1\", \"activity\")\n    }\n    return [hexas, lstTile];\n}\n/* this function doesn't work */\n/* export function generateMap(data) {\n    let hexas = {};\n    let hex;\n    let hex2;\n    let rivers = [];\n    let path;\n    for (let i = 0; i < data.length; i++) {\n\n        hex = HexUtils.pixelToHex({ x: (data[i].xOutlet), y: (data[i].yOutlet) }, layout)\n        //map ardiere\n        //hex = HexUtils.pixelToHex({ x: (data[i].x0 + 164.6719013516826) * 4, y: (328 + data[i].y0) * -4 }, layout)\n        // merge hex and data[i] into hexas[i]\n        if (!hexas[i]) {\n            hexas[i] = Object.assign(hex, data[i])\n            hexas[i].modified = false\n        }\n        let j = hexas[hexas[i].downTile + 2]\n        if (!hexas[j]) {\n            hexas[j] = Object.assign(hex, data[j])\n            hexas[j].modified = false\n\n        }\n        path = {\n            start: hexas[i],\n            end: hexas[j],\n            outletFlowAcc: hexas[i].outletFlowAcc\n        }\n        rivers.push(path);\n        //renameProperty(hexas[i], \"mainCLC1\", \"activity\")\n    }\n    return [hexas, rivers]\n} */\n/* \n    Function : generateRivers \n\n    Syntax  : rivers=generateRivers()\n\n    Outputs : array of object containing the start and end of each rivers\n\n    Description : cycle through the hexagones to create and array of object path\n                    containing the hexagon where the river starts and and where it ends\n                    by reading the downStreamCell property\n    \n    Author : Hugo KELHETTER\n*/\nexport function generateRivers(moreHexas) {\n    let rivers = [];\n    let path;\n    for (let i = 0; i < Object.keys(moreHexas).length; i++) {\n        path = {\n            start: moreHexas[i],\n            end: moreHexas[moreHexas[i].downTile - 1],\n            outletFlowAcc: moreHexas[i].outletFlowAcc\n        }\n        rivers.push(path);\n    }\n    return rivers;\n\n}\n/* \n    Function : setPlayerClass\n\n    Syntax\n        playerClass=setPlayerClass(PlayerId)\n    \n    Input\n        PlayerId    :player's id\n\n    Outputs\n        playerClass :player's id on subBasin\n\n    Description\n        Compute player's id on their subBasin based on their global id\n\n    Author : Hugo KELHETTER\n*/\nexport function setPlayerClass(player) {\n    if (player === 0 || player > 9) return \"\" //attributé à aucun joueur\n    switch (player % 3) {\n        case 0: return \"troisieme\" //attribué aux joueurs 3, 6 ou 9\n        case 1: return \"premier\" //attribué aux joueurs 1, 4 ou en 7\n        case 2: return \"deuxieme\" //attribué aux joueurs 2, 5 ou 8\n        default: return \"\"\n    }\n}\n/* \n    Function : activityToString\n\n    Syntax\n        tileActivity=activityToString(activity)\n    \n    Input\n        activity    :tile's activity\n\n    Outputs\n        tileactivity:string corresponding to the activity\n\n    Description\n        returns a string based on the input\n        this is meant to set className to components and apply css style\n    \n    Author : Hugo KELHETTER\n*/\nexport function activityToString(activity) {\n    switch (activity) {\n        case 1: return \"ville\";\n        case 2: return \"agriculture\";\n        case 3: return \"foret\";\n        case 5: return \"water\"\n        default: return \"notInBassin\";\n    }\n}\n/* \n    Function : getSubBassin\n\n    Syntax\n        subBassin=getSubBassin(id)\n    \n    Input\n        id    :player's id\n\n    Outputs\n        playerClass :player's subBasin\n\n    Description\n        Calculate player's subBassin based on their id\n\n    Author : Hugo KELHETTER\n*/\nexport function getSubBassin(id) {\n    if (id < 4) return 1\n    if (id < 7) return 2\n    return 3\n}\n/* \n    Function : setMapSize\n\n    Syntax : setMapSize()\n        \n    Description : return a size considering if the scrren if in portrait or landscape \n        \n*/\n\nexport function setMapSize() {\n    return window.matchMedia('(orientation:landscape)').matches ? '50%' : '100%'\n}\n/* \n    Function : setBaseCLasses \n    \n    Syntax  : classes=setBaseClasses(hex)\n    \n    Input   : hex : object : contains the data of an hexagon\n    \n    Output : classes : string : a set of css classes to add to the hexagon\n\n    Description : return a string of classes to add to the hexagon\n        \n    Author : Hugo KELHETTER\n*/\nexport function setBaseClasses(hex) {\n    let classname = activityToString(hex.mainCLC1)\n    if (hex.eco == 1) classname += \" eco\"\n    return classname\n}"]},"metadata":{},"sourceType":"module"}