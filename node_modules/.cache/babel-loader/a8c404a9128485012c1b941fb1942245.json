{"ast":null,"code":"var _jsxFileName = \"/home/elouati/Bureau/projet_working/client/src/Game/map/Bassin.js\";\nimport React, { Component } from 'react';\nimport { HexGrid, Layout, Path, Hexagon, Text } from 'react-hexgrid';\nimport layoutProps from './layoutProps.js';\nimport { setPlayerClass, getSubBassin, setMapSize, setBaseClasses } from './MapUtil.js';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class Bassin extends Component {\n  constructor(props) {\n    super(props);\n\n    this.update = () => {\n      this.forceUpdate();\n    };\n\n    this.update = this.update.bind(this);\n  }\n  /* \n      Input : props={map:{moreHexas,moreRivers,player},handleClick,role,selectedId}\n              map.moreHexas : object : contains all data to create the map\n              map.Rivers : array : contains object to create river\n                      They look like that {start,end,outletFlowAcc}\n                      start : hexagon where the river stats\n                      end : hexagon where the river ends\n                      outletFlowAcc : how much water there is\n              handleClick : func : set the selected tile in parent component\n              selectedId : number : id of the selected tile\n       Syntax : <Bassin map={moreHewas,moreRivers,player} handleClick={this.handleClick} \n          role={role} selectedId={selectedId} />\n  */\n\n\n  componentDidMount() {\n    /* \n        re-render when window is resized\n        allows to update dimensions of Hexgrid\n    */\n    window.addEventListener('resize', this.update);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.update);\n  }\n  /* \n      Function : createHexeFarmer\n  \n      Syntax\n          <Hexagon/>=createHexeFarmer(hex,i)        \n      \n      Input\n          hex :object containing the data to create the hexagon\n          i   :hex's id\n  \n      Outputs\n          polygon :polygon of type svg with hexagon shape\n          text    :text inside the polygon countaining hex's id + 1\n  \n      Description\n          returns the following architecture:\n              <g class='hexagon-group' plus some others such as the output of activityToString>\n                  <g>\n                      <polygon/>\n                      <text/>\n                  </g>\n              </g>\n      \n      see /src/map/MapUtil.js for more information about hex'properties\n  \n      Author : Hugo KELHETTER\n  */\n\n\n  createHexeFarmer(hex, i, player) {\n    if (hex.basin === getSubBassin(player)) {\n      const bassin = getSubBassin(player);\n      let classname = \"\";\n      const mainCLC1 = hex.mainCLC1.toString();\n      classname += hex.basin === bassin ? `${hex.modified} ${setBaseClasses(hex)} \n        ${setPlayerClass(hex.player)} ${hex.player % 3} ${hex.Id}` : \"notInBassin\";\n      console.log(this.props.selectedId);\n      console.log(\"HEX \" + hex.Id + \" is \" + this.props.selectedId.includes(hex.Id));\n\n      if (this.props.selectedId.includes(hex.Id)) {\n        classname += \" selected\";\n      } //console.log(\"HEX.PLAYER = \" + hex.player + \" PLAYER = \" + player);\n      //console.log(\"HEX.ID : \", hex.player === player);\n\n\n      return /*#__PURE__*/_jsxDEV(Hexagon, {\n        bassin: bassin,\n        onClick: (e, h) => hex.player == player && this.props.handleClick(h),\n        mainCLC1: mainCLC1,\n        irrig: hex.irrig,\n        eco: hex.eco,\n        market: hex.market,\n        className: classname\n        /* data can be found in h.props in handleClick */\n        ,\n        subId: hex.cellPlayer,\n        id: hex.Id,\n        q: hex.q,\n        r: hex.r,\n        s: hex.s,\n        practice: hex.practice,\n        children: [hex.basin === bassin && hex.cellPlayer != null && hex.cellPlayer > 0 && this.displayTextTop(hex.cellPlayer), hex.basin === bassin && mainCLC1 === 1 && hex.market === 1 && this.displayTextBottom(\"M\"), hex.basin === bassin && hex.irrig === 1 && this.displayTextBottom(\"ðŸ’§\")]\n      }, hex.Id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 20\n      }, this);\n    }\n  }\n  /* same thing as createHexeFarm but for elected players */\n\n\n  createHexeElected(hex, i) {\n    let classname = setBaseClasses(hex);\n    if (this.props.selectedId.includes(hex.Id)) classname += \" selected\";\n    const mainCLC1 = hex.mainCLC1.toString();\n    return /*#__PURE__*/_jsxDEV(Hexagon, {\n      onClick: (e, h) => this.props.handleClick(h),\n      className: classname,\n      id: i,\n      q: hex.q,\n      r: hex.r,\n      s: hex.s,\n      mainCLC1: mainCLC1,\n      irrig: hex.irrig,\n      eco: hex.eco,\n      market: hex.market,\n      children: [hex.cellPlayer != null && this.displayTileId(hex.cellPlayer), mainCLC1 === 1 && this.displayMarket(hex.market)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 16\n    }, this);\n  }\n  /* same thing as createHexeFarmer but for animator */\n\n\n  createHexeAnimator(hex, i) {\n    let classname = setBaseClasses(hex);\n    if (this.props.selectedId === hex.Id) classname += \" selected\"; //console.log(\"BASSIN CLASSNAME = \", classname);\n\n    const mainCLC1 = hex.mainCLC1.toString(); //console.log(\"HEX.ID = \" + hex.Id + \" SELECTED_ID = \" + this.props.selectedId);\n\n    return /*#__PURE__*/_jsxDEV(Hexagon, {\n      className: classname,\n      bassin: hex.basin,\n      player: hex.player,\n      onClick: (e, h) => this.props.handleClick(h),\n      id: hex.Id,\n      q: hex.q,\n      r: hex.r,\n      s: hex.s,\n      mainCLC1: mainCLC1,\n      irrig: hex.irrig,\n      eco: hex.eco,\n      market: hex.market,\n      practice: hex.practice,\n      children: [hex.cellPlayer != null && this.displayTileId(hex.cellPlayer), mainCLC1 === 1 && this.displayMarket(hex.market), hex.irrig === 1 && this.displayTextBottom(\"ðŸ’§\")]\n    }, hex.Id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 16\n    }, this);\n  }\n  /* \n      Function : displayTileId \n      \n      Syntax  :  displayTileId(text)\n      \n      Input   : text : text to display\n          \n      Description : return an object <Text> containing the input text\n          \n      Author : Hugo KELHETTER\n  */\n\n\n  displayTileId(id) {\n    return id > 0 && /*#__PURE__*/_jsxDEV(Text, {\n      y: -2,\n      children: id.toString()\n    }, \"tileId\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 26\n    }, this);\n  }\n\n  displayMarket(market) {\n    return market === 1 && /*#__PURE__*/_jsxDEV(Text, {\n      y: 2,\n      children: \"M\"\n    }, \"market\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 32\n    }, this);\n  }\n  /* \n      Function : displayTextBottom \n      \n      Syntax  :  displayTextBottom(text)\n      \n      Input   : text : text to display\n          \n      Description : return an object <Text> containing the input text at the bottom of the parent\n          \n      Author : Hugo KELHETTER\n  */\n\n\n  displayTextBottom(text) {\n    return /*#__PURE__*/_jsxDEV(Text, {\n      y: 2,\n      children: text\n    }, text, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 16\n    }, this);\n  }\n  /* \n      Function : displayTextTop \n      \n      Syntax  :  displayTextTop(text)\n      \n      Input   : text : text to display\n          \n      Description : return an object <Text> containing the input text at the top of the parent\n          \n      Author : Hugo KELHETTER\n  */\n\n\n  displayTextTop(text) {\n    return /*#__PURE__*/_jsxDEV(Text, {\n      y: -2,\n      children: text\n    }, text, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 16\n    }, this);\n  }\n  /* \n      Function : render \n      \n      Description : display an hexagonal grid and rivers\n      \n      Author : Hugo KELHETTER\n  */\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(HexGrid, {\n        width: setMapSize(),\n        height: setMapSize(),\n        viewBox: \"-50 -50 100 100\",\n        children: /*#__PURE__*/_jsxDEV(Layout, {\n          size: layoutProps.size,\n          flat: layoutProps.flat,\n          spacing: layoutProps.spacing,\n          origin: {\n            x: layoutProps.x,\n            y: layoutProps.y\n          },\n          children: [Object.values(this.props.map.moreHexas).map((hex, i) => this.props.role === 1 ? this.createHexeFarmer(hex, i, this.props.id) : this.props.role === 2 ? this.createHexeElected(hex, i) : this.createHexeAnimator(hex, i)), this.props.map.moreRivers.map((river, i) => /*#__PURE__*/_jsxDEV(\"g\", {\n            className: river.start.outletFlowAcc === 1 ? \"small\" : \"\",\n            children: this.props.role === 1 && river.end !== undefined && river.start.basin !== getSubBassin(this.props.id) ? \"\" : /*#__PURE__*/_jsxDEV(Path, {\n              start: river.start,\n              end: river.end\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 33\n            }, this)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 25\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  }\n\n}\nBassin.propTypes = {\n  map: PropTypes.object.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  role: PropTypes.number.isRequired //selectedId: PropTypes.number\n\n};","map":{"version":3,"sources":["/home/elouati/Bureau/projet_working/client/src/Game/map/Bassin.js"],"names":["React","Component","HexGrid","Layout","Path","Hexagon","Text","layoutProps","setPlayerClass","getSubBassin","setMapSize","setBaseClasses","PropTypes","Bassin","constructor","props","update","forceUpdate","bind","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","createHexeFarmer","hex","i","player","basin","bassin","classname","mainCLC1","toString","modified","Id","console","log","selectedId","includes","e","h","handleClick","irrig","eco","market","cellPlayer","q","r","s","practice","displayTextTop","displayTextBottom","createHexeElected","displayTileId","displayMarket","createHexeAnimator","id","text","render","size","flat","spacing","x","y","Object","values","map","moreHexas","role","moreRivers","river","start","outletFlowAcc","end","undefined","propTypes","object","isRequired","func","number"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { HexGrid, Layout, Path, Hexagon, Text } from 'react-hexgrid'\nimport layoutProps from './layoutProps.js'\nimport { setPlayerClass, getSubBassin, setMapSize, setBaseClasses } from './MapUtil.js'\nimport PropTypes from 'prop-types';\nexport default class Bassin extends Component {\n    constructor(props) {\n        super(props)\n        this.update = this.update.bind(this)\n    }\n\n    /* \n        Input : props={map:{moreHexas,moreRivers,player},handleClick,role,selectedId}\n                map.moreHexas : object : contains all data to create the map\n                map.Rivers : array : contains object to create river\n                        They look like that {start,end,outletFlowAcc}\n                        start : hexagon where the river stats\n                        end : hexagon where the river ends\n                        outletFlowAcc : how much water there is\n                handleClick : func : set the selected tile in parent component\n                selectedId : number : id of the selected tile\n\n        Syntax : <Bassin map={moreHewas,moreRivers,player} handleClick={this.handleClick} \n            role={role} selectedId={selectedId} />\n    */\n    static propTypes = {\n        map: PropTypes.object.isRequired,\n        handleClick: PropTypes.func.isRequired,\n        role: PropTypes.number.isRequired,\n        //selectedId: PropTypes.number\n    }\n    update = () => {\n        this.forceUpdate()\n    }\n    componentDidMount() {\n        /* \n            re-render when window is resized\n            allows to update dimensions of Hexgrid\n        */\n        window.addEventListener('resize', this.update)\n\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.update)\n    }\n\n    /* \n        Function : createHexeFarmer\n    \n        Syntax\n            <Hexagon/>=createHexeFarmer(hex,i)        \n        \n        Input\n            hex :object containing the data to create the hexagon\n            i   :hex's id\n    \n        Outputs\n            polygon :polygon of type svg with hexagon shape\n            text    :text inside the polygon countaining hex's id + 1\n    \n        Description\n            returns the following architecture:\n                <g class='hexagon-group' plus some others such as the output of activityToString>\n                    <g>\n                        <polygon/>\n                        <text/>\n                    </g>\n                </g>\n        \n        see /src/map/MapUtil.js for more information about hex'properties\n    \n        Author : Hugo KELHETTER\n    */\n    createHexeFarmer(hex, i, player) {\n        if (hex.basin === getSubBassin(player)) {\n            const bassin = getSubBassin(player)\n            let classname = \"\";\n            const mainCLC1 = hex.mainCLC1.toString()\n            classname += hex.basin === bassin ? `${hex.modified} ${setBaseClasses(hex)} \n        ${setPlayerClass(hex.player)} ${hex.player % 3} ${hex.Id}` : \"notInBassin\"\n            console.log(this.props.selectedId);\n            console.log(\"HEX \" + hex.Id + \" is \" + this.props.selectedId.includes(hex.Id))\n            if (this.props.selectedId.includes(hex.Id)) {\n                classname += \" selected\";\n            }\n            //console.log(\"HEX.PLAYER = \" + hex.player + \" PLAYER = \" + player);\n            //console.log(\"HEX.ID : \", hex.player === player);\n            return <Hexagon\n                bassin={bassin}\n                onClick={(e, h) => hex.player ==  player && this.props.handleClick(h)}\n                mainCLC1={mainCLC1} irrig={hex.irrig} eco={hex.eco} market={hex.market}\n                className={classname}\n                /* data can be found in h.props in handleClick */\n                subId={hex.cellPlayer}\n                key={hex.Id} id={hex.Id} q={hex.q} r={hex.r} s={hex.s}\n                practice={hex.practice}>\n                {(hex.basin === bassin && hex.cellPlayer != null && hex.cellPlayer > 0) && this.displayTextTop(hex.cellPlayer)}\n                {(hex.basin === bassin && mainCLC1 === 1 && hex.market === 1) && this.displayTextBottom(\"M\")}\n                {(hex.basin === bassin && hex.irrig === 1) && this.displayTextBottom(\"ðŸ’§\")}\n            </Hexagon>\n        }\n    }\n    /* same thing as createHexeFarm but for elected players */\n    createHexeElected(hex, i) {\n        let classname = setBaseClasses(hex)\n        if (this.props.selectedId.includes(hex.Id)) classname += \" selected\"\n        const mainCLC1 = hex.mainCLC1.toString()\n        return <Hexagon\n            onClick={(e, h) => this.props.handleClick(h)}\n\n            className={classname}\n            key={i} id={i} q={hex.q} r={hex.r} s={hex.s}\n            mainCLC1={mainCLC1} irrig={hex.irrig} eco={hex.eco} market={hex.market}\n        >\n            {hex.cellPlayer != null && this.displayTileId(hex.cellPlayer)}\n            {mainCLC1 === 1 && this.displayMarket(hex.market)}\n\n        </Hexagon >\n    }\n    /* same thing as createHexeFarmer but for animator */\n    createHexeAnimator(hex, i) {\n        let classname = setBaseClasses(hex)\n        if (this.props.selectedId === hex.Id) classname += \" selected\"\n        //console.log(\"BASSIN CLASSNAME = \", classname);\n        const mainCLC1 = hex.mainCLC1.toString();\n        //console.log(\"HEX.ID = \" + hex.Id + \" SELECTED_ID = \" + this.props.selectedId);\n        return <Hexagon\n            className={classname}\n            bassin={hex.basin}\n            player={hex.player}\n            onClick={(e, h) => this.props.handleClick(h)}\n            key={hex.Id} id={hex.Id} q={hex.q} r={hex.r} s={hex.s}\n            mainCLC1={mainCLC1} irrig={hex.irrig} eco={hex.eco} market={hex.market}\n            practice={hex.practice}\n        >\n            {hex.cellPlayer != null && this.displayTileId(hex.cellPlayer)}\n            {mainCLC1 === 1 && this.displayMarket(hex.market)}\n            {(hex.irrig === 1) && this.displayTextBottom(\"ðŸ’§\")}\n        </Hexagon>\n    }\n    /* \n        Function : displayTileId \n        \n        Syntax  :  displayTileId(text)\n        \n        Input   : text : text to display\n            \n        Description : return an object <Text> containing the input text\n            \n        Author : Hugo KELHETTER\n    */\n    displayTileId(id) {\n        return id > 0 && <Text key=\"tileId\" y={-2}>{id.toString()}</Text>\n    }\n    displayMarket(market) {\n        return market === 1 && <Text key=\"market\" y={2}>M</Text>\n    }\n    /* \n        Function : displayTextBottom \n        \n        Syntax  :  displayTextBottom(text)\n        \n        Input   : text : text to display\n            \n        Description : return an object <Text> containing the input text at the bottom of the parent\n            \n        Author : Hugo KELHETTER\n    */\n    displayTextBottom(text) {\n        return <Text key={text} y={2}>{text}</Text>\n    }\n    /* \n        Function : displayTextTop \n        \n        Syntax  :  displayTextTop(text)\n        \n        Input   : text : text to display\n            \n        Description : return an object <Text> containing the input text at the top of the parent\n            \n        Author : Hugo KELHETTER\n    */\n    displayTextTop(text) {\n        return <Text key={text} y={-2}>{text}</Text>\n    }\n\n    /* \n        Function : render \n        \n        Description : display an hexagonal grid and rivers\n        \n        Author : Hugo KELHETTER\n    */\n    render() {\n        return (<>\n            <HexGrid width={setMapSize()} height={setMapSize()} viewBox=\"-50 -50 100 100\" >\n                <Layout size={layoutProps.size} flat={layoutProps.flat}\n                    spacing={layoutProps.spacing} origin={{ x: layoutProps.x, y: layoutProps.y }} >\n                    {/* loops are done separetly because else the rivers may not always be visible */}\n                    {Object.values(this.props.map.moreHexas).map((hex, i) =>\n                        this.props.role === 1 ? this.createHexeFarmer(hex, i, this.props.id) :\n                            this.props.role === 2 ? this.createHexeElected(hex, i) :\n                                this.createHexeAnimator(hex, i)\n                    )}\n                    {this.props.map.moreRivers.map((river, i) =>\n                        <g key={i} className={river.start.outletFlowAcc === 1 ? \"small\" : \"\"} >\n                            {(this.props.role === 1 && river.end !== undefined) && river.start.basin !== getSubBassin(this.props.id) ? \"\" :\n                                <Path\n                                    key={i} start={river.start} end={river.end}\n                                />}\n\n                        </g>)}\n                </Layout>\n            </HexGrid >\n        </>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}