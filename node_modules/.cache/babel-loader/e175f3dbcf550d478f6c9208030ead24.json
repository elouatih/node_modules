{"ast":null,"code":"var _jsxFileName = \"/home/elouati/Bureau/projet_working/client/src/Game/controls/ActivitySwapper.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Select from '@material-ui/core/Select';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport createCheckbox from \"./createCheckbox.js\";\nimport { Button } from '@material-ui/core';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Typography } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ActivitySwapper extends React.Component {\n  /*    \n      Input : props={changeTileActivity,selectedTile,actions}\n              changeTileActivity : func : function declared in parent to change tile(s)'s activity\n              selectedTile : object : tile selected by the player\n              actions : object : list of all the available actions\n       Syntax : <ActivitySwapper changeTileActivity={this.changeTileActivity} \n          selectedTile={the selected tile} actions={the list of actions} />\n       Author : Hugo KELHETTER            \n  */\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      this.setState({\n        [target.name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n\n      if (this.state.selectActivity != null) {\n        this.props.changeTileActivity(this.props.actions[this.state.selectActivity], this.state.checkbox);\n      }\n    };\n\n    this.state = {\n      selectActivity: 0,\n      checkbox: false\n    };\n    this.createCheckbox = createCheckbox.bind(this); //this.handleChange = this.handleChange.bind(this);\n    //this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  actionToString(action, id) {\n    let i = 0;\n\n    while (action[i].Id !== id) {\n      console.log(action[i], id);\n      i++;\n    }\n\n    return action[i].Pratique;\n  }\n  /* \n      Function : render\n  \n      Syntax  : render()\n          \n      Description : display the form to change tile/subBasin's activityy\n         \n      Author : Hugo KELHETTER\n  */\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n        children: [\"Choisissez votre nouvelle activit\\xE9 pour\", this.state.checkbox ? ' le sous bassin' : 'la case ${this.props.selectedTile.subId}']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [\"Activit\\xE9 en cours : \", this.actionToString(this.props.actions, this.props.selectedTile.practice)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        name: \"selectActivity\",\n        onChange: this.handleChange,\n        value: this.state.selectActivity,\n        children: this.props.actions.map((action, i) => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: i,\n          children: action.Pratique\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormLabel, {\n        children: [\"modifier toutes les cases\", this.createCheckbox(\"checkbox\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: this.handleSubmit,\n        children: \"Envoyer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nActivitySwapper.propTypes = {\n  changeTileActivity: PropTypes.func.isRequired,\n  selectedTile: PropTypes.object.isRequired,\n  actions: PropTypes.array.isRequired\n};\nexport default ActivitySwapper;\n/*\necran de fin de partie\nselection activit√© de derniere partie\nvalidation prochain tour\nrecuperation du tour depuis le serveur\nchanger style des boutons radios\n\n*/","map":{"version":3,"sources":["/home/elouati/Bureau/projet_working/client/src/Game/controls/ActivitySwapper.js"],"names":["React","PropTypes","Select","FormLabel","createCheckbox","Button","MenuItem","Typography","ActivitySwapper","Component","constructor","props","handleChange","event","target","value","type","checked","setState","name","handleSubmit","preventDefault","state","selectActivity","changeTileActivity","actions","checkbox","bind","actionToString","action","id","i","Id","console","log","Pratique","render","selectedTile","practice","map","propTypes","func","isRequired","object","array"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types';\nimport Select from '@material-ui/core/Select';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport createCheckbox from \"./createCheckbox.js\"\nimport { Button } from '@material-ui/core'\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Typography } from '@material-ui/core';\nclass ActivitySwapper extends React.Component {\n    /*    \n        Input : props={changeTileActivity,selectedTile,actions}\n                changeTileActivity : func : function declared in parent to change tile(s)'s activity\n                selectedTile : object : tile selected by the player\n                actions : object : list of all the available actions\n\n        Syntax : <ActivitySwapper changeTileActivity={this.changeTileActivity} \n            selectedTile={the selected tile} actions={the list of actions} />\n\n        Author : Hugo KELHETTER            \n    */\n    constructor(props) {\n        super(props);\n        this.state = { selectActivity: 0, checkbox: false };\n        this.createCheckbox = createCheckbox.bind(this)\n        //this.handleChange = this.handleChange.bind(this);\n        //this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    static propTypes = {\n        changeTileActivity: PropTypes.func.isRequired,\n        selectedTile: PropTypes.object.isRequired,\n        actions: PropTypes.array.isRequired\n    }\n    /* \n        Function : handleChange\n    \n        Syntax  : handleChange(event)\n            \n        Input   : event : the event calling the function\n            \n        Description : \n            function called when interacting with the form's components\n            if the target is a checkBox, change its validation\n            update the state value for the corresponding event target\n    \n        Author : Hugo KELHETTER\n    */\n    handleChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        this.setState({ [target.name]: value });\n    }\n    /* \n        Function : handleSubmit\n    \n        Syntax  : handleSubmit(event)\n        \n        Input   : event :  the event calling the function\n    \n        Description : \n            call the function changeTileActivity from parent with in parameters the values of the fieldset \n           \n        Author : Hugo KELHETTER\n    */\n    handleSubmit = (event) => {\n        event.preventDefault();\n        if (this.state.selectActivity != null) {\n            this.props.changeTileActivity(this.props.actions[this.state.selectActivity], this.state.checkbox)\n        }\n    }\n    actionToString(action, id) {\n        let i = 0;\n\n        while (action[i].Id !== id) {\n            console.log(action[i], id)\n            i++\n        }\n        return action[i].Pratique\n    }\n    /* \n        Function : render\n    \n        Syntax  : render()\n            \n        Description : display the form to change tile/subBasin's activityy\n           \n        Author : Hugo KELHETTER\n    */\n    render() {\n        return (\n            < form onSubmit={this.handleSubmit} >\n                <FormLabel>\n                    Choisissez votre nouvelle activit√© pour\n                    {this.state.checkbox ? ' le sous bassin'\n                        : 'la case ${this.props.selectedTile.subId}'}\n                </FormLabel >\n                <Typography>Activit√© en cours : {this.actionToString(this.props.actions, this.props.selectedTile.practice)}</Typography>\n                <Select name=\"selectActivity\" onChange={this.handleChange} value={this.state.selectActivity}>\n                    {/* display all possible action for selected tile */}\n                    {this.props.actions.map((action, i) =>\n                        <MenuItem key={i} value={i}>{action.Pratique}</MenuItem>,\n                    )}\n                    {/*  {this.props.selectedTile.activity === \"1\" ? \"\" : <option value=\"1\">vigne</option>}\n                        {this.props.selectedTile.activity === \"2\" ? \"\" : <option value=\"2\">bl√©</option>}\n                        {this.props.selectedTile.activity === \"3\" ? \"\" : <option value=\"3\">bovins</option>} */}\n                </Select>\n\n\n                <br />\n\n                <FormLabel>modifier toutes les cases\n                    {this.createCheckbox(\"checkbox\")}\n                </FormLabel>\n\n\n                <Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit}>Envoyer</Button>\n            </form >\n        );\n    }\n}\n\nexport default ActivitySwapper\n/*\necran de fin de partie\nselection activit√© de derniere partie\nvalidation prochain tour\nrecuperation du tour depuis le serveur\nchanger style des boutons radios\n\n*/"]},"metadata":{},"sourceType":"module"}