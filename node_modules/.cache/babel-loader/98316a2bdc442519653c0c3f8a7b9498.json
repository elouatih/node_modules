{"ast":null,"code":"var _jsxFileName = \"/home/elouati/Bureau/projet_working/client/src/Game/Game.js\";\nimport React from 'react';\nimport { generateHexes, generateRivers } from \"./map/MapUtil.js\";\nimport Bassin from \"./map/Bassin.js\";\nimport ActivitySwapper from \"./controls/ActivitySwapper.js\";\nimport ValidationTour from \"./controls/ValidationTour.js\";\nimport handleClickTile from './controls/handleClickTileFarmer.js';\nimport Chat from \"./Chat.js\";\nimport { socket } from \"../socket.js\";\nimport Ressources from \"./controls/Ressources.js\";\nimport '../index.css';\nimport PropTypes from 'prop-types';\nimport SlideField from \"./controls/SlideField.js\";\nimport Menu from \"./controls/Menu.js\";\nimport Diary from \"./Diary.js\";\nimport roleToString from './controls/roleToString.js';\nimport { Button } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Conteneur extends React.Component {\n  /* \n      Input : props={name,role}\n              name : string : player's name\n              role : number : player's name\n       Syntax : <Game name={name} role={role} />\n  */\n  constructor(props) {\n    super(props); //this.changeTileActivity = this.changeTileActivity.bind(this)\n\n    this.changeTileActivity = (value, changeAll) => {\n      const hexagons = this.state.map.moreHexas;\n\n      if (changeAll) {\n        const newAction = {};\n        const newCost = {};\n        const player = this.state.id; //const player = hexagons[this.state.selectedTile.id].player\n\n        Object.values(hexagons).forEach(hex => {\n          if (hex.player === player) {\n            hex.modified = true;\n            newAction[hex.Id] = value.Id;\n            newCost[hex.Id] = {\n              ub: value.Intrants,\n              ut: value.Travail\n            };\n          }\n        });\n        this.setState({\n          actions: newAction,\n          cost: newCost\n        });\n      } else {\n        let cost = this.state.cost;\n        cost[this.state.selectedTile.id] = {\n          ub: value.Intrants,\n          ut: value.Travail\n        };\n        this.setState({\n          actions: { ...this.state.actions,\n            [this.state.selectedTile.id]: value.Id,\n            cost\n          }\n        });\n        hexagons[this.state.selectedTile.id - 1].modified = true;\n      }\n\n      this.setState({\n        map: { ...this.state.map,\n          moreHexas: hexagons\n        },\n        selectedTile: null\n      });\n      /*\n               fetch(\"https://formsubmit.co/ajax/b6d145cfd9512d53d10dd9f9a938ae75\", {\n              method: \"POST\",\n              headers: {\n                  'Content-Type': 'application/json',\n                  'Accept': 'application/json'\n              },\n              body: JSON.stringify({\n                  name: \"FormSubmit\",\n                  message: JSON.stringify(this.state.map.moreHexas[0])\n              })\n          })\n              .then(response => response.json())\n              .then(data => console.log(data))\n              .catch(error => console.log(error));\n      */\n    };\n\n    this.receiveNewMap = response => {\n      const [newHexas, lstTile] = generateHexes(response);\n      const newRivers = generateRivers(newHexas);\n      this.setState({\n        map: { ...this.state.map,\n          moreHexas: newHexas,\n          moreRivers: newRivers\n        },\n        lstTile\n      });\n    };\n\n    this.endRound = () => {\n      this.setState({\n        fini: true,\n        action: {}\n      });\n    };\n\n    this.closeDiary = () => {\n      this.setState({\n        displayDiary: false\n      });\n    };\n\n    this.displayDiary = () => {\n      this.setState({\n        displaySlider: false,\n        displayDiary: true\n      });\n    };\n\n    this.handleClickTile = handleClickTile.bind(this); //this.a = this.a.bind(this)\n\n    this.state = {\n      map: {\n        moreHexas: \"\",\n        moreRivers: null\n      },\n      selectedTile: null,\n      HexasTampon: null,\n      cost: {},\n      tour: 0,\n      fini: false,\n      actions: {},\n      lstConvo: {},\n      displayDiary: false,\n      disconnected: false,\n      displaySlider: false,\n      inputPhase: true\n    };\n  }\n\n  /* \n      Function : createTampon\n  \n      Syntax  : HexasTampon=createTampon(moreHexas)\n      \n      Input   : moreHexas : object containing data to create hexagons\n          \n      Outputs : HexasTampon : a copy of moreHexas containing a subset of entries\n  \n      Description : \n          create a copy of moreHexas containing a subset of entries of moreHexas.\n          the remaining entries are those the players can change directly.\n       Author : Hugo KELHETTER\n  --------------------------------------------------------------------------------------------------------\n  not in current use\n  --------------------------------------------------------------------------------------------------------\n  */\n  createTampon(moreHexas, player) {\n    let HexasTampon = {};\n\n    for (const key in moreHexas) {\n      if (moreHexas[key].player === player) {\n        let hex = {};\n        hex.activity = moreHexas[key].activity;\n        hex.player = moreHexas[key].player;\n        HexasTampon[key] = hex;\n      }\n    }\n\n    return HexasTampon;\n  }\n  /* \n      Function : updateMap\n  \n      Syntax  : updateMap(newData)\n              \n      Input   : object containing the data to update the state\n          \n      Description : update the state of the map with new data received from the server. call createTampon automatically\n      \n      Author : Hugo KELHETTER\n  */\n\n\n  updateMap(newData) {\n    const newHexas = {};\n\n    for (const index in newData) {\n      let newValues = this.state.map.moreHexas;\n\n      for (const key in newData[index]) {\n        newValues[key] = newData[index][key];\n      }\n\n      newHexas[index] = newValues;\n    }\n\n    this.setState({\n      moreHexas: newHexas,\n      cost: {}\n    }); //this.createTampon(this.state.map.moreHexas, this.state.map.player)\n  }\n  /* \n      Function : changeTileActivity\n  \n      Syntax\n          changeTileActivity(value,changeAll)\n              \n      Input\n          value       :new value for the selectedTile's activity\n          changeAll   :false:only change the selectedTile's activity\n                      :true :change all tiles from the player\n  \n      Description\n          updates the state in 2 ways:\n              changes the selectedTile or all tiles depending on the value of changeAll\n              set the state value of selectedTile to null  \n              \n      Author : Hugo KELHETTER\n  */\n\n\n  /* \n      Function : componentDidMount\n  \n      Description : subscribe to the required function from server to keep up to date\n       Author : Hugo KELHETTER\n          \n  */\n  componentDidMount() {\n    socket.emit(\"getTurn\", response => {\n      this.setState({\n        tour: response\n      });\n    });\n    socket.on(\"disconnect\", () => {\n      this.setState({\n        disconnected: true\n      });\n    });\n    socket.on(\"connect\", () => {\n      if (this.state.disconnected) {\n        socket.emit('reconnect', this.props.room, this.props.name, () => {\n          this.setState({\n            disconnected: false\n          });\n        });\n      }\n    });\n\n    if (this.props.role < 10) {\n      socket.emit(\"updateStats\", response => {\n        this.setState({\n          ressources: response[0]\n        });\n      });\n    }\n\n    socket.on(\"results\", response => {\n      this.setState({\n        ressources: response.stats,\n        data: response.graph,\n        fini: false,\n        displaySlider: true,\n        inputPhase: false\n      });\n      socket.emit(\"getTurn\", response => {\n        this.setState({\n          tour: response\n        });\n      });\n      this.setState({\n        actions: {}\n      });\n      socket.emit(\"getCurrentGrid\", response => {\n        this.receiveNewMap(response);\n      }); //    this.setState({ ressources: response[0] })\n    });\n    /*  socket.emit(\"createRoom\", \"player1\", 0, (responseCreateRoom) => {\n         this.setState({ room: responseCreateRoom })\n         socket.emit(\"startGame\")*/\n\n    socket.on(\"inputPhase\", () => {\n      console.log(\"aaaaaaaa\");\n      socket.emit(\"getCurrentGrid\", response => {\n        this.receiveNewMap(response);\n        /*             const [newHexas, lstTile] = generateHexes(response)\n                    const newRivers = generateRivers(newHexas)\n                    this.setState({ map: { ...this.state.map, moreHexas: newHexas, moreRivers: newRivers }, lstTile })\n         */\n      });\n      this.setState({\n        inputPhase: true\n      });\n    });\n    socket.emit(\"getCurrentGrid\", response => {\n      this.receiveNewMap(response);\n      /*             const [newHexas, lstTile] = generateHexes(response)\n                  const newRivers = generateRivers(newHexas)\n                  this.setState({ map: { ...this.state.map, moreHexas: newHexas, moreRivers: newRivers }, lstTile })\n       */\n    });\n    socket.emit(\"getAllActions\", response => {\n      this.setState({\n        lstActions: response\n      });\n    });\n    socket.emit(\"playersInRoom\", response => {\n      const player = response.filter((player, i) => player.Name === this.props.name);\n      this.setState({\n        lstPlayer: response,\n        id: player[0].Id\n      }); //})\n    });\n  }\n\n  componentWillUnmount() {\n    socket.removeAllListeners();\n  }\n\n  openTuto() {\n    window.open(`${window.location.href}tutorial?tuto=3`);\n  }\n\n  render() {\n    var _this$state$selectedT;\n\n    console.log(this.state.inputPhase);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.state.displaySlider && /*#__PURE__*/_jsxDEV(SlideField, {\n        name: this.props.name,\n        displayDiary: this.displayDiary\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [this.state.displayDiary && /*#__PURE__*/_jsxDEV(Diary, {\n          nom: this.props.name,\n          data: this.state.data,\n          closeDiary: this.closeDiary\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Menu, {\n          children: this.state.inputPhase ? /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"menu\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: this.openTuto,\n              children: \"Aide\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 29\n            }, this), \"Nous sommes au tour : \", this.state.tour, /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Bonjour \", this.props.name, \". Vous \\xEAtes \", roleToString(this.props.role), \", votre identifiant est \", this.state.id]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 29\n            }, this), this.state.ressources !== undefined && /*#__PURE__*/_jsxDEV(Ressources, {\n              ressources: this.state.ressources,\n              cost: this.state.cost\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 69\n            }, this), !this.state.fini ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [this.state.selectedTile === null ? \"\" : /*#__PURE__*/_jsxDEV(ActivitySwapper, {\n                changeTileActivity: this.changeTileActivity,\n                selectedTile: this.state.selectedTile,\n                actions: this.state.lstActions\n              }, \"changeActivity\", false, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(ValidationTour, {\n                endRound: this.endRound,\n                tour: this.state.tour,\n                actions: this.state.actions\n              }, \"validation\", false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true) : \" En attente des autres joueurs...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 25\n          }, this) : \"L'animateur est en train de modifier la carte\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 17\n        }, this), Object.keys(this.state.lstConvo).length > 0 ? /*#__PURE__*/_jsxDEV(Chat, {\n          lstConvo: this.state.lstConvo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 64\n        }, this) : \"\", this.state.map.moreHexas !== \"\" && /*#__PURE__*/_jsxDEV(Bassin, {\n          handleClick: this.handleClickTile,\n          map: this.state.map,\n          role: this.props.role,\n          selectedId: (_this$state$selectedT = this.state.selectedTile) === null || _this$state$selectedT === void 0 ? void 0 : _this$state$selectedT.id,\n          id: this.state.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 56\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nConteneur.propTypes = {\n  name: PropTypes.string.isRequired,\n  role: PropTypes.number.isRequired\n};\nexport default Conteneur;\n/*\n\ngarder activités des derniers tours\nconserver les noms durant les formulaires\n\n*/","map":{"version":3,"sources":["/home/elouati/Bureau/projet_working/client/src/Game/Game.js"],"names":["React","generateHexes","generateRivers","Bassin","ActivitySwapper","ValidationTour","handleClickTile","Chat","socket","Ressources","PropTypes","SlideField","Menu","Diary","roleToString","Button","Conteneur","Component","constructor","props","changeTileActivity","value","changeAll","hexagons","state","map","moreHexas","newAction","newCost","player","id","Object","values","forEach","hex","modified","Id","ub","Intrants","ut","Travail","setState","actions","cost","selectedTile","receiveNewMap","response","newHexas","lstTile","newRivers","moreRivers","endRound","fini","action","closeDiary","displayDiary","displaySlider","bind","HexasTampon","tour","lstConvo","disconnected","inputPhase","createTampon","key","activity","updateMap","newData","index","newValues","componentDidMount","emit","on","room","name","role","ressources","stats","data","graph","console","log","lstActions","filter","i","Name","lstPlayer","componentWillUnmount","removeAllListeners","openTuto","window","open","location","href","render","undefined","keys","length","propTypes","string","isRequired","number"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { generateHexes, generateRivers } from \"./map/MapUtil.js\"\nimport Bassin from \"./map/Bassin.js\"\nimport ActivitySwapper from \"./controls/ActivitySwapper.js\"\nimport ValidationTour from \"./controls/ValidationTour.js\"\nimport handleClickTile from './controls/handleClickTileFarmer.js'\nimport Chat from \"./Chat.js\"\nimport { socket } from \"../socket.js\"\nimport Ressources from \"./controls/Ressources.js\"\nimport '../index.css'\nimport PropTypes from 'prop-types';\nimport SlideField from \"./controls/SlideField.js\"\nimport Menu from \"./controls/Menu.js\"\nimport Diary from \"./Diary.js\"\nimport roleToString from './controls/roleToString.js'\nimport { Button } from '@material-ui/core'\nclass Conteneur extends React.Component {\n    /* \n        Input : props={name,role}\n                name : string : player's name\n                role : number : player's name\n\n        Syntax : <Game name={name} role={role} />\n    */\n    constructor(props) {\n        super(props)\n        //this.changeTileActivity = this.changeTileActivity.bind(this)\n        this.handleClickTile = handleClickTile.bind(this)\n        //this.a = this.a.bind(this)\n\n\n        this.state = {\n            map: { moreHexas: \"\", moreRivers: null },\n            selectedTile: null, HexasTampon: null,\n            cost: {},\n            tour: 0,\n            fini: false,\n            actions: {},\n            lstConvo: {},\n            displayDiary: false,\n            disconnected: false,\n            displaySlider: false,\n            inputPhase: true\n        }\n    }\n    static propTypes = {\n        name: PropTypes.string.isRequired,\n        role: PropTypes.number.isRequired\n    }\n    /* \n        Function : createTampon\n    \n        Syntax  : HexasTampon=createTampon(moreHexas)\n        \n        Input   : moreHexas : object containing data to create hexagons\n            \n        Outputs : HexasTampon : a copy of moreHexas containing a subset of entries\n    \n        Description : \n            create a copy of moreHexas containing a subset of entries of moreHexas.\n            the remaining entries are those the players can change directly.\n\n        Author : Hugo KELHETTER\n    --------------------------------------------------------------------------------------------------------\n    not in current use\n    --------------------------------------------------------------------------------------------------------\n    */\n    createTampon(moreHexas, player) {\n\n        let HexasTampon = {}\n        for (const key in moreHexas) {\n            if (moreHexas[key].player === player) {\n                let hex = {};\n                hex.activity = moreHexas[key].activity\n                hex.player = moreHexas[key].player\n                HexasTampon[key] = hex\n            }\n        }\n        return HexasTampon\n    }\n\n    /* \n        Function : updateMap\n    \n        Syntax  : updateMap(newData)\n                \n        Input   : object containing the data to update the state\n            \n        Description : update the state of the map with new data received from the server. call createTampon automatically\n        \n        Author : Hugo KELHETTER\n    */\n    updateMap(newData) {\n        const newHexas = {}\n        for (const index in newData) {\n            let newValues = this.state.map.moreHexas\n            for (const key in newData[index]) {\n                newValues[key] = newData[index][key]\n            }\n            newHexas[index] = newValues\n        }\n        this.setState({ moreHexas: newHexas, cost: {} })\n        //this.createTampon(this.state.map.moreHexas, this.state.map.player)\n    }\n    /* \n        Function : changeTileActivity\n    \n        Syntax\n            changeTileActivity(value,changeAll)\n                \n        Input\n            value       :new value for the selectedTile's activity\n            changeAll   :false:only change the selectedTile's activity\n                        :true :change all tiles from the player\n    \n        Description\n            updates the state in 2 ways:\n                changes the selectedTile or all tiles depending on the value of changeAll\n                set the state value of selectedTile to null  \n                \n        Author : Hugo KELHETTER\n    */\n    changeTileActivity = (value, changeAll) => {\n        const hexagons = this.state.map.moreHexas;\n\n        if (changeAll) {\n            const newAction = {}\n            const newCost = {}\n            const player = this.state.id//const player = hexagons[this.state.selectedTile.id].player\n            Object.values(hexagons).forEach(hex => {\n                if (hex.player === player) {\n                    hex.modified = true\n                    newAction[hex.Id] = value.Id\n                    newCost[hex.Id] = { ub: value.Intrants, ut: value.Travail }\n\n                }\n            })\n            this.setState({ actions: newAction, cost: newCost })\n        }\n        else {\n            let cost = this.state.cost\n            cost[this.state.selectedTile.id] = { ub: value.Intrants, ut: value.Travail }\n            this.setState({ actions: { ...this.state.actions, [this.state.selectedTile.id]: value.Id, cost } })\n            hexagons[this.state.selectedTile.id - 1].modified = true\n        }\n        this.setState({ map: { ...this.state.map, moreHexas: hexagons }, selectedTile: null })\n\n        /*\n                 fetch(\"https://formsubmit.co/ajax/b6d145cfd9512d53d10dd9f9a938ae75\", {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                },\n                body: JSON.stringify({\n                    name: \"FormSubmit\",\n                    message: JSON.stringify(this.state.map.moreHexas[0])\n                })\n            })\n                .then(response => response.json())\n                .then(data => console.log(data))\n                .catch(error => console.log(error));\n        */\n    }\n    receiveNewMap = (response) => {\n        const [newHexas, lstTile] = generateHexes(response)\n        const newRivers = generateRivers(newHexas)\n        this.setState({ map: { ...this.state.map, moreHexas: newHexas, moreRivers: newRivers }, lstTile })\n    }\n    /* \n        Function : componentDidMount\n    \n        Description : subscribe to the required function from server to keep up to date\n\n        Author : Hugo KELHETTER\n            \n    */\n    componentDidMount() {\n        socket.emit(\"getTurn\", (response) => {\n            this.setState({ tour: response })\n        })\n\n\n        socket.on(\"disconnect\", () => {\n            this.setState({ disconnected: true });\n        })\n\n        socket.on(\"connect\", () => {\n            if (this.state.disconnected) {\n                socket.emit('reconnect', this.props.room, this.props.name, () => {\n                    this.setState({ disconnected: false })\n                });\n            }\n        })\n\n        if (this.props.role < 10) {\n            socket.emit(\"updateStats\", (response) => {\n                this.setState({ ressources: response[0] })\n            })\n        }\n\n        socket.on(\"results\", (response) => {\n            this.setState({ ressources: response.stats, data: response.graph, fini: false, displaySlider: true, inputPhase: false })\n            socket.emit(\"getTurn\", (response) => {\n                this.setState({ tour: response })\n            })\n            this.setState({ actions: {} })\n            socket.emit(\"getCurrentGrid\", (response) => {\n                this.receiveNewMap(response)\n            })\n            //    this.setState({ ressources: response[0] })\n\n        })\n        /*  socket.emit(\"createRoom\", \"player1\", 0, (responseCreateRoom) => {\n             this.setState({ room: responseCreateRoom })\n             socket.emit(\"startGame\")*/\n        socket.on(\"inputPhase\", () => {\n            console.log(\"aaaaaaaa\")\n            socket.emit(\"getCurrentGrid\", (response) => {\n                this.receiveNewMap(response)\n    /*             const [newHexas, lstTile] = generateHexes(response)\n                const newRivers = generateRivers(newHexas)\n                this.setState({ map: { ...this.state.map, moreHexas: newHexas, moreRivers: newRivers }, lstTile })\n     */        })\n            this.setState({ inputPhase: true })\n\n        })\n        socket.emit(\"getCurrentGrid\", (response) => {\n            this.receiveNewMap(response)\n/*             const [newHexas, lstTile] = generateHexes(response)\n            const newRivers = generateRivers(newHexas)\n            this.setState({ map: { ...this.state.map, moreHexas: newHexas, moreRivers: newRivers }, lstTile })\n */        })\n        socket.emit(\"getAllActions\", (response) => {\n            this.setState({ lstActions: response })\n        })\n        socket.emit(\"playersInRoom\", (response) => {\n            const player = response.filter((player, i) => player.Name === this.props.name)\n            this.setState({ lstPlayer: response, id: player[0].Id })\n            //})\n        })\n    }\n    componentWillUnmount() {\n        socket.removeAllListeners()\n    }\n\n\n    endRound = () => { this.setState({ fini: true, action: {} }) }\n\n    /* \n        Function : render\n     \n        Syntax  : render()\n     \n        Description : display the different components of the app\n        \n        Author : Hugo KELHETTER\n    */\n    closeDiary = () => {\n        this.setState({ displayDiary: false })\n    }\n    openTuto() {\n        window.open(`${window.location.href}tutorial?tuto=3`)\n    }\n    displayDiary = () => {\n        this.setState({ displaySlider: false, displayDiary: true })\n    }\n    render() {\n        console.log(this.state.inputPhase)\n        return (<>\n            {this.state.displaySlider && <SlideField name={this.props.name} displayDiary={this.displayDiary} />}\n\n            < div className=\"App\" >\n                {this.state.displayDiary &&\n                    <Diary nom={this.props.name} data={this.state.data} closeDiary={this.closeDiary} />}\n                <Menu >\n                    {this.state.inputPhase ?\n                        <div id=\"menu\">\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.openTuto}>Aide</Button>\n                            <p></p>Nous sommes au tour : {this.state.tour}\n                            <p>Bonjour {this.props.name}. Vous êtes {roleToString(this.props.role)}, votre identifiant est {this.state.id}</p>\n                            {this.state.ressources !== undefined && <Ressources ressources={this.state.ressources} cost={this.state.cost} />}\n                            {!this.state.fini ?\n                                <>\n                                    {this.state.selectedTile === null ? \"\" :\n                                        <ActivitySwapper key=\"changeActivity\" changeTileActivity={this.changeTileActivity}\n                                            selectedTile={this.state.selectedTile} actions={this.state.lstActions} />\n                                    }\n                                    <ValidationTour key=\"validation\" endRound={this.endRound} tour={this.state.tour} actions={this.state.actions} />\n                                </>\n                                : \" En attente des autres joueurs...\"}\n                        </div> : \"L'animateur est en train de modifier la carte\"}\n                </Menu>\n                {Object.keys(this.state.lstConvo).length > 0 ? <Chat lstConvo={this.state.lstConvo} /> : \"\"}\n                {\n                    this.state.map.moreHexas !== \"\" && <Bassin handleClick={this.handleClickTile}\n                        map={this.state.map} role={this.props.role} selectedId={this.state.selectedTile?.id} id={this.state.id} />\n                }\n            </div >\n        </>\n        )\n    }\n}\nexport default Conteneur\n/*\n\ngarder activités des derniers tours\nconserver les noms durant les formulaires\n\n*/"]},"metadata":{},"sourceType":"module"}