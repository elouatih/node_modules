{"ast":null,"code":"/* \n    Function : handleClickTile\n\n    Syntax  : handleClickTile(h)\n        \n    Input   : h : data of the selectedTile\n        \n    Description : \n        change the state of selectedTile based on which tile is clicked and the current state\n        if the current state's id is equal to h's id, the state is set to null\n        else it is updated to h's data     \n\n    Author : Hugo KELHETTER\n*/\nimport { socket } from \"../../socket\";\nimport isIncluded from \"../../Interface/utils/isIncluded\";\nimport deleteArray from \"../../Interface/utils/deleteArray\";\n\nfunction handleClickTileFarmer(h) {\n  //console.log(\"SELECTED ID : \", this.state.selectedTile)\n  console.log(\"IS INCLUDED : \", isIncluded(h.props.id, this.state.selectedTile));\n  let boolean = isIncluded(h.props.id, this.state.selectedTile)[0];\n  let value = isIncluded(h.props.id, this.state.selectedTile)[1];\n\n  if (boolean) {\n    this.setState({\n      selectedTile: deleteArray(value, this.state.selectedTile)\n    });\n  }\n  /*if (h.props.id === this.state.selectedTile?.id) {\n      this.setState({ selectedTile: null })\n  }*/\n  else {\n      console.log(\"SELECTED TILE : \", this.state.selectedTile); //this.setState({ selectedTile: this.state.selectedTile.push(h.props) })\n\n      console.log(\"STATE ID : \", this.state.id); //console.log(\"SELECTED TILE \", this.state.selectedTile?.id);\n\n      if (this.props.role === 1) {\n        socket.emit(\"getPlayerActivity\", this.state.id, h.props.id, response => {\n          console.log(\"GET PLAYER ACTIVITY IS : \", response[0]); //let { selectedTile } = this.state;\n\n          this.setState({\n            selectedTile: { ...this.state.selectedTile,\n              practice: response[0].practice\n            }\n          }); //console.log(this.state.selectedTile.practice);\n\n          /*const newSelectedTile = this.state.selectedTile;\n          //console.log(newSelectedTile);\n          //newSelectedTile.practice = response[0].practice;\n          this.setState({[this.state.selectedTile.practice]: response[0].practice});\n          console.log(this.state.selectedTile)*/\n        });\n      }\n    }\n}\n\nexport default handleClickTileFarmer;","map":{"version":3,"sources":["/home/elouati/Bureau/projet_working/client/src/Game/controls/handleClickTileFarmer.js"],"names":["socket","isIncluded","deleteArray","handleClickTileFarmer","h","console","log","props","id","state","selectedTile","boolean","value","setState","role","emit","response","practice"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,MAAR,QAAqB,cAArB;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,OAAOC,WAAP,MAAwB,mCAAxB;;AAEA,SAASC,qBAAT,CAA+BC,CAA/B,EAAkC;AAC9B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BL,UAAU,CAACG,CAAC,CAACG,KAAF,CAAQC,EAAT,EAAa,KAAKC,KAAL,CAAWC,YAAxB,CAAxC;AACA,MAAIC,OAAO,GAAGV,UAAU,CAACG,CAAC,CAACG,KAAF,CAAQC,EAAT,EAAa,KAAKC,KAAL,CAAWC,YAAxB,CAAV,CAAgD,CAAhD,CAAd;AACA,MAAIE,KAAK,GAAGX,UAAU,CAACG,CAAC,CAACG,KAAF,CAAQC,EAAT,EAAa,KAAKC,KAAL,CAAWC,YAAxB,CAAV,CAAgD,CAAhD,CAAZ;;AACA,MAAGC,OAAH,EAAY;AACR,SAAKE,QAAL,CAAc;AAACH,MAAAA,YAAY,EAAER,WAAW,CAACU,KAAD,EAAQ,KAAKH,KAAL,CAAWC,YAAnB;AAA1B,KAAd;AACH;AACD;AACJ;AACA;AALI,OAMK;AACDL,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgC,KAAKG,KAAL,CAAWC,YAA3C,EADC,CAED;;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B,KAAKG,KAAL,CAAWD,EAAtC,EAHC,CAID;;AACA,UAAG,KAAKD,KAAL,CAAWO,IAAX,KAAoB,CAAvB,EAAyB;AACrBd,QAAAA,MAAM,CAACe,IAAP,CAAY,mBAAZ,EAAiC,KAAKN,KAAL,CAAWD,EAA5C,EAAgDJ,CAAC,CAACG,KAAF,CAAQC,EAAxD,EAA6DQ,QAAQ,IAAI;AACrEX,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCU,QAAQ,CAAC,CAAD,CAAjD,EADqE,CAErE;;AACA,eAAKH,QAAL,CAAc;AACVH,YAAAA,YAAY,EAAG,EACX,GAAG,KAAKD,KAAL,CAAWC,YADH;AAEXO,cAAAA,QAAQ,EAAED,QAAQ,CAAC,CAAD,CAAR,CAAYC;AAFX;AADL,WAAd,EAHqE,CASrE;;AACA;AAChB;AACA;AACA;AACA;AACa,SAfD;AAgBH;AACJ;AACJ;;AACD,eAAed,qBAAf","sourcesContent":["/* \n    Function : handleClickTile\n\n    Syntax  : handleClickTile(h)\n        \n    Input   : h : data of the selectedTile\n        \n    Description : \n        change the state of selectedTile based on which tile is clicked and the current state\n        if the current state's id is equal to h's id, the state is set to null\n        else it is updated to h's data     \n\n    Author : Hugo KELHETTER\n*/\nimport {socket} from \"../../socket\";\nimport isIncluded from \"../../Interface/utils/isIncluded\";\nimport deleteArray from \"../../Interface/utils/deleteArray\";\n\nfunction handleClickTileFarmer(h) {\n    //console.log(\"SELECTED ID : \", this.state.selectedTile)\n    console.log(\"IS INCLUDED : \", isIncluded(h.props.id, this.state.selectedTile))\n    let boolean = isIncluded(h.props.id, this.state.selectedTile)[0];\n    let value = isIncluded(h.props.id, this.state.selectedTile)[1];\n    if(boolean) {\n        this.setState({selectedTile: deleteArray(value, this.state.selectedTile)})\n    }\n    /*if (h.props.id === this.state.selectedTile?.id) {\n        this.setState({ selectedTile: null })\n    }*/\n    else {\n        console.log(\"SELECTED TILE : \", this.state.selectedTile)\n        //this.setState({ selectedTile: this.state.selectedTile.push(h.props) })\n        console.log(\"STATE ID : \", this.state.id);\n        //console.log(\"SELECTED TILE \", this.state.selectedTile?.id);\n        if(this.props.role === 1){\n            socket.emit(\"getPlayerActivity\", this.state.id, h.props.id, (response => {\n                console.log(\"GET PLAYER ACTIVITY IS : \", response[0]);\n                //let { selectedTile } = this.state;\n                this.setState({\n                    selectedTile : {\n                        ...this.state.selectedTile,\n                        practice: response[0].practice\n                    }\n                })\n                //console.log(this.state.selectedTile.practice);\n                /*const newSelectedTile = this.state.selectedTile;\n                //console.log(newSelectedTile);\n                //newSelectedTile.practice = response[0].practice;\n                this.setState({[this.state.selectedTile.practice]: response[0].practice});\n                console.log(this.state.selectedTile)*/\n            }))\n        }\n    }\n}\nexport default handleClickTileFarmer"]},"metadata":{},"sourceType":"module"}