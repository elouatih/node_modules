{"ast":null,"code":"var _jsxFileName = \"/home/elouati/Bureau/projet_working/client/src/Game/animator/AnimatorLoader.js\";\nimport React from 'react';\nimport { socket } from '../../socket.js';\nimport PropTypes from 'prop-types';\nimport { generateHexes, generateRivers } from \"../map/MapUtil.js\";\nimport Bassin from \"../map/Bassin.js\";\nimport handleClickTile from '../controls/handleClickTileFarmer.js';\nimport ChangeTile from './ChangeTile.js';\nimport Menu from '../controls/Menu.js';\nimport { Button, Typography } from '@material-ui/core'; //import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\n//import CheckBoxIcon from '@material-ui/icons/CheckBox';\n\nimport ConfirmDialog from \"../controls/ConfirmDialog.js\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport SetFarmers from \"../../Interface/Animator/SetFarmers\";\nimport SetTimeInterface from \"../../Interface/Animator/SetTimeInterface\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class AnimatorLoader extends React.Component {\n  /* \n      Input : props={name}\n              name: string : name of the player\n      \n      Syntax : <AnimatorLoader name=\"player's name\"/>\n  */\n  constructor(props) {\n    super(props);\n\n    this.addConvo = data => {\n      if (data.convoName.length === 0) {\n        alert(\"vous devez entrer un nom\");\n        return false;\n      }\n\n      for (const entry in this.state.lstConvo) {\n        if (entry === data.convoName) {\n          alert(\"Nom déjà pris\");\n          return false;\n        }\n      }\n\n      let newConvo = [];\n      const name = data.convoName;\n\n      for (const entry in data.lstPlayer) {\n        if (!(entry === \"convoName\" || entry === \"lstConvo\")) {\n          if (data.lstPlayer[entry]) newConvo.push(entry);\n        }\n      }\n\n      if (newConvo.length > 0) {\n        this.setState({\n          lstConvo: { ...this.state.lstConvo,\n            [name]: newConvo\n          }\n        });\n        return true;\n      }\n\n      alert(\"Vous devez selectionner des joueurs\");\n      return false;\n    };\n\n    this.updateMap = tileChange => {\n      let tile = this.state.map.moreHexas[tileChange.selectedTile - 1];\n      delete tileChange.selectedTile;\n      tile = this.updateObject(tile, tileChange);\n      this.setState({\n        selectedTile: \"\"\n      });\n    };\n\n    this.handleSubmit = () => {\n      /*         console.log(this.state.action)\n              switch (this.state.action) {\n                  case \"Commencer la partie\":\n                      this.setState({ mapReady: false })\n                      socket.emit(\"mapReady\")\n                      break;\n                  case \"Terminer la partie\":\n                      socket.emit(\"endGame\")\n                      break;\n                  default:\n                      socket.emit(\"nextTurn\", () => {\n                          socket.emit(\"getTurn\", (response) => {\n                              this.setState({ tour: response })\n                          })\n                      })\n              } */\n      const action = this.actionToString();\n\n      if (action === \"Finir les modifications\") {\n        if (this.state.tour === -1) {\n          socket.emit(\"mapReady\");\n          console.log(\"mapReady\");\n          this.setState({\n            tour: 0\n          });\n        } else {\n          socket.emit(\"inputPhase\");\n          console.log(\"inputphase\");\n        }\n      } else socket.emit(\"nextTurn\", () => {\n        socket.emit(\"getTurn\", response => {\n          console.log(response);\n          this.setState({\n            tour: response\n          });\n        });\n      });\n\n      this.setState({\n        displayConfirmDialog: false,\n        farmersPlaying: !this.state.farmersPlaying\n      });\n    };\n\n    this.cancel = () => {\n      this.setState({\n        displayConfirmDialog: false\n      });\n    };\n\n    this.handleContinue = event => {\n      /* console.log(event.currentTarget, event.currentTarget.name)\n      this.setState({ farmersPlaying: !this.state.farmersPlaying })\n      if (!this.state.farmersPlaying) { socket.emit(\"inputPhase\", () => { }) } */\n      this.setState({\n        action: event.currentTarget.name,\n        displayConfirmDialog: true\n      });\n    };\n\n    this.state = {\n      interfaceCtx: 1,\n      lstPlayer: \"\",\n      lstTile: \"\",\n      map: {\n        moreHexas: \"\",\n        moreRivers: null\n      },\n      mapReady: true,\n      tour: -1,\n      action: \"\",\n      disconnected: false,\n      farmersPlaying: false,\n      listPlayer: [],\n      agriPlayer: []\n    }; //this.addConvo = this.addConvo.bind(this)\n\n    this.handleClickTile = handleClickTile.bind(this);\n  }\n\n  /*\n      Function : componentDidMount\n       Description : retrieve the map and players's data\n       Author : Hugo KELHETTER\n    */\n  componentDidMount() {\n    socket.on(\"disconnect\", () => {\n      this.setState({\n        disconnected: true\n      });\n    });\n    socket.on(\"connect\", () => {\n      if (this.state.disconnected) {\n        socket.emit('reconnect', this.props.room, this.props.name, () => {\n          this.setState({\n            disconnected: false\n          });\n        });\n      }\n    });\n    socket.emit(\"getCurrentGrid\", response => {\n      const newHexas = generateHexes(response);\n      let lstTile = newHexas[1];\n      const newRivers = generateRivers(newHexas[0]); //const tampon = this.createTampon(newHexas, this.state.map.player)\n\n      this.setState({\n        map: { ...this.state.map,\n          moreHexas: newHexas[0],\n          moreRivers: newRivers,\n          selectedTile: null\n        },\n        lstTile\n      });\n    });\n    socket.emit(\"playersInRoom\", response => {\n      //console.log(\"RESPONSE\");\n      //console.log(response);\n      this.setState({\n        listPlayer: response\n      });\n      this.setState({\n        lstPlayer: response\n      }); //})\n    });\n    socket.emit(\"agriInRoom\", response => {\n      //console.log(\"RESPONSE\");\n      const agriculteursInRoom = [];\n      response.map(item => agriculteursInRoom.push(item.Name));\n      this.setState({\n        agriPlayer: agriculteursInRoom\n      }); //this.setState({agriPlayer: response})\n      //})\n    });\n  }\n  /*\n      Function : updateObject\n       Syntax  : obj=updateObject(source,newData)\n       Input   : source : object : the object to update\n                newData : object : the object containing new data\n       Output  : obj : object : an updated object\n       Description : update source with the subset of data contained in newData\n                      let source = {firstname:hugo,name:kelhetter} and newData={firstname:jhon}\n                      let newObject=updateObject(source,newData)\n                      newObject = {firstname:jhon,name:kelhetter}\n       Author : Hugo KELHETTER\n  \n  */\n\n\n  updateObject(source, newData) {\n    for (const key in newData) {\n      source[key] = newData[key];\n    }\n\n    return source;\n  }\n  /*\n      Function : updateMap\n       Syntax  : updateMap(tileChange)\n       Input   : tileChange : object : new set of data for a tile of the map\n       Description : update the map with new data\n       Author : Hugo KELHETTER\n  \n  */\n\n\n  openTuto() {\n    window.open(`${window.location.href}tutorial?tuto=2`);\n  }\n\n  actionToString() {\n    if (this.state.farmersPlaying) return \"Finir le tour\";\n    return \"Finir les modifications\";\n  }\n\n  endGame() {\n    socket.emit(\"endGame\");\n  }\n  /* author Hossam ELOUATI */\n\n\n  agriActivity() {\n    return /*#__PURE__*/_jsxDEV(SetFarmers, {\n      pseudo: this.props.name,\n      listAgri: this.state.agriPlayer,\n      nextInterface: () => this.setState({\n        interfaceCtx: 2\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 16\n    }, this);\n  }\n  /* author Hossam ELOUATI */\n\n\n  setTimers() {\n    return /*#__PURE__*/_jsxDEV(SetTimeInterface, {\n      pseudo: this.props.name,\n      nextInterface: () => this.setState({\n        interfaceCtx: 3\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 16\n    }, this);\n  }\n  /*     Description : display the UI of the animator : the map, and controls over the map and the game in general\n  *       Author : Hugo KELHETTER\n  * */\n\n\n  principal() {\n    var _this$state$selectedT;\n\n    {\n      this.state.listPlayer.map(item => console.log(\"ID : \" + item.Id + \" Name : \" + item.Name));\n    }\n    const buttonValue = this.actionToString(); //const buttonValue = this.state.mapReady ? \"Commencer la partie\" : `Terminer le tour ${this.state.tour}`\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.state.displayConfirmDialog && /*#__PURE__*/_jsxDEV(ConfirmDialog, {\n        cancel: this.cancel,\n        confirm: this.handleSubmit,\n        action: this.state.action\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(Menu, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"menu\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: this.openTuto,\n              children: \"Aide\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"tour actuel : \", this.state.tour]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" \", this.state.mapReady && \"Vous pouvez modifier la carte avant le début de la partie. \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: \" Cliquez sur une case pour apporter des modifications\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\" L'identifiant de la partie est : \", this.props.room]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              \"data-testid\": \"submit\",\n              name: buttonValue,\n              value: buttonValue,\n              onClick: this.handleContinue,\n              children: buttonValue\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              \"data-testid\": \"submit\",\n              name: \"Terminer la partie\",\n              onClick: this.endGame,\n              children: \"Terminer la partie\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 25\n          }, this), this.state.lstPlayer !== \"\" && this.state.lstTile !== \"\" && this.state.selectedTile && !this.state.farmersPlaying && /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"changeTile\",\n            children: /*#__PURE__*/_jsxDEV(ChangeTile, {\n              lstPlayer: this.state.lstPlayer,\n              lstTile: this.state.map.moreHexas,\n              updateMap: this.updateMap,\n              selectedTile: this.state.selectedTile,\n              type: this.state.selectedTile.className,\n              id: this.state.selectedTile.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 21\n        }, this), this.state.map.moreHexas !== \"\" && /*#__PURE__*/_jsxDEV(Bassin, {\n          handleClick: this.handleClickTile,\n          selectedId: (_this$state$selectedT = this.state.selectedTile) === null || _this$state$selectedT === void 0 ? void 0 : _this$state$selectedT.id,\n          map: this.state.map,\n          role: this.props.role,\n          id: this.state.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n  /*\n  Function : render\n   Syntax  : render()\n   Description : display the UI of the animator : the map, and controls over the map and the game in general\n   Author : Hossam ELOUATI\n  */\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: this.state.interfaceCtx === 1 ? this.agriActivity() : this.state.interfaceCtx === 2 ? this.setTimers() : this.principal()\n    }, void 0, false);\n  }\n\n}\nAnimatorLoader.propTypes = {\n  name: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["/home/elouati/Bureau/projet_working/client/src/Game/animator/AnimatorLoader.js"],"names":["React","socket","PropTypes","generateHexes","generateRivers","Bassin","handleClickTile","ChangeTile","Menu","Button","Typography","ConfirmDialog","ListItem","ListItemText","SetFarmers","SetTimeInterface","AnimatorLoader","Component","constructor","props","addConvo","data","convoName","length","alert","entry","state","lstConvo","newConvo","name","lstPlayer","push","setState","updateMap","tileChange","tile","map","moreHexas","selectedTile","updateObject","handleSubmit","action","actionToString","tour","emit","console","log","response","displayConfirmDialog","farmersPlaying","cancel","handleContinue","event","currentTarget","interfaceCtx","lstTile","moreRivers","mapReady","disconnected","listPlayer","agriPlayer","bind","componentDidMount","on","room","newHexas","newRivers","agriculteursInRoom","item","Name","source","newData","key","openTuto","window","open","location","href","endGame","agriActivity","setTimers","principal","Id","buttonValue","className","id","role","render","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { socket } from '../../socket.js'\nimport PropTypes from 'prop-types';\nimport { generateHexes, generateRivers } from \"../map/MapUtil.js\"\nimport Bassin from \"../map/Bassin.js\"\nimport handleClickTile from '../controls/handleClickTileFarmer.js'\nimport ChangeTile from './ChangeTile.js'\nimport Menu from '../controls/Menu.js'\nimport { Button, Typography } from '@material-ui/core'\n//import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\n//import CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport ConfirmDialog from \"../controls/ConfirmDialog.js\"\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport SetFarmers from \"../../Interface/Animator/SetFarmers\";\nimport SetTimeInterface from \"../../Interface/Animator/SetTimeInterface\";\n\nexport default class AnimatorLoader extends React.Component {\n    /* \n        Input : props={name}\n                name: string : name of the player\n        \n        Syntax : <AnimatorLoader name=\"player's name\"/>\n    */\n    constructor(props) {\n        super(props)\n        this.state = {\n            interfaceCtx: 1,\n            lstPlayer: \"\", lstTile: \"\", map: {moreHexas: \"\", moreRivers: null}, mapReady: true, tour: -1, action: \"\",\n            disconnected: false, farmersPlaying: false, listPlayer: [], agriPlayer: []\n\n        }\n        //this.addConvo = this.addConvo.bind(this)\n        this.handleClickTile = handleClickTile.bind(this)\n\n    }\n\n    static propTypes = {\n        name: PropTypes.string.isRequired\n    }\n    /* \nFunction : addConvo\n\nSyntax  : boolean=addConvo(data)\n\nInput   : object following the next pattern\n            {\n                convoName : \"name of the conversation\",\n                player1 : boolean,\n                player2 : boolean\n                ...\n            }\n            playerN's represents the player's name and the value represents \n                    whether or not it is part of the conversation\n\nOutput  : the success of the function\n\nDescription : display the different components of the app\n\nAuthor : Hugo KELHETTER\n    \n*/\n    addConvo = (data) => {\n\n        if (data.convoName.length === 0) {\n            alert(\"vous devez entrer un nom\")\n            return false\n        }\n        for (const entry in this.state.lstConvo) {\n            if (entry === data.convoName) {\n                alert(\"Nom déjà pris\")\n                return false\n            }\n        }\n\n        let newConvo = []\n        const name = data.convoName\n        for (const entry in data.lstPlayer) {\n            if (!(entry === \"convoName\" || entry === \"lstConvo\")) {\n                if (data.lstPlayer[entry]) newConvo.push(entry)\n            }\n        }\n\n        if (newConvo.length > 0) {\n            this.setState({lstConvo: {...this.state.lstConvo, [name]: newConvo}})\n            return true\n        }\n        alert(\"Vous devez selectionner des joueurs\")\n        return false\n    }\n\n    /*\n        Function : componentDidMount\n\n        Description : retrieve the map and players's data\n\n        Author : Hugo KELHETTER\n \n    */\n    componentDidMount() {\n        socket.on(\"disconnect\", () => {\n            this.setState({disconnected: true});\n        })\n\n        socket.on(\"connect\", () => {\n            if (this.state.disconnected) {\n                socket.emit('reconnect', this.props.room, this.props.name, () => {\n                    this.setState({disconnected: false})\n                });\n            }\n        })\n\n        socket.emit(\"getCurrentGrid\", (response) => {\n            const newHexas = generateHexes(response)\n            let lstTile = newHexas[1]\n            const newRivers = generateRivers(newHexas[0])\n            //const tampon = this.createTampon(newHexas, this.state.map.player)\n            this.setState({\n                map: {...this.state.map, moreHexas: newHexas[0], moreRivers: newRivers, selectedTile: null},\n                lstTile\n            })\n\n        })\n        socket.emit(\"playersInRoom\", (response) => {\n            //console.log(\"RESPONSE\");\n            //console.log(response);\n            this.setState({listPlayer: response})\n            this.setState({lstPlayer: response})\n            //})\n        })\n\n        socket.emit(\"agriInRoom\", (response) => {\n            //console.log(\"RESPONSE\");\n            const agriculteursInRoom = []\n            response.map((item) => agriculteursInRoom.push(item.Name));\n            this.setState({agriPlayer: agriculteursInRoom})\n            //this.setState({agriPlayer: response})\n            //})\n        })\n    }\n\n    /*\n        Function : updateObject\n\n        Syntax  : obj=updateObject(source,newData)\n\n        Input   : source : object : the object to update\n                  newData : object : the object containing new data\n\n        Output  : obj : object : an updated object\n\n        Description : update source with the subset of data contained in newData\n                        let source = {firstname:hugo,name:kelhetter} and newData={firstname:jhon}\n                        let newObject=updateObject(source,newData)\n                        newObject = {firstname:jhon,name:kelhetter}\n\n        Author : Hugo KELHETTER\n    \n    */\n    updateObject(source, newData) {\n        for (const key in newData) {\n            source[key] = newData[key]\n        }\n        return source\n    }\n\n    /*\n        Function : updateMap\n\n        Syntax  : updateMap(tileChange)\n\n        Input   : tileChange : object : new set of data for a tile of the map\n\n        Description : update the map with new data\n\n        Author : Hugo KELHETTER\n    \n    */\n\n    updateMap = (tileChange) => {\n        let tile = this.state.map.moreHexas[tileChange.selectedTile - 1]\n        delete tileChange.selectedTile\n        tile = this.updateObject(tile, tileChange)\n        this.setState({selectedTile: \"\"})\n    }\n    /* \n        Function : handleSubmit\n\n        Syntax  : handleSubmit()\n\n        Description : if mapReady == false then it starts the game for other players\n                      else it ends the turn\n\n        Author : Hugo KELHETTER\n    \n    */\n    handleSubmit = () => {\n        /*         console.log(this.state.action)\n                switch (this.state.action) {\n                    case \"Commencer la partie\":\n                        this.setState({ mapReady: false })\n                        socket.emit(\"mapReady\")\n                        break;\n                    case \"Terminer la partie\":\n                        socket.emit(\"endGame\")\n                        break;\n                    default:\n                        socket.emit(\"nextTurn\", () => {\n                            socket.emit(\"getTurn\", (response) => {\n                                this.setState({ tour: response })\n                            })\n                        })\n                } */\n        const action = this.actionToString()\n        if (action === \"Finir les modifications\") {\n            if (this.state.tour === -1) {\n                socket.emit(\"mapReady\")\n                console.log(\"mapReady\")\n                this.setState({tour: 0})\n            } else {\n                socket.emit(\"inputPhase\")\n                console.log(\"inputphase\")\n            }\n        } else socket.emit(\"nextTurn\", () => {\n            socket.emit(\"getTurn\", (response) => {\n                console.log(response)\n\n                this.setState({tour: response})\n            })\n        })\n        this.setState({displayConfirmDialog: false, farmersPlaying: !this.state.farmersPlaying})\n    }\n    cancel = () => {\n        this.setState({displayConfirmDialog: false})\n    }\n    handleContinue = (event) => {\n        /* console.log(event.currentTarget, event.currentTarget.name)\n        this.setState({ farmersPlaying: !this.state.farmersPlaying })\n        if (!this.state.farmersPlaying) { socket.emit(\"inputPhase\", () => { }) } */\n        this.setState({action: event.currentTarget.name, displayConfirmDialog: true})\n    }\n\n    openTuto() {\n        window.open(`${window.location.href}tutorial?tuto=2`)\n    }\n\n    actionToString() {\n        if (this.state.farmersPlaying) return \"Finir le tour\"\n        return \"Finir les modifications\"\n    }\n\n    endGame() {\n        socket.emit(\"endGame\")\n    }\n\n    /* author Hossam ELOUATI */\n    agriActivity() {\n        return <SetFarmers pseudo={this.props.name}\n                           listAgri={this.state.agriPlayer}\n                            nextInterface={() => this.setState({interfaceCtx: 2})}/>\n    }\n\n    /* author Hossam ELOUATI */\n    setTimers() {\n        return <SetTimeInterface pseudo={this.props.name}\n                                 nextInterface={() => this.setState({interfaceCtx: 3})}/>\n    }\n\n    /*     Description : display the UI of the animator : the map, and controls over the map and the game in general\n    *       Author : Hugo KELHETTER\n    * */\n    principal() {\n        {this.state.listPlayer.map(item => (\n            console.log(\"ID : \" + item.Id + \" Name : \" + item.Name)))}\n        const buttonValue = this.actionToString()\n        //const buttonValue = this.state.mapReady ? \"Commencer la partie\" : `Terminer le tour ${this.state.tour}`\n        return (<>\n            {this.state.displayConfirmDialog &&\n            <ConfirmDialog cancel={this.cancel} confirm={this.handleSubmit} action={this.state.action}/>}\n\n            <div className=\"App\">\n                {\n                    < Menu>\n                        <div id=\"menu\">\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.openTuto}>\n                                Aide\n                            </Button>\n                            <Typography>tour actuel : {this.state.tour}</Typography>\n                            <Typography> {this.state.mapReady && \"Vous pouvez modifier la carte avant le début de la partie. \"}</Typography>\n                            <Typography> Cliquez sur une case pour apporter des modifications</Typography>\n                            <Typography> L'identifiant de la partie est : {this.props.room}</Typography>\n                            <Button variant=\"contained\" color=\"primary\" data-testid=\"submit\" name={buttonValue}\n                                    value={buttonValue} onClick={this.handleContinue}>\n                                {buttonValue}\n                            </Button>\n\n                            <Button variant=\"contained\" color=\"primary\" data-testid=\"submit\" name=\"Terminer la partie\"\n                                    onClick={this.endGame}>\n                                Terminer la partie\n                            </Button>\n                        </div>\n                        {(this.state.lstPlayer !== \"\" && this.state.lstTile !== \"\" && this.state.selectedTile && !this.state.farmersPlaying) &&\n                        <div id=\"changeTile\">\n                            <ChangeTile lstPlayer={this.state.lstPlayer} lstTile={this.state.map.moreHexas}\n                                        updateMap={this.updateMap}\n                                        selectedTile={this.state.selectedTile} type={this.state.selectedTile.className}\n                                        id={this.state.selectedTile.id}/>\n                        </div>\n                        }\n                    </Menu>\n                }\n                {\n                    this.state.map.moreHexas !== \"\" &&\n                    <Bassin handleClick={this.handleClickTile} selectedId={this.state.selectedTile?.id}\n                            map={this.state.map} role={this.props.role} id={this.state.id}/>\n                }\n            </div>\n        </>);\n    }\n\n    /*\n    Function : render\n\n    Syntax  : render()\n\n    Description : display the UI of the animator : the map, and controls over the map and the game in general\n\n    Author : Hossam ELOUATI\n \n*/\n    render() {\n        return (\n            <>\n                {\n                    this.state.interfaceCtx === 1 ? this.agriActivity() :\n                        this.state.interfaceCtx === 2 ? this.setTimers() :\n                            this.principal()\n                }\n                {/*{console.log(\"STATE ID = \" + this.state.id + \"\\nROLE = \"+this.props.role)}\n                <Updating ut={23} ub={3} oldUb={-1} oldUt={0} formations={[1, 0, 9, 1]} role={this.props.role} h={0} m={0} s={20}\n                   pseudo={this.props.name} bassin={nameSubBassin(getSubBassin(this.state.id))} numeroPhase={1} tour={this.state.tour}/>);*/}\n            </> )\n    }\n}"]},"metadata":{},"sourceType":"module"}