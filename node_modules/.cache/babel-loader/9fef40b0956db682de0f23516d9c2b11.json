{"ast":null,"code":"var _jsxFileName = \"/home/elouati/Bureau/client/src/Game/animator/ChangeTile.js\";\nimport React from \"react\";\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Radio from '@material-ui/core/Radio';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { socket } from \"../../socket.js\";\nimport { getSubBassin } from \"../map/MapUtil.js\";\nimport createCheckbox from \"../controls/createCheckbox.js\";\nimport { Button } from '@material-ui/core';\nimport warningText from \"../controls/warningText.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class ChangeTile extends React.Component {\n  constructor(props) {\n    super(props); //this.handleChange = this.handleChange.bind(this)\n    //this.handleSubmit = this.handleSubmit.bind(this)\n    //this.modifyTile = this.modifyTile.bind(this)\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = target.type === 'checkbox' ? +target.checked : target.value;\n      this.setState({\n        [target.name]: value\n      });\n    };\n\n    this.modifyTile = () => {\n      const [problem] = \"quelque chose s'est mal passé\";\n      let res = {\n        selectedTile: this.props.selectedTile.id\n      };\n\n      switch (this.props.selectedTile.mainCLC1) {\n        case \"1\":\n          res = { ...res,\n            market: +!this.props.selectedTile.market\n          }; //res = { ...res, infrastructure: 0, market: 1, newActivity: 0 }\n\n          socket.emit(\"setMarket\", res);\n          return [\"\", res];\n\n        case \"2\":\n          switch (this.state.agriAction) {\n            case \"\":\n              return [\"selectionnez l'action à effectuer\"];\n\n            case \"changeOwner\":\n              const ok = this.checkReceiver(res);\n              if (ok === \"\") socket.emit(\"changeOwner\", res);\n              res.cellPlayer = res.selectedReceiver;\n              res.player = res.selectedReceiver;\n              delete res.selectedReceiver;\n              return [ok, res];\n\n            case \"addInfra\":\n              if (this.state.checkboxEco === this.props.selectedTile.eco && this.state.checkboxIrrig === this.props.selectedTile.irrig) {\n                return [\"rien n'a changé\"];\n              }\n\n              res = { ...res,\n                eco: this.state.checkboxEco,\n                irrig: this.state.checkboxIrrig\n              };\n              socket.emit(\"addInfra\", res);\n              return [\"\", res];\n\n            case \"transformToForest\":\n              socket.emit(\"transformToForest\", res.selectedTile);\n              res.mainCLC1 = 3;\n              return [\"\", res];\n\n            default:\n              return [problem];\n          }\n\n        case \"3\":\n          switch (this.state.agriAction) {\n            case \"\":\n              return [\"selectionnez l'action à effectuer\"];\n\n            case \"transformToCity\":\n              res = { ...res,\n                market: this.state.checkboxMarket\n              };\n              socket.emit(\"transformToCity\", res);\n              res.mainCLC1 = 1;\n              return [\"\", res];\n\n            case \"transformToFarm\":\n              res = { ...res,\n                selectedReceiver: this.state.selectedReceiver,\n                eco: this.state.checkboxEco,\n                irrig: this.state.checkboxIrrig\n              };\n              const ok = this.checkReceiver(res);\n              if (ok === \"\") socket.emit(\"transformToFarm\", res);\n              res.mainCLC1 = 2;\n              return [ok, res];\n\n            default:\n              return [problem];\n          }\n\n        case \"5\":\n          switch (this.state.agriAction) {\n            case \"\":\n              return [\"selectionnez l'action à effectuer\"];\n\n            case \"transformToFarm\":\n              res = { ...res,\n                selectedReceiver: this.state.selectedReceiver,\n                eco: this.state.checkboxEco,\n                irrig: this.state.checkboxIrrig\n              };\n              const ok = this.checkReceiver(res);\n              if (ok === \"\") socket.emit(\"transformToFarm\", res);\n              res.mainCLC1 = 2;\n              return [ok, res];\n\n            case \"transformToForest\":\n              console.log(\"a\");\n              socket.emit(\"transformToForest\", res.selectedTile);\n              res.mainCLC1 = 3;\n              return [\"\", res];\n\n            default:\n              return [problem];\n          }\n\n        default:\n          return [problem];\n      }\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const [feedBack, change] = this.modifyTile();\n      if (feedBack === \"\") this.props.updateMap(change);\n      this.setState({\n        feedBack\n      });\n    };\n\n    this.createCheckbox = createCheckbox.bind(this);\n    this.state = {\n      agriAction: \"\",\n      action: \"\",\n      selectedReceiver: \"\",\n      feedBack: \"\",\n      checkboxEco: !!this.props.selectedTile.eco,\n      checkboxIrrig: !!this.props.selectedTile.irrig,\n      checkboxMarket: !!this.props.selectedTile.market\n    };\n  }\n  /* \n          Function : handleChange\n  \n          Syntax  : handleChange\n  \n          Input   : event : the event calling the function        \n  \n          Description : update the form controls's state\n  \n          Author : Hugo KELHETTER\n      \n  */\n\n\n  /* \n      Function : checkReceiver\n       Syntax  : resString=checkReceiver(res)\n       Input   : res : object : contains the key/value pair selectedReceiver:player's id  \n      \n      Output  : resString : string : string explaining what went wrong in the submission\n       Description : check if res.selectedReceiver equals this.state.selectedReceiver or \"\" and returns a string according to it\n       Author : Hugo KELHETTER\n  \n  */\n  checkReceiver(res) {\n    res.selectedReceiver = this.state.selectedReceiver;\n    if (this.state.selectedReceiver === \"\") return \"selectionnez le joueur qui reçoit la case\";\n    if (this.state.selectedReceiver === this.props.selectedTile.player) return \"le donneur et le receveur ne peuvent pas être la même personne\";\n    return \"\";\n  }\n  /* \n          Function : modifyTile\n  \n          Syntax  : [resString,res]=modifyTile()\n  \n          Output : resString : string : string explaining what went wrong in the submission\n                   res : object : contains the modifications sent to the server\n  \n          Description : check the form submission and return a log of it and an object containing the modifications\n                      if everything is fine, send to the server the modifications\n  \n          Author : Hugo KELHETTER\n      \n      */\n\n\n  /* \n      Function : selectedPLayer\n       Syntax  : selectedBox=selectedPlayer()\n       Output :  selectedBox=<>\n                              <FormLabel>\n                              <Select>\n                                  <MenuItem/>\n                              </Select>\n                              </> \n                              \n      Description : display a selectedBox containing the farmer present in the \n                      same sub basin as the selected tile\n       Author : Hugo KELHETTER\n      \n  */\n  selectedPlayer() {\n    const tile = this.props.selectedTile;\n    let playerArray = this.props.lstPlayer.filter(player => player.Role < 9 && getSubBassin(player.Id) === tile.bassin && player.Id !== tile.player);\n    return (this.state.agriAction === \"changeOwner\" || this.state.agriAction === \"transformToFarm\") && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n        component: \"legend\",\n        children: \"Qui re\\xE7oit cette case ?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        name: \"selectedReceiver\",\n        labelId: \"selectedReceiver\",\n        value: this.state.selectedReceiver,\n        onChange: this.handleChange,\n        children: playerArray.map((player, i) => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: player.Id,\n          children: [player.Name, \" : joueur \", player.Id, \" \"]\n        }, player.Id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n  /* \n      Function : addInfra\n       Syntax  : selectedBoxes=addInfra()\n       Output :  selectedBoxes=<>\n                              <FormControlLabel>\n                                  <CheckBox>\n                              </FormControlLabel>\n                              <FormControlLabel>\n                                  <CheckBox>\n                              </FormControlLabel>\n                              </> \n                              \n      Description : display checkBoxes to add infrastructures\n       Author : Hugo KELHETTER\n      \n  */\n\n\n  addInfra() {\n    return (this.state.agriAction === 'addInfra' || this.state.agriAction === 'transformToFarm') && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n        control: this.createCheckbox(\"checkboxEco\"),\n        label: \"infrastructure \\xE9cologique\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        control: this.createCheckbox(\"checkboxIrrig\"),\n        label: \"infrastructure d'irrigation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n  /* \n      Function : transformToCity\n       Syntax  : transformToCity\n       Output :  selectedBox=<>\n                              <FormControlLabel>\n                                  <CheckBox>\n                              </FormControlLabel>\n                              </> \n                              \n      Description : display checkBox to add a market \n       Author : Hugo KELHETTER\n      \n  */\n\n\n  transformToCity() {\n    return this.state.agriAction === \"transformToCity\" && /*#__PURE__*/_jsxDEV(FormControlLabel, {\n      control: this.createCheckbox(\"checkboxMarket\"),\n      label: \"Etablir un march\\xE9 local\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 63\n    }, this);\n  }\n  /* \n      Function : ComponentDidUpdate\n       Syntax  : ComponentDidUpdate(prevProps)\n                              \n      Description : if the selectedTile changes, update controls to the new tile's state\n       Author : Hugo KELHETTER\n      \n  */\n\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.selectedTile.id !== this.props.selectedTile.id) {\n      this.setState({\n        checkboxEco: this.props.selectedTile.eco,\n        checkboxIrrig: this.props.selectedTile.irrig,\n        checkboxMarket: this.props.selectedTile.market,\n        selectedReceiver: \"\"\n      });\n    }\n  }\n  /* \n      Function : render\n       Syntax  : render\n      \n      Description : Display all controls to update the map as an animator\n       Author : Hugo KELHETTER\n      \n  */\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(FormControl, {\n      component: \"fieldset\",\n      children: [this.props.selectedTile.mainCLC1 === \"1\"\n      /* city */\n      ?\n      /*#__PURE__*/\n      _jsxDEV(FormLabel, {\n        component: \"legend\",\n        children: this.props.selectedTile.market ? \"Supprimer le marché\" : \"Etablir un marché local\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 21\n      }, this) : this.props.selectedTile.mainCLC1 === \"2\"\n      /* farm */\n      ?\n      /*#__PURE__*/\n      _jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(RadioGroup, {\n          name: \"agriAction\",\n          value: this.state.agriAction,\n          onChange: this.handleChange,\n          children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: \"changeOwner\",\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 88\n            }, this),\n            label: \"donner la case\",\n            id: \"giveTile\"\n          }, \"1\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 33\n          }, this), this.selectedPlayer(), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: \"addInfra\",\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 85\n            }, this),\n            label: \"mettre en place des infrastructures\",\n            id: \"addInfra\"\n          }, \"2\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 33\n          }, this), this.addInfra(), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: \"transformToForest\",\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 94\n            }, this),\n            label: \"transformer en for\\xEAt\",\n            id: \"transformToForest\"\n          }, \"3\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 29\n        }, this)\n      }, void 0, false) : this.props.selectedTile.mainCLC1 === \"3\"\n      /* forest */\n      ?\n      /*#__PURE__*/\n      _jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(RadioGroup, {\n          \"aria-label\": \"type\",\n          name: \"agriAction\",\n          value: this.state.agriAction,\n          onChange: this.handleChange,\n          children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: \"transformToCity\",\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 96\n            }, this),\n            label: \"transformer en ville\"\n          }, \"1\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 37\n          }, this), this.transformToCity(), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: \"transformToFarm\",\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 96\n            }, this),\n            label: \"transformer en zone agricole\"\n          }, \"2\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 37\n          }, this), this.selectedPlayer(), this.addInfra()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 33\n        }, this)\n      }, void 0, false) :\n      /*#__PURE__*/\n\n      /* water */\n      _jsxDEV(RadioGroup, {\n        \"aria-label\": \"type\",\n        name: \"agriAction\",\n        value: this.state.agriAction,\n        onChange: this.handleChange,\n        children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n          value: \"transformToFarm\",\n          control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 92\n          }, this),\n          label: \"tranformer en zone agricole\"\n        }, \"1\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 33\n        }, this), this.selectedPlayer(), this.addInfra(), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          value: \"transformToForest\",\n          control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 94\n          }, this),\n          label: \"transformer en for\\xEAt\"\n        }, \"2\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        color: \"primary\",\n        \"data-testid\": \"submit\",\n        onClick: this.handleSubmit,\n        children: \"Valider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 17\n      }, this), warningText(this.state.feedBack)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/elouati/Bureau/client/src/Game/animator/ChangeTile.js"],"names":["React","FormControl","FormLabel","Radio","Select","MenuItem","RadioGroup","FormControlLabel","socket","getSubBassin","createCheckbox","Button","warningText","ChangeTile","Component","constructor","props","handleChange","event","target","value","type","checked","setState","name","modifyTile","problem","res","selectedTile","id","mainCLC1","market","emit","state","agriAction","ok","checkReceiver","cellPlayer","selectedReceiver","player","checkboxEco","eco","checkboxIrrig","irrig","checkboxMarket","console","log","handleSubmit","preventDefault","feedBack","change","updateMap","bind","action","selectedPlayer","tile","playerArray","lstPlayer","filter","Role","Id","bassin","map","i","Name","addInfra","transformToCity","componentDidUpdate","prevProps","render"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Radio from '@material-ui/core/Radio';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { socket } from \"../../socket.js\"\nimport { getSubBassin } from \"../map/MapUtil.js\"\nimport createCheckbox from \"../controls/createCheckbox.js\"\nimport { Button } from '@material-ui/core'\nimport warningText from \"../controls/warningText.js\"\nexport default class ChangeTile extends React.Component {\n    constructor(props) {\n        super(props)\n        //this.handleChange = this.handleChange.bind(this)\n        //this.handleSubmit = this.handleSubmit.bind(this)\n        //this.modifyTile = this.modifyTile.bind(this)\n        this.createCheckbox = createCheckbox.bind(this)\n        this.state = {\n            agriAction: \"\", action: \"\", selectedReceiver: \"\", feedBack: \"\",\n            checkboxEco: !!this.props.selectedTile.eco, checkboxIrrig: !!this.props.selectedTile.irrig,\n            checkboxMarket: !!this.props.selectedTile.market\n        }\n    }\n    /* \n            Function : handleChange\n    \n            Syntax  : handleChange\n    \n            Input   : event : the event calling the function        \n    \n            Description : update the form controls's state\n    \n            Author : Hugo KELHETTER\n        \n    */\n    handleChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? +target.checked : target.value;\n        this.setState({ [target.name]: value });\n    }\n    /* \n        Function : checkReceiver\n\n        Syntax  : resString=checkReceiver(res)\n\n        Input   : res : object : contains the key/value pair selectedReceiver:player's id  \n        \n        Output  : resString : string : string explaining what went wrong in the submission\n\n        Description : check if res.selectedReceiver equals this.state.selectedReceiver or \"\" and returns a string according to it\n\n        Author : Hugo KELHETTER\n    \n    */\n    checkReceiver(res) {\n        res.selectedReceiver = this.state.selectedReceiver\n        if (this.state.selectedReceiver === \"\") return \"selectionnez le joueur qui reçoit la case\"\n        if (this.state.selectedReceiver === this.props.selectedTile.player) return \"le donneur et le receveur ne peuvent pas être la même personne\"\n\n        return \"\"\n    }\n    /* \n            Function : modifyTile\n    \n            Syntax  : [resString,res]=modifyTile()\n    \n            Output : resString : string : string explaining what went wrong in the submission\n                     res : object : contains the modifications sent to the server\n    \n            Description : check the form submission and return a log of it and an object containing the modifications\n                        if everything is fine, send to the server the modifications\n    \n            Author : Hugo KELHETTER\n        \n        */\n    modifyTile = () => {\n        const [problem] = \"quelque chose s'est mal passé\"\n        let res = { selectedTile: this.props.selectedTile.id }\n        switch (this.props.selectedTile.mainCLC1) {\n            case \"1\":\n                res = { ...res, market: +!this.props.selectedTile.market }\n                //res = { ...res, infrastructure: 0, market: 1, newActivity: 0 }\n                socket.emit(\"setMarket\", res)\n                return [\"\", res]\n            case \"2\":\n                switch (this.state.agriAction) {\n                    case \"\":\n                        return [\"selectionnez l'action à effectuer\"]\n                    case \"changeOwner\":\n                        const ok = this.checkReceiver(res)\n                        if (ok === \"\") socket.emit(\"changeOwner\", res)\n                        res.cellPlayer = res.selectedReceiver\n                        res.player = res.selectedReceiver\n                        delete res.selectedReceiver\n                        return [ok, res]\n                    case \"addInfra\":\n                        if (this.state.checkboxEco === this.props.selectedTile.eco && this.state.checkboxIrrig === this.props.selectedTile.irrig) {\n                            return [\"rien n'a changé\"]\n                        }\n                        res = { ...res, eco: this.state.checkboxEco, irrig: this.state.checkboxIrrig }\n                        socket.emit(\"addInfra\", res)\n                        return [\"\", res]\n                    case \"transformToForest\":\n                        socket.emit(\"transformToForest\", res.selectedTile)\n                        res.mainCLC1 = 3\n                        return [\"\", res]\n                    default:\n                        return [problem]\n                }\n\n            case \"3\":\n                switch (this.state.agriAction) {\n\n                    case \"\":\n                        return [\"selectionnez l'action à effectuer\"]\n                    case \"transformToCity\":\n                        res = { ...res, market: this.state.checkboxMarket }\n                        socket.emit(\"transformToCity\", res)\n                        res.mainCLC1 = 1\n                        return [\"\", res]\n                    case \"transformToFarm\":\n                        res = {\n                            ...res, selectedReceiver: this.state.selectedReceiver,\n                            eco: this.state.checkboxEco, irrig: this.state.checkboxIrrig\n                        }\n                        const ok = this.checkReceiver(res)\n                        if (ok === \"\") socket.emit(\"transformToFarm\", res)\n                        res.mainCLC1 = 2\n                        return [ok, res]\n                    default:\n                        return [problem]\n                }\n            case \"5\":\n                switch (this.state.agriAction) {\n                    case \"\":\n                        return [\"selectionnez l'action à effectuer\"]\n                    case \"transformToFarm\":\n                        res = {\n                            ...res, selectedReceiver: this.state.selectedReceiver,\n                            eco: this.state.checkboxEco, irrig: this.state.checkboxIrrig\n                        }\n                        const ok = this.checkReceiver(res)\n                        if (ok === \"\") socket.emit(\"transformToFarm\", res)\n                        res.mainCLC1 = 2\n                        return [ok, res]\n                    case \"transformToForest\":\n                        console.log(\"a\")\n                        socket.emit(\"transformToForest\", res.selectedTile)\n                        res.mainCLC1 = 3\n                        return [\"\", res]\n                    default:\n                        return [problem]\n                }\n            default:\n                return [problem]\n        }\n    }\n    /* \n            Function : handleSubmit\n    \n            Syntax  : handleSubmit\n    \n            Description : call modifyTile. If it succeeded, update map, else display message to explain what went wrong\n    \n            Author : Hugo KELHETTER\n        \n    */\n    handleSubmit = (event) => {\n        event.preventDefault()\n        const [feedBack, change] = this.modifyTile()\n        if (feedBack === \"\") this.props.updateMap(change)\n        this.setState({ feedBack })\n    }\n    /* \n        Function : selectedPLayer\n\n        Syntax  : selectedBox=selectedPlayer()\n\n        Output :  selectedBox=<>\n                                <FormLabel>\n                                <Select>\n                                    <MenuItem/>\n                                </Select>\n                                </> \n                                \n        Description : display a selectedBox containing the farmer present in the \n                        same sub basin as the selected tile\n\n        Author : Hugo KELHETTER\n        \n    */\n    selectedPlayer() {\n        const tile = this.props.selectedTile\n\n        let playerArray = this.props.lstPlayer.filter(player => (player.Role < 9 && getSubBassin(player.Id) === tile.bassin && player.Id !== tile.player))\n        return (this.state.agriAction === \"changeOwner\" || this.state.agriAction === \"transformToFarm\") && <>\n            <FormLabel component=\"legend\">Qui reçoit cette case ?</FormLabel>\n            <Select name=\"selectedReceiver\" labelId=\"selectedReceiver\"\n                value={this.state.selectedReceiver} onChange={this.handleChange}>\n                {playerArray.map((player, i) =>\n                    <MenuItem value={player.Id} key={player.Id}>{player.Name} : joueur {player.Id} </MenuItem>\n                )}\n            </Select>\n        </>\n    }\n    /* \n        Function : addInfra\n\n        Syntax  : selectedBoxes=addInfra()\n\n        Output :  selectedBoxes=<>\n                                <FormControlLabel>\n                                    <CheckBox>\n                                </FormControlLabel>\n                                <FormControlLabel>\n                                    <CheckBox>\n                                </FormControlLabel>\n                                </> \n                                \n        Description : display checkBoxes to add infrastructures\n\n        Author : Hugo KELHETTER\n        \n    */\n    addInfra() {\n        return (this.state.agriAction === 'addInfra' || this.state.agriAction === 'transformToFarm') && <>\n            < FormControlLabel\n                control={\n                    this.createCheckbox(\"checkboxEco\")\n                }\n                label=\"infrastructure écologique\"\n            />\n            <FormControlLabel\n                control={\n                    this.createCheckbox(\"checkboxIrrig\")\n                }\n                label=\"infrastructure d'irrigation\"\n            />\n        </>\n    }\n    /* \n        Function : transformToCity\n\n        Syntax  : transformToCity\n\n        Output :  selectedBox=<>\n                                <FormControlLabel>\n                                    <CheckBox>\n                                </FormControlLabel>\n                                </> \n                                \n        Description : display checkBox to add a market \n\n        Author : Hugo KELHETTER\n        \n    */\n    transformToCity() {\n        return this.state.agriAction === \"transformToCity\" && <FormControlLabel\n            control={\n                this.createCheckbox(\"checkboxMarket\")\n            }\n            label=\"Etablir un marché local\"\n        />\n    }\n    /* \n        Function : ComponentDidUpdate\n\n        Syntax  : ComponentDidUpdate(prevProps)\n                                \n        Description : if the selectedTile changes, update controls to the new tile's state\n\n        Author : Hugo KELHETTER\n        \n    */\n    componentDidUpdate(prevProps) {\n        if (prevProps.selectedTile.id !== this.props.selectedTile.id) {\n            this.setState({\n                checkboxEco: this.props.selectedTile.eco,\n                checkboxIrrig: this.props.selectedTile.irrig,\n                checkboxMarket: this.props.selectedTile.market,\n                selectedReceiver: \"\"\n            })\n\n        }\n    }\n    /* \n        Function : render\n\n        Syntax  : render\n        \n        Description : Display all controls to update the map as an animator\n\n        Author : Hugo KELHETTER\n        \n    */\n    render() {\n        return (\n            <FormControl component=\"fieldset\">\n                {this.props.selectedTile.mainCLC1 === \"1\" /* city */ ?\n\n                    <FormLabel component=\"legend\">{this.props.selectedTile.market ? \"Supprimer le marché\" : \"Etablir un marché local\"}</FormLabel>\n                    : this.props.selectedTile.mainCLC1 === \"2\" /* farm */ ?\n                        <>\n                            <RadioGroup name=\"agriAction\" value={this.state.agriAction} onChange={this.handleChange} >\n                                <FormControlLabel key=\"1\" value=\"changeOwner\" control={<Radio />} label=\"donner la case\" id=\"giveTile\" />\n                                {this.selectedPlayer()}\n                                <FormControlLabel key=\"2\" value=\"addInfra\" control={<Radio />} label=\"mettre en place des infrastructures\" id=\"addInfra\" />\n                                {this.addInfra()}\n                                <FormControlLabel key=\"3\" value=\"transformToForest\" control={<Radio />} label=\"transformer en forêt\" id=\"transformToForest\" />\n\n                            </RadioGroup>\n                        </>\n                        : this.props.selectedTile.mainCLC1 === \"3\" /* forest */ ?\n                            <>\n\n                                <RadioGroup aria-label=\"type\" name=\"agriAction\" value={this.state.agriAction} onChange={this.handleChange}>\n                                    <FormControlLabel key=\"1\" value=\"transformToCity\" control={<Radio />} label=\"transformer en ville\" />\n                                    {this.transformToCity()}\n                                    <FormControlLabel key=\"2\" value=\"transformToFarm\" control={<Radio />} label=\"transformer en zone agricole\" />\n                                    {this.selectedPlayer()}\n                                    {this.addInfra()}\n\n                                </RadioGroup>\n\n                            </> : /* water */\n                            <RadioGroup aria-label=\"type\" name=\"agriAction\" value={this.state.agriAction} onChange={this.handleChange}>\n                                <FormControlLabel key=\"1\" value=\"transformToFarm\" control={<Radio />} label=\"tranformer en zone agricole\" />\n                                {this.selectedPlayer()}\n                                {this.addInfra()}\n\n                                <FormControlLabel key=\"2\" value=\"transformToForest\" control={<Radio />} label=\"transformer en forêt\" />\n                            </RadioGroup>\n                }\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\" data-testid=\"submit\" onClick={this.handleSubmit}>Valider</Button>\n                {warningText(this.state.feedBack)}\n            </FormControl>\n\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}