{"ast":null,"code":"import _slicedToArray from\"/home/elouati/Bureau/projet_working/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{createContext,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";var TimerContext=/*#__PURE__*/createContext({timers:[],updateTimers:function updateTimers(timer){}/*timerUpdating: [],\n    timerStrategy: [],\n    timerActions: [],\n    timerEvents: [],\n    timerDebriefing: [],\n    timerSatisfaction: [],\n    timerResults: [],\n    updateTimerUpdating: (timer) => { },\n    updateTimerStrategy: (timer) => { },\n    updateTimerActions: (timer) => { },\n    updateTimerEvents: (timer) => { },\n    updateTimerDebriefing: (timer) => { },\n    updateTimerSatisfaction: (timer) => { },\n    updateTimerResults: (timer) => { }*/});export function TimerContextProvider(props){/*const [updating, setUpdating] = useState([]);\n    const [strategy, setStrategy] = useState([]);\n    const [actions, setActions] = useState([]);\n    const [events, setEvents] = useState([]);\n    const [debriefing, setDebriefing] = useState([]);\n    const [satisfaction, setSatisfaction] = useState([]);\n    const [results, setResults] = useState([]);*/var _useState=useState([]),_useState2=_slicedToArray(_useState,2),timers=_useState2[0],setTimers=_useState2[1];function updateTimersHandler(timer){setTimers(timer);}/*function updateTimerUpdatingHandler(timer) {\n        console.log(\"HANDLER = \", timer);\n        setUpdating(timer);\n    }\n    function updateTimerStrategyHandler(timer) {\n        setStrategy(timer);\n    }\n    function updateTimerActionsHandler(timer) {\n        setActions(timer);\n    }\n    function updateTimerEventsHandler(timer) {\n        setEvents(timer);\n    }\n    function updateTimerDebriefingHandler(timer) {\n        setDebriefing(timer);\n    }\n    function updateTimerSatisfactionHandler(timer) {\n        setSatisfaction(timer);\n    }\n    function updateTimerResultsHandler(timer) {\n        setResults(timer);*/var context={/*timerUpdating: updating,\n        timerStrategy: strategy,\n        timerActions: actions,\n        timerEvents: events,\n        timerDebriefing: debriefing,\n        timerSatisfaction: satisfaction,\n        timerResults: results,\n        updateTimerUpdating: updateTimerUpdatingHandler,\n        updateTimerStrategy: updateTimerStrategyHandler,\n        updateTimerActions: updateTimerActionsHandler,\n        updateTimerEvents: updateTimerEventsHandler,\n        updateTimerDebriefing: updateTimerDebriefingHandler,\n        updateTimerSatisfaction: updateTimerSatisfactionHandler,\n        updateTimerResults: updateTimerResultsHandler*/timers:timers,updateTimers:updateTimersHandler};return/*#__PURE__*/_jsx(TimerContext.Provider,{value:context,children:props.children});}export default TimerContext;","map":{"version":3,"sources":["/home/elouati/Bureau/projet_working/client/src/Game/animator/timers-context.js"],"names":["createContext","useState","TimerContext","timers","updateTimers","timer","TimerContextProvider","props","setTimers","updateTimersHandler","context","children"],"mappings":"iKAAA,OAASA,aAAT,CAAwBC,QAAxB,KAAwC,OAAxC,C,2CAEA,GAAMC,CAAAA,YAAY,cAAGF,aAAa,CAAC,CAC/BG,MAAM,CAAE,EADuB,CAE/BC,YAAY,CAAE,sBAACC,KAAD,CAAW,CAAG,CAC5B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAhBmC,CAAD,CAAlC,CAmBA,MAAO,SAASC,CAAAA,oBAAT,CAA8BC,KAA9B,CAAqC,CAExC;AACJ;AACA;AACA;AACA;AACA;AACA,iDACI,cAA4BN,QAAQ,CAAC,EAAD,CAApC,wCAAOE,MAAP,eAAeK,SAAf,eACA,QAASC,CAAAA,mBAAT,CAA6BJ,KAA7B,CAAoC,CAChCG,SAAS,CAACH,KAAD,CAAT,CACH,CAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAEI,GAAMK,CAAAA,OAAO,CAAG,CACZ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDACQP,MAAM,CAAEA,MAfI,CAgBZC,YAAY,CAAEK,mBAhBF,CAAhB,CAmBA,mBAAO,KAAC,YAAD,CAAc,QAAd,EAAuB,KAAK,CAAEC,OAA9B,UACFH,KAAK,CAACI,QADJ,EAAP,CAGH,CAED,cAAeT,CAAAA,YAAf","sourcesContent":["import { createContext, useState } from 'react';\n\nconst TimerContext = createContext({\n    timers: [],\n    updateTimers: (timer) => { }\n    /*timerUpdating: [],\n    timerStrategy: [],\n    timerActions: [],\n    timerEvents: [],\n    timerDebriefing: [],\n    timerSatisfaction: [],\n    timerResults: [],\n    updateTimerUpdating: (timer) => { },\n    updateTimerStrategy: (timer) => { },\n    updateTimerActions: (timer) => { },\n    updateTimerEvents: (timer) => { },\n    updateTimerDebriefing: (timer) => { },\n    updateTimerSatisfaction: (timer) => { },\n    updateTimerResults: (timer) => { }*/\n});\n\nexport function TimerContextProvider(props) {\n\n    /*const [updating, setUpdating] = useState([]);\n    const [strategy, setStrategy] = useState([]);\n    const [actions, setActions] = useState([]);\n    const [events, setEvents] = useState([]);\n    const [debriefing, setDebriefing] = useState([]);\n    const [satisfaction, setSatisfaction] = useState([]);\n    const [results, setResults] = useState([]);*/\n    const [timers, setTimers] = useState([]);\n    function updateTimersHandler(timer) {\n        setTimers(timer);\n    }\n\n    /*function updateTimerUpdatingHandler(timer) {\n        console.log(\"HANDLER = \", timer);\n        setUpdating(timer);\n    }\n    function updateTimerStrategyHandler(timer) {\n        setStrategy(timer);\n    }\n    function updateTimerActionsHandler(timer) {\n        setActions(timer);\n    }\n    function updateTimerEventsHandler(timer) {\n        setEvents(timer);\n    }\n    function updateTimerDebriefingHandler(timer) {\n        setDebriefing(timer);\n    }\n    function updateTimerSatisfactionHandler(timer) {\n        setSatisfaction(timer);\n    }\n    function updateTimerResultsHandler(timer) {\n        setResults(timer);*/\n\n    const context = {\n        /*timerUpdating: updating,\n        timerStrategy: strategy,\n        timerActions: actions,\n        timerEvents: events,\n        timerDebriefing: debriefing,\n        timerSatisfaction: satisfaction,\n        timerResults: results,\n        updateTimerUpdating: updateTimerUpdatingHandler,\n        updateTimerStrategy: updateTimerStrategyHandler,\n        updateTimerActions: updateTimerActionsHandler,\n        updateTimerEvents: updateTimerEventsHandler,\n        updateTimerDebriefing: updateTimerDebriefingHandler,\n        updateTimerSatisfaction: updateTimerSatisfactionHandler,\n        updateTimerResults: updateTimerResultsHandler*/\n        timers: timers,\n        updateTimers: updateTimersHandler\n    };\n\n    return <TimerContext.Provider value={context}>\n        {props.children}\n    </TimerContext.Provider>\n}\n\nexport default TimerContext;"]},"metadata":{},"sourceType":"module"}