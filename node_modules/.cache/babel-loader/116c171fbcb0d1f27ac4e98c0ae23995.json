{"ast":null,"code":"var _jsxFileName = \"/home/elouati/Bureau/projet_working/client/src/Game/Game.js\";\nimport React, { useContext } from 'react';\nimport { generateHexes, generateRivers, getSubBassin } from \"./map/MapUtil.js\";\nimport Bassin from \"./map/Bassin.js\";\nimport ActivitySwapper from \"./controls/ActivitySwapper.js\";\nimport ValidationTour from \"./controls/ValidationTour.js\";\nimport handleClickTile from './controls/handleClickTileFarmer.js';\nimport Chat from \"./Chat.js\";\nimport { socket } from \"../socket.js\";\nimport Ressources from \"./controls/Ressources.js\";\nimport '../index.css';\nimport PropTypes from 'prop-types';\nimport SlideField from \"./controls/SlideField.js\";\nimport Menu from \"./controls/Menu.js\";\nimport Diary from \"./Diary.js\";\nimport roleToString from '../Interface/utils/roleToString';\nimport { Button } from '@material-ui/core';\nimport Updating from \"../Interface/Updating/Updating\";\nimport { nameSubBassin } from \"./map/MapUtil.js\";\nimport MenuContext from \"../Menu/menu-context\";\nimport InterfaceContext from \"./interface-context\";\nimport Strategy from \"../Interface/Strategy/Strategy\";\nimport Events from \"../Interface/Events/Events\";\nimport Debriefing from \"../Interface/Debriefing/Debriefing\";\nimport Style from \"../Interface/Strategy/Strategy.module.scss\";\nimport Pratiques from \"../Interface/ActionChoice/Pratiques\";\nimport DetailsParcelle from \"../Interface/ActionChoice/DetailsParcelle\";\nimport Header from \"../Interface/Header/Header\";\nimport MenuRight from \"../Interface/MenuRight/MenuRight\";\nimport StylePratique from \"../Interface/ActionChoice/Pratiques.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Conteneur extends React.Component {\n  /* \n      Input : props={name,role}\n              name : string : player's name\n              role : number : player's name\n       Syntax : <Game name={name} role={role} />\n  */\n  constructor(props) {\n    super(props); //this.changeTileActivity = this.changeTileActivity.bind(this)\n\n    this.changeTileActivity = (value, changeAll) => {\n      const hexagons = this.state.map.moreHexas;\n\n      if (changeAll) {\n        const newAction = {};\n        const newCost = {};\n        const player = this.state.id; //const player = hexagons[this.state.selectedTile.id].player\n\n        Object.values(hexagons).forEach(hex => {\n          if (hex.player === player) {\n            hex.modified = true;\n            newAction[hex.Id] = value.Id;\n            newCost[hex.Id] = {\n              ub: value.Intrants,\n              ut: value.Travail\n            };\n          }\n        });\n        this.setState({\n          actions: newAction,\n          cost: newCost\n        });\n      } else {\n        let cost = this.state.cost;\n        cost[this.state.selectedTile.id] = {\n          ub: value.Intrants,\n          ut: value.Travail\n        };\n        this.setState({\n          actions: { ...this.state.actions,\n            [this.state.selectedTile.id]: value.Id,\n            cost\n          }\n        });\n        hexagons[this.state.selectedTile.id - 1].modified = true;\n      }\n\n      this.setState({\n        map: { ...this.state.map,\n          moreHexas: hexagons\n        },\n        selectedTile: null\n      });\n      /*\n               fetch(\"https://formsubmit.co/ajax/b6d145cfd9512d53d10dd9f9a938ae75\", {\n              method: \"POST\",\n              headers: {\n                  'Content-Type': 'application/json',\n                  'Accept': 'application/json'\n              },\n              body: JSON.stringify({\n                  name: \"FormSubmit\",\n                  message: JSON.stringify(this.state.map.moreHexas[0])\n              })\n          })\n              .then(response => response.json())\n              .then(data => console.log(data))\n              .catch(error => console.log(error));\n      */\n    };\n\n    this.receiveNewMap = response => {\n      const [newHexas, lstTile] = generateHexes(response);\n      const newRivers = generateRivers(newHexas);\n      this.setState({\n        map: { ...this.state.map,\n          moreHexas: newHexas,\n          moreRivers: newRivers\n        },\n        lstTile\n      });\n    };\n\n    this.endRound = () => {\n      this.setState({\n        fini: true,\n        action: {}\n      });\n    };\n\n    this.closeDiary = () => {\n      this.setState({\n        displayDiary: false\n      });\n    };\n\n    this.displayDiary = () => {\n      this.setState({\n        displaySlider: false,\n        displayDiary: true\n      });\n    };\n\n    this.handleClickTile = handleClickTile.bind(this); //this.a = this.a.bind(this)\n\n    this.state = {\n      map: {\n        moreHexas: \"\",\n        moreRivers: null\n      },\n      selectedTile: null,\n      HexasTampon: null,\n      cost: {},\n      tour: 0,\n      fini: false,\n      actions: {},\n      lstConvo: {},\n      displayDiary: false,\n      disconnected: false,\n      displaySlider: false,\n      inputPhase: true,\n      interfaceCtx: 1\n    };\n  }\n\n  /* \n      Function : createTampon\n  \n      Syntax  : HexasTampon=createTampon(moreHexas)\n      \n      Input   : moreHexas : object containing data to create hexagons\n          \n      Outputs : HexasTampon : a copy of moreHexas containing a subset of entries\n  \n      Description : \n          create a copy of moreHexas containing a subset of entries of moreHexas.\n          the remaining entries are those the players can change directly.\n       Author : Hugo KELHETTER\n  --------------------------------------------------------------------------------------------------------\n  not in current use\n  --------------------------------------------------------------------------------------------------------\n  */\n  createTampon(moreHexas, player) {\n    let HexasTampon = {};\n\n    for (const key in moreHexas) {\n      if (moreHexas[key].player === player) {\n        let hex = {};\n        hex.activity = moreHexas[key].activity;\n        hex.player = moreHexas[key].player;\n        HexasTampon[key] = hex;\n      }\n    }\n\n    return HexasTampon;\n  }\n  /* \n      Function : updateMap\n  \n      Syntax  : updateMap(newData)\n              \n      Input   : object containing the data to update the state\n          \n      Description : update the state of the map with new data received from the server. call createTampon automatically\n      \n      Author : Hugo KELHETTER\n  */\n\n\n  updateMap(newData) {\n    const newHexas = {};\n\n    for (const index in newData) {\n      let newValues = this.state.map.moreHexas;\n\n      for (const key in newData[index]) {\n        newValues[key] = newData[index][key];\n      }\n\n      newHexas[index] = newValues;\n    }\n\n    this.setState({\n      moreHexas: newHexas,\n      cost: {}\n    }); //this.createTampon(this.state.map.moreHexas, this.state.map.player)\n  }\n  /* \n      Function : changeTileActivity\n  \n      Syntax\n          changeTileActivity(value,changeAll)\n              \n      Input\n          value       :new value for the selectedTile's activity\n          changeAll   :false:only change the selectedTile's activity\n                      :true :change all tiles from the player\n  \n      Description\n          updates the state in 2 ways:\n              changes the selectedTile or all tiles depending on the value of changeAll\n              set the state value of selectedTile to null  \n              \n      Author : Hugo KELHETTER\n  */\n\n\n  /* \n      Function : componentDidMount\n  \n      Description : subscribe to the required function from server to keep up to date\n       Author : Hugo KELHETTER\n          \n  */\n  componentDidMount() {\n    socket.emit(\"getTurn\", response => {\n      this.setState({\n        tour: response\n      });\n    });\n    socket.emit(\"getPlayerActivity\", this.state.id, response => {\n      console.log(\"GET PLAYER ACTIVITY IS : \", response);\n    });\n    socket.on(\"disconnect\", () => {\n      this.setState({\n        disconnected: true\n      });\n    });\n    socket.on(\"connect\", () => {\n      if (this.state.disconnected) {\n        socket.emit('reconnect', this.props.room, this.props.name, () => {\n          this.setState({\n            disconnected: false\n          });\n        });\n      }\n    });\n\n    if (this.props.role < 10) {\n      socket.emit(\"updateStats\", response => {\n        this.setState({\n          ressources: response[0]\n        });\n      });\n    }\n\n    socket.on(\"results\", response => {\n      this.setState({\n        ressources: response.stats,\n        data: response.graph,\n        fini: false,\n        displaySlider: true,\n        inputPhase: false\n      });\n      socket.emit(\"getTurn\", response => {\n        this.setState({\n          tour: response\n        });\n      });\n      this.setState({\n        actions: {}\n      });\n      socket.emit(\"getCurrentGrid\", response => {\n        this.receiveNewMap(response);\n      }); //    this.setState({ ressources: response[0] })\n    });\n    /*  socket.emit(\"createRoom\", \"player1\", 0, (responseCreateRoom) => {\n         this.setState({ room: responseCreateRoom })\n         socket.emit(\"startGame\")*/\n\n    socket.on(\"inputPhase\", () => {\n      console.log(\"aaaaaaaa\");\n      socket.emit(\"getCurrentGrid\", response => {\n        this.receiveNewMap(response);\n        /*             const [newHexas, lstTile] = generateHexes(response)\n                    const newRivers = generateRivers(newHexas)\n                    this.setState({ map: { ...this.state.map, moreHexas: newHexas, moreRivers: newRivers }, lstTile })\n         */\n      });\n      this.setState({\n        inputPhase: true\n      });\n    });\n    socket.emit(\"getCurrentGrid\", response => {\n      this.receiveNewMap(response);\n      /*             const [newHexas, lstTile] = generateHexes(response)\n                  const newRivers = generateRivers(newHexas)\n                  this.setState({ map: { ...this.state.map, moreHexas: newHexas, moreRivers: newRivers }, lstTile })\n       */\n    });\n    socket.emit(\"getAllActions\", response => {\n      this.setState({\n        lstActions: response\n      });\n    });\n    socket.emit(\"playersInRoom\", response => {\n      const player = response.filter((player, i) => player.Name === this.props.name);\n      this.setState({\n        lstPlayer: response,\n        id: player[0].Id\n      }); //})\n    });\n  }\n\n  componentWillUnmount() {\n    socket.removeAllListeners();\n  }\n\n  openTuto() {\n    window.open(`${window.location.href}tutorial?tuto=3`);\n  }\n\n  displaySlideField() {\n    return /*#__PURE__*/_jsxDEV(SlideField, {\n      name: this.props.name,\n      displayDiary: this.displayDiary\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 16\n    }, this);\n  }\n\n  actionChoice() {\n    var _this$state$selectedT, _this$state$selectedT2;\n\n    console.log(this.state.inputPhase);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        tour: this.state.tour,\n        role: this.props.role,\n        pseudo: this.props.name,\n        bassin: nameSubBassin(getSubBassin(this.state.id)),\n        numeroPhase: 3,\n        h: 1,\n        m: 1,\n        s: 30,\n        finishEvent: null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-2\",\n          children: /*#__PURE__*/_jsxDEV(MenuRight, {\n            ut: 23,\n            ub: 33,\n            formations: [],\n            role: this.props.role,\n            pseudo: this.props.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-10\",\n          children: [Object.keys(this.state.lstConvo).length > 0 ? /*#__PURE__*/_jsxDEV(Chat, {\n            lstConvo: this.state.lstConvo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 68\n          }, this) : \"\", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm-8\",\n              children: /*#__PURE__*/_jsxDEV(\"section\", {\n                children: this.state.map.moreHexas !== \"\" && /*#__PURE__*/_jsxDEV(Bassin, {\n                  handleClick: this.handleClickTile,\n                  map: this.state.map,\n                  role: this.props.role,\n                  selectedId: (_this$state$selectedT = this.state.selectedTile) === null || _this$state$selectedT === void 0 ? void 0 : _this$state$selectedT.id,\n                  id: this.state.id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 314,\n                  columnNumber: 72\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-sm-4\",\n              children: [/*#__PURE__*/_jsxDEV(DetailsParcelle, {\n                id: (_this$state$selectedT2 = this.state.selectedTile) === null || _this$state$selectedT2 === void 0 ? void 0 : _this$state$selectedT2.practice,\n                currentActivity: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 29\n              }, this), this.state.selectedTile === null ? null : /*#__PURE__*/_jsxDEV(\"section\", {\n                className: StylePratique.classNameSection,\n                onClick: () => {\n                  this.setState({\n                    interfaceCtx: 0\n                  });\n                },\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-center\",\n                  children: \"Choisir une activit\\xE9\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 323,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => this.setState({\n                  interfaceCtx: 4\n                }),\n                children: \"Next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n  /*\n      author : Hossam ELOUATI\n   */\n\n  /*< div className=\"App\" >\n                  {this.state.displayDiary &&\n                      <Diary nom={this.props.name} data={this.state.data} closeDiary={this.closeDiary} />}\n                  <Menu >\n                      {this.state.inputPhase ?\n                          <div id=\"menu\">\n                              <Button variant=\"contained\" color=\"primary\" onClick={this.openTuto}>Aide</Button>\n                              <p>Nous sommes au tour : {this.state.tour}</p>\n                              <p>Bonjour {this.props.name}. Vous êtes {roleToString(this.props.role)}, votre identifiant est {this.state.id}</p>\n                              {this.state.ressources !== undefined && <Ressources ressources={this.state.ressources} cost={this.state.cost} />}\n                              {!this.state.fini ?\n                                  <>\n                                      {console.log(\"SELECTED TILE = \", this.state.selectedTile)}\n                                      {this.state.selectedTile === null ? \"\" :\n                                          <ActivitySwapper key=\"changeActivity\" changeTileActivity={this.changeTileActivity}\n                                              selectedTile={this.state.selectedTile} actions={this.state.lstActions} />\n                                      }\n                                      {console.log(\"LIST ACTIONS = \", this.state.lstActions)}\n                                      <ValidationTour key=\"validation\" endRound={this.endRound} tour={this.state.tour} actions={this.state.actions} />\n                                  </>\n                                  : \" En attente des autres joueurs...\"}\n                          </div> : \"L'animateur est en train de modifier la carte\"}\n                  </Menu>\n                  {Object.keys(this.state.lstConvo).length > 0 ? <Chat lstConvo={this.state.lstConvo} /> : \"\"}\n                  <div className=\"row\">\n                      <div className=\"col-sm-6\">\n                          {\n                              this.state.map.moreHexas !== \"\" && <Bassin handleClick={this.handleClickTile}\n                                                                         map={this.state.map} role={this.props.role} selectedId={this.state.selectedTile?.id} id={this.state.id} />\n                          }\n                      </div>\n                      <div className=\"col-sm-6\">\n                          <DetailsParcelle id={this.state.selectedTile?.practice} currentActivity={this.state.selectedTile?.name}/>\n                      </div>\n                  </div>\n  \n  \n              </div >*/\n\n\n  pratiques() {\n    return /*#__PURE__*/_jsxDEV(Pratiques, {\n      onClickEvent: () => {\n        this.setState({\n          interfaceCtx: 3\n        });\n      },\n      changeTileActivity: this.changeTileActivity,\n      selectedTile: this.state.selectedTile,\n      actions: this.state.lstActions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 13\n    }, this);\n  }\n\n  updating() {\n    return /*#__PURE__*/_jsxDEV(Updating, {\n      ut: 23,\n      ub: 3,\n      oldUb: -1,\n      oldUt: 0,\n      formations: [1, 0, 9, 1],\n      role: this.props.role,\n      pseudo: this.props.name,\n      bassin: nameSubBassin(getSubBassin(this.state.id)),\n      tour: this.state.tour,\n      onClickEvent: () => this.setState({\n        interfaceCtx: 2\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 13\n    }, this);\n  }\n\n  strategy() {\n    return /*#__PURE__*/_jsxDEV(Strategy, {\n      h: 0,\n      m: 2,\n      s: 10,\n      role: this.props.role,\n      listPlayers: [\"Hossam\", \"Rien\", \"Plus\", \"Au\", \"CR\"],\n      pseudo: this.props.name,\n      bassin: nameSubBassin(getSubBassin(this.state.id)),\n      tour: this.state.tour,\n      formations: [1, 0, 1, 1],\n      ut: 23,\n      ub: 23,\n      onClickEvent: () => this.setState({\n        interfaceCtx: 3\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 13\n    }, this);\n  }\n\n  events() {\n    return /*#__PURE__*/_jsxDEV(Events, {\n      pseudo: this.props.name,\n      bassin: nameSubBassin(getSubBassin(this.state.id)),\n      tour: this.state.tour,\n      formations: [1, 0, 1, 1],\n      indicateurs: [123, 56],\n      ut: 23,\n      ub: 23,\n      meteorology: [[0, 1], [2, 1], [2, 3]],\n      role: this.props.role,\n      maladie: true,\n      onClickEvent: () => this.setState({\n        interfaceCtx: 5\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 13\n    }, this);\n  }\n\n  debriefing() {\n    return /*#__PURE__*/_jsxDEV(Debriefing, {\n      h: 0,\n      m: 2,\n      s: 10,\n      role: this.props.role,\n      pseudo: this.props.name,\n      bassin: nameSubBassin(getSubBassin(this.state.id)),\n      tour: this.state.tour,\n      formations: [1, 0, 1, 1],\n      ut: 23,\n      ub: 23,\n      onClickEvent: () => this.setState({\n        interfaceCtx: 6\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: this.state.interfaceCtx === 1 ? this.updating() : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.interfaceCtx === 2 && this.strategy(), this.state.interfaceCtx === 3 && this.actionChoice(), this.state.interfaceCtx === 4 && this.events(), this.state.interfaceCtx === 5 && this.debriefing(), this.state.interfaceCtx === 6 && this.displaySlideField(), this.state.interfaceCtx === 0 && this.pratiques()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 25\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nConteneur.propTypes = {\n  name: PropTypes.string.isRequired,\n  role: PropTypes.number.isRequired\n};\nexport default Conteneur;\n/*\n\ngarder activités des derniers tours\nconserver les noms durant les formulaires\n\n*/","map":{"version":3,"sources":["/home/elouati/Bureau/projet_working/client/src/Game/Game.js"],"names":["React","useContext","generateHexes","generateRivers","getSubBassin","Bassin","ActivitySwapper","ValidationTour","handleClickTile","Chat","socket","Ressources","PropTypes","SlideField","Menu","Diary","roleToString","Button","Updating","nameSubBassin","MenuContext","InterfaceContext","Strategy","Events","Debriefing","Style","Pratiques","DetailsParcelle","Header","MenuRight","StylePratique","Conteneur","Component","constructor","props","changeTileActivity","value","changeAll","hexagons","state","map","moreHexas","newAction","newCost","player","id","Object","values","forEach","hex","modified","Id","ub","Intrants","ut","Travail","setState","actions","cost","selectedTile","receiveNewMap","response","newHexas","lstTile","newRivers","moreRivers","endRound","fini","action","closeDiary","displayDiary","displaySlider","bind","HexasTampon","tour","lstConvo","disconnected","inputPhase","interfaceCtx","createTampon","key","activity","updateMap","newData","index","newValues","componentDidMount","emit","console","log","on","room","name","role","ressources","stats","data","graph","lstActions","filter","i","Name","lstPlayer","componentWillUnmount","removeAllListeners","openTuto","window","open","location","href","displaySlideField","actionChoice","keys","length","practice","classNameSection","pratiques","updating","strategy","events","debriefing","render","propTypes","string","isRequired","number"],"mappings":"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","sourcesContent":["import React, {useContext} from 'react'\nimport {generateHexes, generateRivers, getSubBassin} from \"./map/MapUtil.js\"\nimport Bassin from \"./map/Bassin.js\"\nimport ActivitySwapper from \"./controls/ActivitySwapper.js\"\nimport ValidationTour from \"./controls/ValidationTour.js\"\nimport handleClickTile from './controls/handleClickTileFarmer.js'\nimport Chat from \"./Chat.js\"\nimport { socket } from \"../socket.js\"\nimport Ressources from \"./controls/Ressources.js\"\nimport '../index.css'\nimport PropTypes from 'prop-types';\nimport SlideField from \"./controls/SlideField.js\"\nimport Menu from \"./controls/Menu.js\"\nimport Diary from \"./Diary.js\"\nimport roleToString from '../Interface/utils/roleToString'\nimport { Button } from '@material-ui/core';\nimport Updating from \"../Interface/Updating/Updating\";\nimport {nameSubBassin} from \"./map/MapUtil.js\";\nimport MenuContext from \"../Menu/menu-context\";\nimport InterfaceContext from \"./interface-context\";\nimport Strategy from \"../Interface/Strategy/Strategy\";\nimport Events from \"../Interface/Events/Events\";\nimport Debriefing from \"../Interface/Debriefing/Debriefing\";\nimport Style from \"../Interface/Strategy/Strategy.module.scss\";\nimport Pratiques from \"../Interface/ActionChoice/Pratiques\";\nimport DetailsParcelle from \"../Interface/ActionChoice/DetailsParcelle\";\nimport Header from \"../Interface/Header/Header\";\nimport MenuRight from \"../Interface/MenuRight/MenuRight\";\nimport StylePratique from \"../Interface/ActionChoice/Pratiques.module.scss\";\n\nclass Conteneur extends React.Component {\n    /* \n        Input : props={name,role}\n                name : string : player's name\n                role : number : player's name\n\n        Syntax : <Game name={name} role={role} />\n    */\n    constructor(props) {\n        super(props)\n        //this.changeTileActivity = this.changeTileActivity.bind(this)\n        this.handleClickTile = handleClickTile.bind(this)\n        //this.a = this.a.bind(this)\n\n\n        this.state = {\n            map: { moreHexas: \"\", moreRivers: null },\n            selectedTile: null, HexasTampon: null,\n            cost: {},\n            tour: 0,\n            fini: false,\n            actions: {},\n            lstConvo: {},\n            displayDiary: false,\n            disconnected: false,\n            displaySlider: false,\n            inputPhase: true,\n            interfaceCtx: 1\n        }\n    }\n\n\n\n    static propTypes = {\n        name: PropTypes.string.isRequired,\n        role: PropTypes.number.isRequired\n    }\n    /* \n        Function : createTampon\n    \n        Syntax  : HexasTampon=createTampon(moreHexas)\n        \n        Input   : moreHexas : object containing data to create hexagons\n            \n        Outputs : HexasTampon : a copy of moreHexas containing a subset of entries\n    \n        Description : \n            create a copy of moreHexas containing a subset of entries of moreHexas.\n            the remaining entries are those the players can change directly.\n\n        Author : Hugo KELHETTER\n    --------------------------------------------------------------------------------------------------------\n    not in current use\n    --------------------------------------------------------------------------------------------------------\n    */\n    createTampon(moreHexas, player) {\n\n        let HexasTampon = {}\n        for (const key in moreHexas) {\n            if (moreHexas[key].player === player) {\n                let hex = {};\n                hex.activity = moreHexas[key].activity\n                hex.player = moreHexas[key].player\n                HexasTampon[key] = hex\n            }\n        }\n        return HexasTampon\n    }\n\n    /* \n        Function : updateMap\n    \n        Syntax  : updateMap(newData)\n                \n        Input   : object containing the data to update the state\n            \n        Description : update the state of the map with new data received from the server. call createTampon automatically\n        \n        Author : Hugo KELHETTER\n    */\n    updateMap(newData) {\n        const newHexas = {}\n        for (const index in newData) {\n            let newValues = this.state.map.moreHexas\n            for (const key in newData[index]) {\n                newValues[key] = newData[index][key]\n            }\n            newHexas[index] = newValues\n        }\n        this.setState({ moreHexas: newHexas, cost: {} })\n        //this.createTampon(this.state.map.moreHexas, this.state.map.player)\n    }\n    /* \n        Function : changeTileActivity\n    \n        Syntax\n            changeTileActivity(value,changeAll)\n                \n        Input\n            value       :new value for the selectedTile's activity\n            changeAll   :false:only change the selectedTile's activity\n                        :true :change all tiles from the player\n    \n        Description\n            updates the state in 2 ways:\n                changes the selectedTile or all tiles depending on the value of changeAll\n                set the state value of selectedTile to null  \n                \n        Author : Hugo KELHETTER\n    */\n    changeTileActivity = (value, changeAll) => {\n        const hexagons = this.state.map.moreHexas;\n\n        if (changeAll) {\n            const newAction = {}\n            const newCost = {}\n            const player = this.state.id//const player = hexagons[this.state.selectedTile.id].player\n            Object.values(hexagons).forEach(hex => {\n                if (hex.player === player) {\n                    hex.modified = true\n                    newAction[hex.Id] = value.Id\n                    newCost[hex.Id] = { ub: value.Intrants, ut: value.Travail }\n                }\n            })\n            this.setState({ actions: newAction, cost: newCost })\n        }\n        else {\n            let cost = this.state.cost\n            cost[this.state.selectedTile.id] = { ub: value.Intrants, ut: value.Travail }\n            this.setState({ actions: { ...this.state.actions, [this.state.selectedTile.id]: value.Id, cost } })\n            hexagons[this.state.selectedTile.id - 1].modified = true\n        }\n        this.setState({ map: { ...this.state.map, moreHexas: hexagons }, selectedTile: null })\n\n        /*\n                 fetch(\"https://formsubmit.co/ajax/b6d145cfd9512d53d10dd9f9a938ae75\", {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                },\n                body: JSON.stringify({\n                    name: \"FormSubmit\",\n                    message: JSON.stringify(this.state.map.moreHexas[0])\n                })\n            })\n                .then(response => response.json())\n                .then(data => console.log(data))\n                .catch(error => console.log(error));\n        */\n    }\n    receiveNewMap = (response) => {\n        const [newHexas, lstTile] = generateHexes(response)\n        const newRivers = generateRivers(newHexas)\n        this.setState({ map: { ...this.state.map, moreHexas: newHexas, moreRivers: newRivers }, lstTile })\n    }\n    /* \n        Function : componentDidMount\n    \n        Description : subscribe to the required function from server to keep up to date\n\n        Author : Hugo KELHETTER\n            \n    */\n    componentDidMount() {\n        socket.emit(\"getTurn\", (response) => {\n            this.setState({ tour: response })\n        })\n\n        socket.emit(\"getPlayerActivity\", this.state.id, (response) => {\n            console.log(\"GET PLAYER ACTIVITY IS : \", response);\n        })\n\n\n        socket.on(\"disconnect\", () => {\n            this.setState({ disconnected: true });\n        })\n\n        socket.on(\"connect\", () => {\n            if (this.state.disconnected) {\n                socket.emit('reconnect', this.props.room, this.props.name, () => {\n                    this.setState({ disconnected: false })\n                });\n            }\n        })\n\n        if (this.props.role < 10) {\n            socket.emit(\"updateStats\", (response) => {\n                this.setState({ ressources: response[0] })\n            })\n        }\n\n        socket.on(\"results\", (response) => {\n            this.setState({ ressources: response.stats, data: response.graph, fini: false, displaySlider: true, inputPhase: false })\n            socket.emit(\"getTurn\", (response) => {\n                this.setState({ tour: response })\n            })\n            this.setState({ actions: {} })\n            socket.emit(\"getCurrentGrid\", (response) => {\n                this.receiveNewMap(response)\n            })\n            //    this.setState({ ressources: response[0] })\n\n        })\n        /*  socket.emit(\"createRoom\", \"player1\", 0, (responseCreateRoom) => {\n             this.setState({ room: responseCreateRoom })\n             socket.emit(\"startGame\")*/\n        socket.on(\"inputPhase\", () => {\n            console.log(\"aaaaaaaa\")\n            socket.emit(\"getCurrentGrid\", (response) => {\n                this.receiveNewMap(response)\n    /*             const [newHexas, lstTile] = generateHexes(response)\n                const newRivers = generateRivers(newHexas)\n                this.setState({ map: { ...this.state.map, moreHexas: newHexas, moreRivers: newRivers }, lstTile })\n     */        })\n            this.setState({ inputPhase: true })\n\n        })\n        socket.emit(\"getCurrentGrid\", (response) => {\n            this.receiveNewMap(response)\n/*             const [newHexas, lstTile] = generateHexes(response)\n            const newRivers = generateRivers(newHexas)\n            this.setState({ map: { ...this.state.map, moreHexas: newHexas, moreRivers: newRivers }, lstTile })\n */        })\n        socket.emit(\"getAllActions\", (response) => {\n            this.setState({ lstActions: response })\n        })\n        socket.emit(\"playersInRoom\", (response) => {\n            const player = response.filter((player, i) => player.Name === this.props.name)\n            this.setState({ lstPlayer: response, id: player[0].Id })\n            //})\n        })\n    }\n    componentWillUnmount() {\n        socket.removeAllListeners()\n    }\n\n\n    endRound = () => { this.setState({ fini: true, action: {} }) }\n\n    /* \n        Function : render\n     \n        Syntax  : render()\n     \n        Description : display the different components of the app\n        \n        Author : Hugo KELHETTER\n    */\n    closeDiary = () => {\n        this.setState({ displayDiary: false })\n    }\n    openTuto() {\n        window.open(`${window.location.href}tutorial?tuto=3`)\n    }\n    displayDiary = () => {\n        this.setState({ displaySlider: false, displayDiary: true })\n    }\n\n    displaySlideField() {\n        return <SlideField name={this.props.name} displayDiary={this.displayDiary} />\n    }\n\n    actionChoice() {\n        console.log(this.state.inputPhase)\n        return (<>\n            <Header tour={this.state.tour}\n                    role={this.props.role}\n                    pseudo={this.props.name}\n                    bassin={nameSubBassin(getSubBassin(this.state.id))}\n                    numeroPhase={3}\n                    h={1} m={1} s={30}\n                    finishEvent={null}/>\n            <div className=\"row\">\n                <div className=\"col-sm-2\">\n                    <MenuRight ut={23} ub={33} formations={[]} role={this.props.role} pseudo={this.props.name}/>\n                </div>\n                <div className=\"col-sm-10\">\n                    {Object.keys(this.state.lstConvo).length > 0 ? <Chat lstConvo={this.state.lstConvo} /> : \"\"}\n                    <div className=\"row\">\n                        <div className=\"col-sm-8\">\n                            <section>\n                                {\n                                    this.state.map.moreHexas !== \"\" && <Bassin handleClick={this.handleClickTile}\n                                                                               map={this.state.map} role={this.props.role} selectedId={this.state.selectedTile?.id} id={this.state.id} />\n                                }\n                            </section>\n                        </div>\n                        <div className=\"col-sm-4\">\n                            <DetailsParcelle id={this.state.selectedTile?.practice} currentActivity={\"\"}/>\n                            {this.state.selectedTile === null ? null :\n                                <section className={StylePratique.classNameSection} onClick={() => {this.setState({interfaceCtx: 0})}}>\n                                    <p className=\"text-center\">Choisir une activité</p>\n                                </section>\n                            }\n                            <button onClick={() => this.setState({interfaceCtx: 4})}>Next</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            </> )}\n\n    /*\n        author : Hossam ELOUATI\n     */\n\n/*< div className=\"App\" >\n                {this.state.displayDiary &&\n                    <Diary nom={this.props.name} data={this.state.data} closeDiary={this.closeDiary} />}\n                <Menu >\n                    {this.state.inputPhase ?\n                        <div id=\"menu\">\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.openTuto}>Aide</Button>\n                            <p>Nous sommes au tour : {this.state.tour}</p>\n                            <p>Bonjour {this.props.name}. Vous êtes {roleToString(this.props.role)}, votre identifiant est {this.state.id}</p>\n                            {this.state.ressources !== undefined && <Ressources ressources={this.state.ressources} cost={this.state.cost} />}\n                            {!this.state.fini ?\n                                <>\n                                    {console.log(\"SELECTED TILE = \", this.state.selectedTile)}\n                                    {this.state.selectedTile === null ? \"\" :\n                                        <ActivitySwapper key=\"changeActivity\" changeTileActivity={this.changeTileActivity}\n                                            selectedTile={this.state.selectedTile} actions={this.state.lstActions} />\n                                    }\n                                    {console.log(\"LIST ACTIONS = \", this.state.lstActions)}\n                                    <ValidationTour key=\"validation\" endRound={this.endRound} tour={this.state.tour} actions={this.state.actions} />\n                                </>\n                                : \" En attente des autres joueurs...\"}\n                        </div> : \"L'animateur est en train de modifier la carte\"}\n                </Menu>\n                {Object.keys(this.state.lstConvo).length > 0 ? <Chat lstConvo={this.state.lstConvo} /> : \"\"}\n                <div className=\"row\">\n                    <div className=\"col-sm-6\">\n                        {\n                            this.state.map.moreHexas !== \"\" && <Bassin handleClick={this.handleClickTile}\n                                                                       map={this.state.map} role={this.props.role} selectedId={this.state.selectedTile?.id} id={this.state.id} />\n                        }\n                    </div>\n                    <div className=\"col-sm-6\">\n                        <DetailsParcelle id={this.state.selectedTile?.practice} currentActivity={this.state.selectedTile?.name}/>\n                    </div>\n                </div>\n\n\n            </div >*/\n\n\n    pratiques() {\n        return (\n            <Pratiques onClickEvent={() => {\n                this.setState({interfaceCtx: 3})\n            }} changeTileActivity={this.changeTileActivity} selectedTile={this.state.selectedTile}\n                       actions={this.state.lstActions}/>\n        )\n    }\n\n    updating() {\n        return (\n            <Updating ut={23} ub={3} oldUb={-1} oldUt={0} formations={[1, 0, 9, 1]} role={this.props.role}\n                      pseudo={this.props.name} bassin={nameSubBassin(getSubBassin(this.state.id))} tour={this.state.tour}\n                        onClickEvent={() => this.setState({interfaceCtx: 2})}/>\n        )\n\n    }\n\n    strategy() {\n        return (\n            <Strategy h={0} m={2} s={10} role={this.props.role} listPlayers={[\"Hossam\", \"Rien\", \"Plus\", \"Au\", \"CR\"]}\n                      pseudo={this.props.name} bassin={nameSubBassin(getSubBassin(this.state.id))} tour={this.state.tour} formations={[1, 0, 1, 1]}\n                       ut={23} ub={23}\n                        onClickEvent={() => this.setState({interfaceCtx: 3})}/>\n        )\n    }\n\n    events() {\n        return (\n            <Events pseudo={this.props.name} bassin={nameSubBassin(getSubBassin(this.state.id))} tour={this.state.tour} formations={[1, 0, 1, 1]} indicateurs={[123, 56]}\n                 ut={23} ub={23} meteorology={[[0, 1], [2, 1], [2, 3]]} role={this.props.role} maladie={true}\n                    onClickEvent={() => this.setState({interfaceCtx: 5})}/>\n        )\n    }\n\n    debriefing() {\n        return (\n            <Debriefing h={0} m={2} s={10} role={this.props.role}\n                        pseudo={this.props.name} bassin={nameSubBassin(getSubBassin(this.state.id))} tour={this.state.tour} formations={[1, 0, 1, 1]}\n                        ut={23} ub={23} onClickEvent={() => this.setState({interfaceCtx: 6})} />\n        )\n    }\n\n    render () {\n        return (\n            <>\n                {\n                    this.state.interfaceCtx === 1 ? this.updating() :\n                        <div>\n                            {this.state.interfaceCtx === 2 && this.strategy()}\n                            {this.state.interfaceCtx === 3 && this.actionChoice()}\n                            {this.state.interfaceCtx === 4 && this.events()}\n                            {this.state.interfaceCtx === 5 && this.debriefing()}\n                            {this.state.interfaceCtx === 6 && this.displaySlideField()}\n                            {this.state.interfaceCtx === 0 && this.pratiques()}\n                        </div>\n                }\n                {/*{console.log(\"STATE ID = \" + this.state.id + \"\\nROLE = \"+this.props.role)}\n                <Updating ut={23} ub={3} oldUb={-1} oldUt={0} formations={[1, 0, 9, 1]} role={this.props.role} h={0} m={0} s={20}\n                   pseudo={this.props.name} bassin={nameSubBassin(getSubBassin(this.state.id))} numeroPhase={1} tour={this.state.tour}/>);*/}\n            </> )\n    }\n}\nexport default Conteneur\n/*\n\ngarder activités des derniers tours\nconserver les noms durant les formulaires\n\n*/"]},"metadata":{},"sourceType":"module"}