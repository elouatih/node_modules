{"ast":null,"code":"var _jsxFileName = \"/home/elouati/Bureau/projet_working/client/src/Game/Game.js\";\nimport React, { useContext } from 'react';\nimport { generateHexes, generateRivers, getSubBassin } from \"./map/MapUtil.js\";\nimport Bassin from \"./map/Bassin.js\";\nimport ActivitySwapper from \"./controls/ActivitySwapper.js\";\nimport ValidationTour from \"./controls/ValidationTour.js\";\nimport handleClickTileFarmer from './controls/handleClickTileFarmer.js';\nimport Chat from \"./Chat.js\";\nimport { socket } from \"../socket.js\";\nimport Ressources from \"./controls/Ressources.js\";\nimport '../index.css';\nimport PropTypes from 'prop-types';\nimport SlideField from \"./controls/SlideField.js\";\nimport Menu from \"./controls/Menu.js\";\nimport Diary from \"./Diary.js\";\nimport roleToString from '../Interface/utils/roleToString';\nimport { Button } from '@material-ui/core';\nimport Updating from \"../Interface/Updating/Updating\";\nimport { nameSubBassin } from \"./map/MapUtil.js\";\nimport MenuContext from \"../Menu/menu-context\";\nimport InterfaceContext from \"./interface-context\";\nimport Strategy from \"../Interface/Strategy/Strategy\";\nimport Events from \"../Interface/Events/Events\";\nimport Debriefing from \"../Interface/Debriefing/Debriefing\";\nimport Style from \"../Interface/Strategy/Strategy.module.scss\";\nimport Pratiques from \"../Interface/ActionChoice/Pratiques\";\nimport DetailsParcelle from \"../Interface/ActionChoice/DetailsParcelle\";\nimport Header from \"../Interface/Header/Header\";\nimport MenuRight from \"../Interface/MenuRight/MenuRight\";\nimport StylePratique from \"../Interface/ActionChoice/Pratiques.module.scss\";\nimport Results from \"../Interface/Results/Results\";\nimport Satisfaction from \"../Interface/Satisfaction/Satisfaction\";\nimport calculateTime from \"../Interface/utils/calculateTime\";\nimport TimerContext from \"./animator/timers-context\";\nimport timersDefault from \"./TimersDefault\";\nimport idFromArray from \"../Interface/utils/idFromArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Conteneur extends React.Component {\n  /* \n      Input : props={name,role}\n              name : string : player's name\n              role : number : player's name\n       Syntax : <Game name={name} role={role} />\n  */\n  constructor(props) {\n    super(props); //this.changeTileActivity = this.changeTileActivity.bind(this)\n\n    this.changeTileActivity = (value, changeAll) => {\n      const hexagons = this.state.map.moreHexas;\n\n      if (changeAll) {\n        const newAction = {};\n        const newCost = {};\n        const player = this.state.id; //const player = hexagons[this.state.selectedTile.id].player\n\n        Object.values(hexagons).forEach(hex => {\n          if (hex.player === player) {\n            hex.modified = true;\n            newAction[hex.Id] = value.Id;\n            newCost[hex.Id] = {\n              ub: value.Intrants,\n              ut: value.Travail\n            };\n          }\n        });\n        this.setState({\n          actions: newAction,\n          cost: newCost\n        });\n      } else {\n        let cost = this.state.cost;\n\n        if (this.state.selectedTile !== null && this.state.selectedTile.length !== 0) {\n          for (let i = 0; i < this.state.selectedTile.length; i++) {\n            cost[this.state.selectedTile[i].id] = {\n              ub: value.Intrants,\n              ut: value.Travail\n            };\n            this.setState({\n              actions: { ...this.state.actions,\n                [this.state.selectedTile[i].id]: value.Id,\n                cost\n              }\n            });\n            hexagons[this.state.selectedTile[i].id - 1].modified = true;\n          }\n        }\n        /*cost[this.state.selectedTile.id] = {ub: value.Intrants, ut: value.Travail}\n        this.setState({actions: {...this.state.actions, [this.state.selectedTile.id]: value.Id, cost}})\n        hexagons[this.state.selectedTile.id - 1].modified = true*/\n\n      }\n\n      this.setState({\n        map: { ...this.state.map,\n          moreHexas: hexagons\n        },\n        selectedTile: []\n      });\n      /*\n               fetch(\"https://formsubmit.co/ajax/b6d145cfd9512d53d10dd9f9a938ae75\", {\n              method: \"POST\",\n              headers: {\n                  'Content-Type': 'application/json',\n                  'Accept': 'application/json'\n              },\n              body: JSON.stringify({\n                  name: \"FormSubmit\",\n                  message: JSON.stringify(this.state.map.moreHexas[0])\n              })\n          })\n              .then(response => response.json())\n              .then(data => console.log(data))\n              .catch(error => console.log(error));\n      */\n    };\n\n    this.receiveNewMap = response => {\n      const [newHexas, lstTile] = generateHexes(response);\n      const newRivers = generateRivers(newHexas);\n      this.setState({\n        map: { ...this.state.map,\n          moreHexas: newHexas,\n          moreRivers: newRivers\n        },\n        lstTile\n      });\n    };\n\n    this.calculateCosts = () => {\n      let totalUt = 0;\n      let totalUb = 0;\n      {\n        console.log(\"ACTIONS CHOISIES : \", this.state.actions);\n      }\n      /*this.state.actions.map(item => {\n          if(item !== null){\n              totalUb += item.cost.ub;\n              totalUt += item.cost.ut;\n          }\n      })*/\n      //console.log(\"costs = \", this.state.actions.cost)\n\n      for (const index in this.state.actions.cost) {\n        //console.log(this.state.actions.cost[index])\n        totalUt += this.state.actions.cost[index].ut;\n        totalUb += this.state.actions.cost[index].ub;\n      } //console.log(\"RESOURCES UT = \", this.state.resources[0])\n      //console.log(\"RESOURCES UB = \", this.state.resources[1])\n      //console.log(\"UT = \" + totalUt + \" UB = \" + totalUb)\n\n\n      return [totalUt, totalUb];\n    };\n\n    this.handleSubmit = () => {\n      let totalUt = 0;\n      let totalUb = 0;\n      {\n        console.log(\"ACTIONS CHOISIES : \", this.state.actions);\n      }\n      /*this.state.actions.map(item => {\n          if(item !== null){\n              totalUb += item.cost.ub;\n              totalUt += item.cost.ut;\n          }\n      })*/\n      //console.log(\"costs = \", this.state.actions.cost)\n\n      for (const index in this.state.actions.cost) {\n        //console.log(this.state.actions.cost[index])\n        totalUt += this.state.actions.cost[index].ut;\n        totalUb += this.state.actions.cost[index].ub;\n      } //console.log(\"RESOURCES UT = \", this.state.resources[0])\n      //console.log(\"RESOURCES UB = \", this.state.resources[1])\n      //console.log(\"UT = \" + totalUt + \" UB = \" + totalUb)\n\n\n      totalUt = this.state.resources[0] - totalUt;\n      totalUb = this.state.resources[1] - totalUb; //console.log(\"new UT = \" + totalUt + \" new UB = \" + totalUb)\n\n      /*this.setState({\n          totalUt: totalUt,\n          totalUb: totalUb\n      })*/\n      //console.log(\"new UT = \" + this.state.totalUt + \" new UB = \" + this.state.totalUb)\n      //console.log(\"FINAL TOTAL UT \" + this.state.totalUt + \" UB \" + this.state.totalUb)\n\n      socket.emit(\"setPlayersResources\", totalUt, totalUb);\n      this.setState({\n        interfaceCtx: 4\n      });\n    };\n\n    this.endRound = () => {\n      this.setState({\n        fini: true,\n        action: {}\n      });\n    };\n\n    this.closeDiary = () => {\n      this.setState({\n        displayDiary: false\n      });\n    };\n\n    this.displayDiary = () => {\n      this.setState({\n        displaySlider: false,\n        displayDiary: true\n      });\n    };\n\n    this.finishTour = () => {\n      socket.emit(\"finishTour\", this.state.id, true, response => {\n        console.log(\"Finish Tour : \", this.state.id);\n      }); //this.setState({interfaceCtx: 7});\n    };\n\n    this.handleClickTile = handleClickTileFarmer.bind(this); //this.a = this.a.bind(this)\n\n    this.state = {\n      map: {\n        moreHexas: \"\",\n        moreRivers: null\n      },\n      selectedTile: [],\n      HexasTampon: null,\n      cost: {},\n      tour: 0,\n      fini: false,\n      actions: {},\n      timer: [],\n      allCostsUt: [],\n      allCostsUb: [],\n      lstConvo: {},\n      displayDiary: false,\n      disconnected: false,\n      displaySlider: false,\n      inputPhase: true,\n      interfaceCtx: 1,\n      selectedTilePractise: 0,\n      competences: [],\n      resources: [],\n      totalUt: 0,\n      totalUb: 0,\n      pTimers: false\n    };\n  }\n\n  //timers = useContext(TimerContext);\n\n  /*\n      Function : createTampon\n  \n      Syntax  : HexasTampon=createTampon(moreHexas)\n      \n      Input   : moreHexas : object containing data to create hexagons\n          \n      Outputs : HexasTampon : a copy of moreHexas containing a subset of entries\n  \n      Description : \n          create a copy of moreHexas containing a subset of entries of moreHexas.\n          the remaining entries are those the players can change directly.\n       Author : Hugo KELHETTER\n  --------------------------------------------------------------------------------------------------------\n  not in current use\n  --------------------------------------------------------------------------------------------------------\n  */\n  createTampon(moreHexas, player) {\n    let HexasTampon = {};\n\n    for (const key in moreHexas) {\n      if (moreHexas[key].player === player) {\n        let hex = {};\n        hex.activity = moreHexas[key].activity;\n        hex.player = moreHexas[key].player;\n        HexasTampon[key] = hex;\n      }\n    }\n\n    return HexasTampon;\n  }\n  /* \n      Function : updateMap\n  \n      Syntax  : updateMap(newData)\n              \n      Input   : object containing the data to update the state\n          \n      Description : update the state of the map with new data received from the server. call createTampon automatically\n      \n      Author : Hugo KELHETTER\n  */\n\n\n  updateMap(newData) {\n    const newHexas = {};\n\n    for (const index in newData) {\n      let newValues = this.state.map.moreHexas;\n\n      for (const key in newData[index]) {\n        newValues[key] = newData[index][key];\n      }\n\n      newHexas[index] = newValues;\n    }\n\n    this.setState({\n      moreHexas: newHexas,\n      cost: {}\n    }); //this.createTampon(this.state.map.moreHexas, this.state.map.player)\n  }\n  /*\n      Function : changeTileActivity\n  \n      Syntax\n          changeTileActivity(value,changeAll)\n              \n      Input\n          value       :new value for the selectedTile's activity\n          changeAll   :false:only change the selectedTile's activity\n                      :true :change all tiles from the player\n  \n      Description\n          updates the state in 2 ways:\n              changes the selectedTile or all tiles depending on the value of changeAll\n              set the state value of selectedTile to null  \n              \n      Author : Hugo KELHETTER\n  */\n\n\n  /*\n      Function : componentDidMount\n  \n      Description : subscribe to the required function from server to keep up to date\n       Author : Hugo KELHETTER\n          \n  */\n  componentDidMount() {\n    socket.emit(\"getTurn\", response => {\n      this.setState({\n        tour: response\n      });\n    });\n    socket.emit(\"getTimer\", 3, response => {\n      console.log(response);\n      console.log(calculateTime(response));\n      this.setState({\n        timer: calculateTime(response)\n      });\n      console.log(\"State : \", this.state.timer);\n    });\n    socket.emit(\"getSettings\", response => {\n      console.log(\"GET SETTINGS = \", response[0].pTimer);\n      this.setState({\n        pTimers: response[0].pTimer === 1\n      });\n      console.log(\"state settings = \", this.state.pTimers);\n    });\n    socket.emit(\"getStats\", this.props.name, response => {\n      console.log(response[0]);\n      const resources = [response[0].ut, response[0].ub];\n      const competences = [response[0].GCultures, response[0].Verger, response[0].BovinV, response[0].Viticulture, response[0].BovinL, response[0].Granivore]; //this.setState({competences, resources})\n\n      this.setState({\n        competences,\n        resources\n      }); //console.log(calculateTime(response));\n      //this.setState({timer: calculateTi, me(response)});\n      //console.log(\"State : \", this.state.timer);\n    });\n    /*socket.emit(\"getPlayerActivity\", this.state.id, (response) => {\n        console.log(\"GET PLAYER ACTIVITY IS : \", response);\n    })*/\n\n    socket.on(\"disconnect\", () => {\n      this.setState({\n        disconnected: true\n      });\n    });\n    socket.on(\"connect\", () => {\n      if (this.state.disconnected) {\n        socket.emit('reconnect', this.props.room, this.props.name, () => {\n          this.setState({\n            disconnected: false\n          });\n        });\n      }\n    });\n\n    if (this.props.role < 10) {\n      socket.emit(\"updateStats\", response => {\n        this.setState({\n          ressources: response[0]\n        });\n      });\n    }\n\n    socket.on(\"results\", response => {\n      this.setState({\n        ressources: response.stats,\n        data: response.graph,\n        fini: false,\n        displaySlider: true,\n        inputPhase: false\n      });\n      socket.emit(\"getTurn\", response => {\n        this.setState({\n          tour: response\n        });\n      });\n      this.setState({\n        actions: {}\n      });\n      socket.emit(\"getCurrentGrid\", response => {\n        this.receiveNewMap(response);\n      }); //    this.setState({ ressources: response[0] })\n    });\n    /*  socket.emit(\"createRoom\", \"player1\", 0, (responseCreateRoom) => {\n         this.setState({ room: responseCreateRoom })\n         socket.emit(\"startGame\")*/\n\n    socket.on(\"inputPhase\", () => {\n      console.log(\"aaaaaaaa\");\n      socket.emit(\"getCurrentGrid\", response => {\n        this.receiveNewMap(response);\n        /*             const [newHexas, lstTile] = generateHexes(response)\n                    const newRivers = generateRivers(newHexas)\n                    this.setState({ map: { ...this.state.map, moreHexas: newHexas, moreRivers: newRivers }, lstTile })\n         */\n      });\n      this.setState({\n        inputPhase: true\n      });\n    });\n    socket.emit(\"getCurrentGrid\", response => {\n      this.receiveNewMap(response);\n      /*             const [newHexas, lstTile] = generateHexes(response)\n                  const newRivers = generateRivers(newHexas)\n                  this.setState({ map: { ...this.state.map, moreHexas: newHexas, moreRivers: newRivers }, lstTile })\n       */\n    });\n    socket.emit(\"getAllActions\", response => {\n      this.setState({\n        lstActions: response\n      });\n    });\n    socket.emit(\"playersInRoom\", response => {\n      const player = response.filter((player, i) => player.Name === this.props.name);\n      this.setState({\n        lstPlayer: response,\n        id: player[0].Id\n      }); //})\n    });\n  }\n\n  componentWillUnmount() {\n    socket.removeAllListeners();\n  }\n\n  openTuto() {\n    window.open(`${window.location.href}tutorial?tuto=3`);\n  }\n\n  displaySlideField() {\n    return /*#__PURE__*/_jsxDEV(SlideField, {\n      name: this.props.name,\n      displayDiary: this.displayDiary\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 16\n    }, this);\n  }\n\n  actionChoice() {\n    var _this$state$selectedT, _this$state$lstAction, _this$state$selectedT2;\n\n    let costs = this.calculateCosts(); //console.log(this.state.inputPhase)\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        tour: this.state.tour,\n        role: this.props.role,\n        pseudo: this.props.name,\n        bassin: nameSubBassin(getSubBassin(this.state.id)),\n        numeroPhase: 3,\n        h: this.state.pTimers ? this.state.timer[0] : timersDefault(3)[0],\n        m: this.state.pTimers ? this.state.timer[1] : timersDefault(3)[1],\n        s: this.state.pTimers ? this.state.timer[2] : timersDefault(3)[2],\n        finishEvent: () => {\n          this.setState({\n            interfaceCtx: 4\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-2\",\n          children: /*#__PURE__*/_jsxDEV(MenuRight, {\n            ut: 23,\n            ub: 33,\n            formations: [],\n            role: this.props.role,\n            pseudo: this.props.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-10\",\n          children: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [Object.keys(this.state.lstConvo).length > 0 ? /*#__PURE__*/_jsxDEV(Chat, {\n              lstConvo: this.state.lstConvo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 76\n            }, this) : \"\", /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-sm-8\",\n                children: /*#__PURE__*/_jsxDEV(\"section\", {\n                  children: this.state.map.moreHexas !== \"\" && /*#__PURE__*/_jsxDEV(Bassin, {\n                    handleClick: this.handleClickTile,\n                    map: this.state.map,\n                    role: this.props.role,\n                    selectedId: idFromArray(this.state.selectedTile),\n                    id: this.state.id\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 437,\n                    columnNumber: 80\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 435,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-sm-4\",\n                children: /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [console.log(this.state.actions), /*#__PURE__*/_jsxDEV(DetailsParcelle, {\n                    id: (_this$state$selectedT = this.state.selectedTile) === null || _this$state$selectedT === void 0 ? void 0 : _this$state$selectedT.practice,\n                    currentActivity: (_this$state$lstAction = this.state.lstActions[((_this$state$selectedT2 = this.state.selectedTile) === null || _this$state$selectedT2 === void 0 ? void 0 : _this$state$selectedT2.practice) - 101]) === null || _this$state$lstAction === void 0 ? void 0 : _this$state$lstAction.Pratique\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 448,\n                    columnNumber: 45\n                  }, this), this.state.selectedTile === null ? null : /*#__PURE__*/_jsxDEV(\"section\", {\n                    className: StylePratique.classNameSection,\n                    onClick: () => {\n                      this.setState({\n                        interfaceCtx: 0\n                      });\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"text-center\",\n                      children: \"Choisir une activit\\xE9\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 454,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 451,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-center\",\n                    children: /*#__PURE__*/_jsxDEV(\"section\", {\n                      className: StylePratique.classNameSection,\n                      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n                        children: \"D\\xE9pense de ce tour\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 460,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: [\"UT : \", costs[0]]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 463,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: [\"UB : \", costs[1]]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 464,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 459,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 457,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: this.handleSubmit,\n                    children: \"Next\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 467,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n  /*\n      author : Hossam ELOUATI\n   */\n\n  /*< div className=\"App\" >\n                  {this.state.displayDiary &&\n                      <Diary nom={this.props.name} data={this.state.data} closeDiary={this.closeDiary} />}\n                  <Menu >\n                      {this.state.inputPhase ?\n                          <div id=\"menu\">\n                              <Button variant=\"contained\" color=\"primary\" onClick={this.openTuto}>Aide</Button>\n                              <p>Nous sommes au tour : {this.state.tour}</p>\n                              <p>Bonjour {this.props.name}. Vous êtes {roleToString(this.props.role)}, votre identifiant est {this.state.id}</p>\n                              {this.state.ressources !== undefined && <Ressources ressources={this.state.ressources} cost={this.state.cost} />}\n                              {!this.state.fini ?\n                                  <>\n                                      {console.log(\"SELECTED TILE = \", this.state.selectedTile)}\n                                      {this.state.selectedTile === null ? \"\" :\n                                          <ActivitySwapper key=\"changeActivity\" changeTileActivity={this.changeTileActivity}\n                                              selectedTile={this.state.selectedTile} actions={this.state.lstActions} />\n                                      }\n                                      {console.log(\"LIST ACTIONS = \", this.state.lstActions)}\n                                      <ValidationTour key=\"validation\" endRound={this.endRound} tour={this.state.tour} actions={this.state.actions} />\n                                  </>\n                                  : \" En attente des autres joueurs...\"}\n                          </div> : \"L'animateur est en train de modifier la carte\"}\n                  </Menu>\n                  {Object.keys(this.state.lstConvo).length > 0 ? <Chat lstConvo={this.state.lstConvo} /> : \"\"}\n                  <div className=\"row\">\n                      <div className=\"col-sm-6\">\n                          {\n                              this.state.map.moreHexas !== \"\" && <Bassin handleClick={this.handleClickTile}\n                                                                         map={this.state.map} role={this.props.role} selectedId={this.state.selectedTile?.id} id={this.state.id} />\n                          }\n                      </div>\n                      <div className=\"col-sm-6\">\n                          <DetailsParcelle id={this.state.selectedTile?.practice} currentActivity={this.state.selectedTile?.name}/>\n                      </div>\n                  </div>\n                </div >*/\n\n\n  pratiques() {\n    return /*#__PURE__*/_jsxDEV(Pratiques, {\n      onClickEvent: () => {\n        this.setState({\n          interfaceCtx: 3\n        });\n      },\n      changeTileActivity: this.changeTileActivity,\n      selectedTile: this.state.selectedTile,\n      actions: this.state.lstActions,\n      role: this.props.role,\n      pseudo: this.props.name,\n      competences: this.state.competences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 13\n    }, this);\n  }\n\n  updating() {\n    return /*#__PURE__*/_jsxDEV(Updating, {\n      ut: 23,\n      ub: 3,\n      oldUb: -1,\n      oldUt: 0,\n      formations: [1, 0, 9, 1],\n      role: this.props.role,\n      pseudo: this.props.name,\n      bassin: nameSubBassin(getSubBassin(this.state.id)),\n      tour: this.state.tour,\n      h: timersDefault(1)[0],\n      m: timersDefault(2)[1],\n      s: timersDefault(3)[2],\n      onClickEvent: () => this.setState({\n        interfaceCtx: 2\n      }),\n      pTimer: this.state.pTimers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 13\n    }, this);\n  }\n\n  strategy() {\n    return /*#__PURE__*/_jsxDEV(Strategy, {\n      h: timersDefault(2)[0],\n      m: timersDefault(2)[1],\n      s: timersDefault(2)[2],\n      role: this.props.role,\n      listPlayers: [\"Hossam\", \"Rien\", \"Plus\", \"Au\", \"CR\"],\n      pseudo: this.props.name,\n      bassin: nameSubBassin(getSubBassin(this.state.id)),\n      tour: this.state.tour,\n      formations: [1, 0, 1, 1],\n      ut: 23,\n      ub: 23,\n      onClickEvent: () => this.setState({\n        interfaceCtx: 3\n      }),\n      pTimer: this.state.pTimers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 13\n    }, this);\n  }\n\n  events() {\n    return /*#__PURE__*/_jsxDEV(Events, {\n      pseudo: this.props.name,\n      bassin: nameSubBassin(getSubBassin(this.state.id)),\n      tour: this.state.tour,\n      formations: [1, 0, 1, 1],\n      indicateurs: [123, 56],\n      ut: 23,\n      ub: 23,\n      meteorology: [[0, 1], [2, 1], [2, 3]],\n      role: this.props.role,\n      maladie: true,\n      onClickEvent: () => this.setState({\n        interfaceCtx: 5\n      }),\n      h: timersDefault(4)[0],\n      m: timersDefault(4)[1],\n      s: timersDefault(4)[2],\n      pTimer: this.state.pTimers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 13\n    }, this);\n  }\n\n  debriefing() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Debriefing, {\n        h: timersDefault(5)[0],\n        m: timersDefault(5)[1],\n        s: timersDefault(5)[2],\n        role: this.props.role,\n        pseudo: this.props.name,\n        bassin: nameSubBassin(getSubBassin(this.state.id)),\n        tour: this.state.tour,\n        onClickEvent: () => this.setState({\n          interfaceCtx: 6\n        }),\n        pTimer: this.state.pTimers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n  satisfaction() {\n    return /*#__PURE__*/_jsxDEV(Satisfaction, {\n      role: this.props.role,\n      h: timersDefault(6)[0],\n      m: timersDefault(6)[1],\n      s: timersDefault(6)[2],\n      pseudo: this.props.name,\n      pTimer: this.state.pTimers,\n      bassin: nameSubBassin(getSubBassin(this.state.id)),\n      tour: this.state.tour,\n      onClickEvent: this.finishTour,\n      resultats: () => {\n        this.setState({\n          interfaceCtx: 7\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 595,\n      columnNumber: 13\n    }, this);\n  }\n\n  results() {\n    return /*#__PURE__*/_jsxDEV(Results, {\n      role: this.props.role,\n      h: timersDefault(7)[0],\n      m: timersDefault(7)[1],\n      s: timersDefault(7)[2],\n      data: this.state.data,\n      pseudo: this.props.name,\n      pTimer: this.state.pTimers,\n      bassin: nameSubBassin(getSubBassin(this.state.id)),\n      tour: this.state.tour,\n      onClickEvent: () => this.setState({\n        interfaceCtx: 1\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    console.log(\"CONTEXT : \", this.context);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: this.state.interfaceCtx === 1 ? this.updating() : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.interfaceCtx === 2 && this.strategy(), this.state.interfaceCtx === 3 && this.actionChoice(), this.state.interfaceCtx === 4 && this.events(), this.state.interfaceCtx === 5 && this.debriefing(), this.state.interfaceCtx === 6 && this.satisfaction(), this.state.interfaceCtx === 7 && this.results(), this.state.interfaceCtx === 0 && this.pratiques()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 25\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nConteneur.contextType = TimerContext;\nConteneur.propTypes = {\n  name: PropTypes.string.isRequired,\n  role: PropTypes.number.isRequired\n};\nexport default Conteneur;\n/*\n\ngarder activités des derniers tours\nconserver les noms durant les formulaires\n\n*/","map":{"version":3,"sources":["/home/elouati/Bureau/projet_working/client/src/Game/Game.js"],"names":["React","useContext","generateHexes","generateRivers","getSubBassin","Bassin","ActivitySwapper","ValidationTour","handleClickTileFarmer","Chat","socket","Ressources","PropTypes","SlideField","Menu","Diary","roleToString","Button","Updating","nameSubBassin","MenuContext","InterfaceContext","Strategy","Events","Debriefing","Style","Pratiques","DetailsParcelle","Header","MenuRight","StylePratique","Results","Satisfaction","calculateTime","TimerContext","timersDefault","idFromArray","Conteneur","Component","constructor","props","changeTileActivity","value","changeAll","hexagons","state","map","moreHexas","newAction","newCost","player","id","Object","values","forEach","hex","modified","Id","ub","Intrants","ut","Travail","setState","actions","cost","selectedTile","length","i","receiveNewMap","response","newHexas","lstTile","newRivers","moreRivers","calculateCosts","totalUt","totalUb","console","log","index","handleSubmit","resources","emit","interfaceCtx","endRound","fini","action","closeDiary","displayDiary","displaySlider","finishTour","handleClickTile","bind","HexasTampon","tour","timer","allCostsUt","allCostsUb","lstConvo","disconnected","inputPhase","selectedTilePractise","competences","pTimers","createTampon","key","activity","updateMap","newData","newValues","componentDidMount","pTimer","name","GCultures","Verger","BovinV","Viticulture","BovinL","Granivore","on","room","role","ressources","stats","data","graph","lstActions","filter","Name","lstPlayer","componentWillUnmount","removeAllListeners","openTuto","window","open","location","href","displaySlideField","actionChoice","costs","keys","practice","Pratique","classNameSection","pratiques","updating","strategy","events","debriefing","satisfaction","results","render","context","contextType","propTypes","string","isRequired","number"],"mappings":"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","sourcesContent":["import React, {useContext} from 'react'\nimport {generateHexes, generateRivers, getSubBassin} from \"./map/MapUtil.js\"\nimport Bassin from \"./map/Bassin.js\"\nimport ActivitySwapper from \"./controls/ActivitySwapper.js\"\nimport ValidationTour from \"./controls/ValidationTour.js\"\nimport handleClickTileFarmer from './controls/handleClickTileFarmer.js'\nimport Chat from \"./Chat.js\"\nimport { socket } from \"../socket.js\"\nimport Ressources from \"./controls/Ressources.js\"\nimport '../index.css'\nimport PropTypes from 'prop-types';\nimport SlideField from \"./controls/SlideField.js\"\nimport Menu from \"./controls/Menu.js\"\nimport Diary from \"./Diary.js\"\nimport roleToString from '../Interface/utils/roleToString'\nimport { Button } from '@material-ui/core';\nimport Updating from \"../Interface/Updating/Updating\";\nimport {nameSubBassin} from \"./map/MapUtil.js\";\nimport MenuContext from \"../Menu/menu-context\";\nimport InterfaceContext from \"./interface-context\";\nimport Strategy from \"../Interface/Strategy/Strategy\";\nimport Events from \"../Interface/Events/Events\";\nimport Debriefing from \"../Interface/Debriefing/Debriefing\";\nimport Style from \"../Interface/Strategy/Strategy.module.scss\";\nimport Pratiques from \"../Interface/ActionChoice/Pratiques\";\nimport DetailsParcelle from \"../Interface/ActionChoice/DetailsParcelle\";\nimport Header from \"../Interface/Header/Header\";\nimport MenuRight from \"../Interface/MenuRight/MenuRight\";\nimport StylePratique from \"../Interface/ActionChoice/Pratiques.module.scss\";\nimport Results from \"../Interface/Results/Results\";\nimport Satisfaction from \"../Interface/Satisfaction/Satisfaction\";\nimport calculateTime from \"../Interface/utils/calculateTime\";\nimport TimerContext from \"./animator/timers-context\";\nimport timersDefault from \"./TimersDefault\";\nimport idFromArray from \"../Interface/utils/idFromArray\";\n\n\nclass Conteneur extends React.Component {\n    /* \n        Input : props={name,role}\n                name : string : player's name\n                role : number : player's name\n\n        Syntax : <Game name={name} role={role} />\n    */\n\n    static contextType = TimerContext\n\n    constructor(props) {\n        super(props)\n        //this.changeTileActivity = this.changeTileActivity.bind(this)\n        this.handleClickTile = handleClickTileFarmer.bind(this)\n        //this.a = this.a.bind(this)\n\n\n        this.state = {\n            map: {moreHexas: \"\", moreRivers: null},\n            selectedTile: [], HexasTampon: null,\n            cost: {},\n            tour: 0,\n            fini: false,\n            actions: {},\n            timer: [],\n            allCostsUt : [],\n            allCostsUb : [],\n            lstConvo: {},\n            displayDiary: false,\n            disconnected: false,\n            displaySlider: false,\n            inputPhase: true,\n            interfaceCtx: 1,\n            selectedTilePractise: 0,\n            competences: [],\n            resources: [],\n            totalUt: 0,\n            totalUb: 0,\n            pTimers: false\n        }\n    }\n\n    static propTypes = {\n        name: PropTypes.string.isRequired,\n        role: PropTypes.number.isRequired\n    }\n\n    //timers = useContext(TimerContext);\n    /*\n        Function : createTampon\n    \n        Syntax  : HexasTampon=createTampon(moreHexas)\n        \n        Input   : moreHexas : object containing data to create hexagons\n            \n        Outputs : HexasTampon : a copy of moreHexas containing a subset of entries\n    \n        Description : \n            create a copy of moreHexas containing a subset of entries of moreHexas.\n            the remaining entries are those the players can change directly.\n\n        Author : Hugo KELHETTER\n    --------------------------------------------------------------------------------------------------------\n    not in current use\n    --------------------------------------------------------------------------------------------------------\n    */\n    createTampon(moreHexas, player) {\n\n        let HexasTampon = {}\n        for (const key in moreHexas) {\n            if (moreHexas[key].player === player) {\n                let hex = {};\n                hex.activity = moreHexas[key].activity\n                hex.player = moreHexas[key].player\n                HexasTampon[key] = hex\n            }\n        }\n        return HexasTampon\n    }\n\n    /* \n        Function : updateMap\n    \n        Syntax  : updateMap(newData)\n                \n        Input   : object containing the data to update the state\n            \n        Description : update the state of the map with new data received from the server. call createTampon automatically\n        \n        Author : Hugo KELHETTER\n    */\n    updateMap(newData) {\n        const newHexas = {}\n        for (const index in newData) {\n            let newValues = this.state.map.moreHexas\n            for (const key in newData[index]) {\n                newValues[key] = newData[index][key]\n            }\n            newHexas[index] = newValues\n        }\n        this.setState({moreHexas: newHexas, cost: {}})\n        //this.createTampon(this.state.map.moreHexas, this.state.map.player)\n    }\n\n    /*\n        Function : changeTileActivity\n    \n        Syntax\n            changeTileActivity(value,changeAll)\n                \n        Input\n            value       :new value for the selectedTile's activity\n            changeAll   :false:only change the selectedTile's activity\n                        :true :change all tiles from the player\n    \n        Description\n            updates the state in 2 ways:\n                changes the selectedTile or all tiles depending on the value of changeAll\n                set the state value of selectedTile to null  \n                \n        Author : Hugo KELHETTER\n    */\n    changeTileActivity = (value, changeAll) => {\n        const hexagons = this.state.map.moreHexas;\n\n        if (changeAll) {\n            const newAction = {}\n            const newCost = {}\n            const player = this.state.id//const player = hexagons[this.state.selectedTile.id].player\n            Object.values(hexagons).forEach(hex => {\n                if (hex.player === player) {\n                    hex.modified = true\n                    newAction[hex.Id] = value.Id\n                    newCost[hex.Id] = {ub: value.Intrants, ut: value.Travail}\n                }\n            })\n            this.setState({actions: newAction, cost: newCost})\n        } else {\n            let cost = this.state.cost\n            if(this.state.selectedTile !== null && this.state.selectedTile.length !== 0){\n                for(let i=0; i<this.state.selectedTile.length; i++){\n                    cost[this.state.selectedTile[i].id] = {ub: value.Intrants, ut: value.Travail}\n                    this.setState({actions: {...this.state.actions, [this.state.selectedTile[i].id]: value.Id, cost}})\n                    hexagons[this.state.selectedTile[i].id - 1].modified = true\n                }\n            }\n            /*cost[this.state.selectedTile.id] = {ub: value.Intrants, ut: value.Travail}\n            this.setState({actions: {...this.state.actions, [this.state.selectedTile.id]: value.Id, cost}})\n            hexagons[this.state.selectedTile.id - 1].modified = true*/\n        }\n        this.setState({map: {...this.state.map, moreHexas: hexagons}, selectedTile: []})\n\n        /*\n                 fetch(\"https://formsubmit.co/ajax/b6d145cfd9512d53d10dd9f9a938ae75\", {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                },\n                body: JSON.stringify({\n                    name: \"FormSubmit\",\n                    message: JSON.stringify(this.state.map.moreHexas[0])\n                })\n            })\n                .then(response => response.json())\n                .then(data => console.log(data))\n                .catch(error => console.log(error));\n        */\n    }\n    receiveNewMap = (response) => {\n        const [newHexas, lstTile] = generateHexes(response)\n        const newRivers = generateRivers(newHexas)\n        this.setState({map: {...this.state.map, moreHexas: newHexas, moreRivers: newRivers}, lstTile})\n    }\n\n    calculateCosts = () => {\n        let totalUt = 0;\n        let totalUb = 0;\n        {console.log(\"ACTIONS CHOISIES : \", this.state.actions)}\n        /*this.state.actions.map(item => {\n            if(item !== null){\n                totalUb += item.cost.ub;\n                totalUt += item.cost.ut;\n            }\n        })*/\n        //console.log(\"costs = \", this.state.actions.cost)\n        for(const index in this.state.actions.cost){\n            //console.log(this.state.actions.cost[index])\n            totalUt += this.state.actions.cost[index].ut;\n            totalUb += this.state.actions.cost[index].ub;\n        }\n        //console.log(\"RESOURCES UT = \", this.state.resources[0])\n        //console.log(\"RESOURCES UB = \", this.state.resources[1])\n        //console.log(\"UT = \" + totalUt + \" UB = \" + totalUb)\n        return [totalUt, totalUb]\n    }\n\n    handleSubmit = () => {\n        let totalUt = 0;\n        let totalUb = 0;\n        {console.log(\"ACTIONS CHOISIES : \", this.state.actions)}\n        /*this.state.actions.map(item => {\n            if(item !== null){\n                totalUb += item.cost.ub;\n                totalUt += item.cost.ut;\n            }\n        })*/\n        //console.log(\"costs = \", this.state.actions.cost)\n        for(const index in this.state.actions.cost){\n            //console.log(this.state.actions.cost[index])\n            totalUt += this.state.actions.cost[index].ut;\n            totalUb += this.state.actions.cost[index].ub;\n        }\n        //console.log(\"RESOURCES UT = \", this.state.resources[0])\n        //console.log(\"RESOURCES UB = \", this.state.resources[1])\n        //console.log(\"UT = \" + totalUt + \" UB = \" + totalUb)\n        totalUt = this.state.resources[0] - totalUt;\n        totalUb = this.state.resources[1] - totalUb\n        //console.log(\"new UT = \" + totalUt + \" new UB = \" + totalUb)\n        /*this.setState({\n            totalUt: totalUt,\n            totalUb: totalUb\n        })*/\n        //console.log(\"new UT = \" + this.state.totalUt + \" new UB = \" + this.state.totalUb)\n        //console.log(\"FINAL TOTAL UT \" + this.state.totalUt + \" UB \" + this.state.totalUb)\n        socket.emit(\"setPlayersResources\", totalUt, totalUb)\n        this.setState({interfaceCtx: 4})\n    }\n\n    /*\n        Function : componentDidMount\n    \n        Description : subscribe to the required function from server to keep up to date\n\n        Author : Hugo KELHETTER\n            \n    */\n    componentDidMount() {\n        socket.emit(\"getTurn\", (response) => {\n            this.setState({tour: response})\n        })\n\n        socket.emit(\"getTimer\", 3,(response) => {\n            console.log(response);\n            console.log(calculateTime(response));\n            this.setState({timer: calculateTime(response)});\n            console.log(\"State : \", this.state.timer);\n        })\n\n        socket.emit(\"getSettings\", (response) => {\n            console.log(\"GET SETTINGS = \", response[0].pTimer);\n            this.setState({pTimers: response[0].pTimer === 1});\n            console.log(\"state settings = \", this.state.pTimers);\n        })\n\n        socket.emit(\"getStats\", this.props.name, (response) => {\n            console.log(response[0]);\n            const resources = [response[0].ut, response[0].ub]\n            const competences = [response[0].GCultures, response[0].Verger,\n                response[0].BovinV, response[0].Viticulture, response[0].BovinL, response[0].Granivore];\n            //this.setState({competences, resources})\n            this.setState({competences, resources})\n            //console.log(calculateTime(response));\n            //this.setState({timer: calculateTi, me(response)});\n            //console.log(\"State : \", this.state.timer);\n        })\n\n        /*socket.emit(\"getPlayerActivity\", this.state.id, (response) => {\n            console.log(\"GET PLAYER ACTIVITY IS : \", response);\n        })*/\n\n\n        socket.on(\"disconnect\", () => {\n            this.setState({disconnected: true});\n        })\n\n        socket.on(\"connect\", () => {\n            if (this.state.disconnected) {\n                socket.emit('reconnect', this.props.room, this.props.name, () => {\n                    this.setState({disconnected: false})\n                });\n            }\n        })\n\n        if (this.props.role < 10) {\n            socket.emit(\"updateStats\", (response) => {\n                this.setState({ressources: response[0]})\n            })\n        }\n\n        socket.on(\"results\", (response) => {\n            this.setState({\n                ressources: response.stats,\n                data: response.graph,\n                fini: false,\n                displaySlider: true,\n                inputPhase: false\n            })\n            socket.emit(\"getTurn\", (response) => {\n                this.setState({tour: response})\n            })\n            this.setState({actions: {}})\n            socket.emit(\"getCurrentGrid\", (response) => {\n                this.receiveNewMap(response)\n            })\n            //    this.setState({ ressources: response[0] })\n\n        })\n        /*  socket.emit(\"createRoom\", \"player1\", 0, (responseCreateRoom) => {\n             this.setState({ room: responseCreateRoom })\n             socket.emit(\"startGame\")*/\n        socket.on(\"inputPhase\", () => {\n            console.log(\"aaaaaaaa\")\n            socket.emit(\"getCurrentGrid\", (response) => {\n                this.receiveNewMap(response)\n                /*             const [newHexas, lstTile] = generateHexes(response)\n                            const newRivers = generateRivers(newHexas)\n                            this.setState({ map: { ...this.state.map, moreHexas: newHexas, moreRivers: newRivers }, lstTile })\n                 */\n            })\n            this.setState({inputPhase: true})\n\n        })\n        socket.emit(\"getCurrentGrid\", (response) => {\n            this.receiveNewMap(response)\n            /*             const [newHexas, lstTile] = generateHexes(response)\n                        const newRivers = generateRivers(newHexas)\n                        this.setState({ map: { ...this.state.map, moreHexas: newHexas, moreRivers: newRivers }, lstTile })\n             */\n        })\n        socket.emit(\"getAllActions\", (response) => {\n            this.setState({lstActions: response})\n        })\n        socket.emit(\"playersInRoom\", (response) => {\n            const player = response.filter((player, i) => player.Name === this.props.name)\n            this.setState({lstPlayer: response, id: player[0].Id})\n            //})\n        })\n    }\n\n    componentWillUnmount() {\n        socket.removeAllListeners()\n    }\n\n\n    endRound = () => {\n        this.setState({fini: true, action: {}})\n    }\n\n    /* \n        Function : render\n     \n        Syntax  : render()\n     \n        Description : display the different components of the app\n        \n        Author : Hugo KELHETTER\n    */\n    closeDiary = () => {\n        this.setState({displayDiary: false})\n    }\n\n    openTuto() {\n        window.open(`${window.location.href}tutorial?tuto=3`)\n    }\n\n    displayDiary = () => {\n        this.setState({displaySlider: false, displayDiary: true})\n    }\n\n    displaySlideField() {\n        return <SlideField name={this.props.name} displayDiary={this.displayDiary}/>\n    }\n\n    actionChoice() {\n        let costs = this.calculateCosts();\n        //console.log(this.state.inputPhase)\n        return (<>\n            <Header tour={this.state.tour}\n                    role={this.props.role}\n                    pseudo={this.props.name}\n                    bassin={nameSubBassin(getSubBassin(this.state.id))}\n                    numeroPhase={3}\n                    h={(this.state.pTimers)? this.state.timer[0] : timersDefault(3)[0]}\n                    m={(this.state.pTimers)? this.state.timer[1] : timersDefault(3)[1]}\n                    s={(this.state.pTimers)? this.state.timer[2] : timersDefault(3)[2]}\n                    finishEvent={() => {this.setState({interfaceCtx : 4})}}/>\n            <div className=\"row\">\n                <div className=\"col-sm-2\">\n                    <MenuRight ut={23} ub={33} formations={[]} role={this.props.role} pseudo={this.props.name}/>\n                </div>\n                <div className=\"col-sm-10\">\n                    {<>\n                            {Object.keys(this.state.lstConvo).length > 0 ? <Chat lstConvo={this.state.lstConvo}/> : \"\"}\n                            <div className=\"row\">\n                                <div className=\"col-sm-8\">\n                                    <section>\n                                        {\n                                            this.state.map.moreHexas !== \"\" && <Bassin handleClick={this.handleClickTile}\n                                                                                       map={this.state.map}\n                                                                                       role={this.props.role}\n                                                                                       selectedId={idFromArray(this.state.selectedTile)}\n                                                                                       id={this.state.id}/>\n                                        }\n                                    </section>\n                                </div>\n                                <div className=\"col-sm-4\">\n                                    {<>\n                                        {console.log(this.state.actions)}\n                                            <DetailsParcelle id={this.state.selectedTile?.practice}\n                                                             currentActivity={this.state.lstActions[this.state.selectedTile?.practice - 101]?.Pratique}/>\n                                            {this.state.selectedTile === null ? null :\n                                                <section className={StylePratique.classNameSection} onClick={() => {\n                                                    this.setState({interfaceCtx: 0})\n                                                }}>\n                                                    <p className=\"text-center\">Choisir une activité</p>\n                                                </section>\n                                            }\n                                        <div className=\"text-center\">\n                                            {/*costs = this.calculateCosts()*/}\n                                            <section className={StylePratique.classNameSection}>\n                                                <header>\n                                                    Dépense de ce tour\n                                                </header>\n                                                <p>UT : {costs[0]}</p>\n                                                <p>UB : {costs[1]}</p>\n                                            </section>\n                                        </div>\n                                            <button onClick={this.handleSubmit}>Next</button>\n                                    </>\n                                    }\n                                </div>\n                            </div>\n                        </>\n                    }\n                </div>\n            </div>\n        </>)\n    }\n\n    /*\n        author : Hossam ELOUATI\n     */\n\n    /*< div className=\"App\" >\n                    {this.state.displayDiary &&\n                        <Diary nom={this.props.name} data={this.state.data} closeDiary={this.closeDiary} />}\n                    <Menu >\n                        {this.state.inputPhase ?\n                            <div id=\"menu\">\n                                <Button variant=\"contained\" color=\"primary\" onClick={this.openTuto}>Aide</Button>\n                                <p>Nous sommes au tour : {this.state.tour}</p>\n                                <p>Bonjour {this.props.name}. Vous êtes {roleToString(this.props.role)}, votre identifiant est {this.state.id}</p>\n                                {this.state.ressources !== undefined && <Ressources ressources={this.state.ressources} cost={this.state.cost} />}\n                                {!this.state.fini ?\n                                    <>\n                                        {console.log(\"SELECTED TILE = \", this.state.selectedTile)}\n                                        {this.state.selectedTile === null ? \"\" :\n                                            <ActivitySwapper key=\"changeActivity\" changeTileActivity={this.changeTileActivity}\n                                                selectedTile={this.state.selectedTile} actions={this.state.lstActions} />\n                                        }\n                                        {console.log(\"LIST ACTIONS = \", this.state.lstActions)}\n                                        <ValidationTour key=\"validation\" endRound={this.endRound} tour={this.state.tour} actions={this.state.actions} />\n                                    </>\n                                    : \" En attente des autres joueurs...\"}\n                            </div> : \"L'animateur est en train de modifier la carte\"}\n                    </Menu>\n                    {Object.keys(this.state.lstConvo).length > 0 ? <Chat lstConvo={this.state.lstConvo} /> : \"\"}\n                    <div className=\"row\">\n                        <div className=\"col-sm-6\">\n                            {\n                                this.state.map.moreHexas !== \"\" && <Bassin handleClick={this.handleClickTile}\n                                                                           map={this.state.map} role={this.props.role} selectedId={this.state.selectedTile?.id} id={this.state.id} />\n                            }\n                        </div>\n                        <div className=\"col-sm-6\">\n                            <DetailsParcelle id={this.state.selectedTile?.practice} currentActivity={this.state.selectedTile?.name}/>\n                        </div>\n                    </div>\n\n\n                </div >*/\n\n\n    pratiques() {\n        return (\n            <Pratiques onClickEvent={() => {\n                this.setState({interfaceCtx: 3})\n            }} changeTileActivity={this.changeTileActivity} selectedTile={this.state.selectedTile}\n                       actions={this.state.lstActions} role={this.props.role} pseudo={this.props.name}\n                        competences={this.state.competences}/>\n        )\n    }\n\n    updating() {\n        return (\n            <Updating ut={23} ub={3} oldUb={-1} oldUt={0} formations={[1, 0, 9, 1]} role={this.props.role}\n                      pseudo={this.props.name} bassin={nameSubBassin(getSubBassin(this.state.id))}\n                      tour={this.state.tour}\n                      h={timersDefault(1)[0]}\n                      m={timersDefault(2)[1]}\n                      s={timersDefault(3)[2]}\n                      onClickEvent={() => this.setState({interfaceCtx: 2})}\n                        pTimer={this.state.pTimers}/>\n        )\n\n    }\n\n    strategy() {\n        return (\n            <Strategy h={timersDefault(2)[0]}\n                      m={timersDefault(2)[1]}\n                      s={timersDefault(2)[2]} role={this.props.role} listPlayers={[\"Hossam\", \"Rien\", \"Plus\", \"Au\", \"CR\"]}\n                      pseudo={this.props.name} bassin={nameSubBassin(getSubBassin(this.state.id))}\n                      tour={this.state.tour} formations={[1, 0, 1, 1]}\n                      ut={23} ub={23}\n                      onClickEvent={() => this.setState({interfaceCtx: 3})} pTimer={this.state.pTimers}/>\n        )\n    }\n\n    events() {\n        return (\n            <Events pseudo={this.props.name} bassin={nameSubBassin(getSubBassin(this.state.id))} tour={this.state.tour}\n                    formations={[1, 0, 1, 1]} indicateurs={[123, 56]}\n                    ut={23} ub={23} meteorology={[[0, 1], [2, 1], [2, 3]]} role={this.props.role} maladie={true}\n                    onClickEvent={() => this.setState({interfaceCtx: 5})}\n                    h={timersDefault(4)[0]}\n                    m={timersDefault(4)[1]}\n                    s={timersDefault(4)[2]}\n                    pTimer={this.state.pTimers}/>\n        )\n    }\n\n    debriefing() {\n        return (\n            <>\n                <Debriefing h={timersDefault(5)[0]}\n                            m={timersDefault(5)[1]}\n                            s={timersDefault(5)[2]} role={this.props.role}\n                            pseudo={this.props.name} bassin={nameSubBassin(getSubBassin(this.state.id))}\n                            tour={this.state.tour}\n                            onClickEvent={() => this.setState({interfaceCtx: 6})}\n                            pTimer={this.state.pTimers}/>\n            </>\n        )\n    }\n\n    finishTour = () => {\n        socket.emit(\"finishTour\", this.state.id, true, (response) => {\n            console.log(\"Finish Tour : \", this.state.id);\n        })\n        //this.setState({interfaceCtx: 7});\n    }\n\n    satisfaction() {\n        return (\n            <Satisfaction role={this.props.role}\n                          h={timersDefault(6)[0]}\n                          m={timersDefault(6)[1]}\n                          s={timersDefault(6)[2]}\n                     pseudo={this.props.name}\n                          pTimer={this.state.pTimers}\n                     bassin={nameSubBassin(getSubBassin(this.state.id))}\n                     tour={this.state.tour} onClickEvent={this.finishTour} resultats={() => {this.setState({interfaceCtx: 7})}}/>\n        )\n    }\n\n    results() {\n        return (\n            <Results role={this.props.role}\n                     h={timersDefault(7)[0]}\n                     m={timersDefault(7)[1]}\n                     s={timersDefault(7)[2]}\n                            data={this.state.data}\n                          pseudo={this.props.name}\n                     pTimer={this.state.pTimers}\n                          bassin={nameSubBassin(getSubBassin(this.state.id))}\n                          tour={this.state.tour} onClickEvent={() => this.setState({interfaceCtx: 1}) }/>\n        )\n    }\n\n    render() {\n        console.log(\"CONTEXT : \", this.context);\n        return (\n            <>\n                {\n                    this.state.interfaceCtx === 1 ? this.updating() :\n                        <div>\n                            {this.state.interfaceCtx === 2 && this.strategy()}\n                            {this.state.interfaceCtx === 3 && this.actionChoice()}\n                            {this.state.interfaceCtx === 4 && this.events()}\n                            {this.state.interfaceCtx === 5 && this.debriefing()}\n                            {this.state.interfaceCtx === 6 && this.satisfaction()}\n                            {this.state.interfaceCtx === 7 && this.results()}\n                            {this.state.interfaceCtx === 0 && this.pratiques()}\n                        </div>\n                }\n                {/*{console.log(\"STATE ID = \" + this.state.id + \"\\nROLE = \"+this.props.role)}\n                <Updating ut={23} ub={3} oldUb={-1} oldUt={0} formations={[1, 0, 9, 1]} role={this.props.role} h={0} m={0} s={20}\n                   pseudo={this.props.name} bassin={nameSubBassin(getSubBassin(this.state.id))} numeroPhase={1} tour={this.state.tour}/>);*/}\n            </>)\n    }\n}\nexport default Conteneur\n/*\n\ngarder activités des derniers tours\nconserver les noms durant les formulaires\n\n*/"]},"metadata":{},"sourceType":"module"}