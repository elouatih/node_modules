{"ast":null,"code":"import _objectSpread from\"/home/elouati/Bureau/projet_working/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/home/elouati/Bureau/projet_working/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";/* \n    Function : handleClickTile\n\n    Syntax  : handleClickTile(h)\n        \n    Input   : h : data of the selectedTile\n        \n    Description : \n        change the state of selectedTile based on which tile is clicked and the current state\n        if the current state's id is equal to h's id, the state is set to null\n        else it is updated to h's data     \n\n    Author : Hugo KELHETTER\n*/import{socket}from\"../../socket\";import isIncluded from\"../../Interface/utils/isIncluded\";import deleteItemArray from\"../../Interface/utils/deleteItemArray\";function handleClickTileFarmer(h){var _this$state$selectedT,_this=this;console.log(\"SELECTED TILE = \",this.state.selectedTile);console.log(\"h.props.id = \"+h.props.id+\" .state.selectedTile.id = \"+((_this$state$selectedT=this.state.selectedTile)===null||_this$state$selectedT===void 0?void 0:_this$state$selectedT.id));var boolean=isIncluded(this.state.selectedTile,h.props)[0];var value=isIncluded(this.state.selectedTile,h.props)[1];console.log(\"BOOLEAN = \",boolean);console.log(\"VALUE = \",value);if(boolean){this.setState({selectedTile:deleteItemArray(this.state.selectedTile,value)});}/*if (h.props.id === this.state.selectedTile?.id) {\n        this.setState({ selectedTile: null })\n    }*/else{this.setState({selectedTile:[].concat(_toConsumableArray(this.state.selectedTile),[h.props])});console.log(\"SELECTED TILE = \",this.state.selectedTile);//this.setState({ selectedTile: h.props })\n//console.log(\"SELECTED TILE \", this.state.selectedTile?.id);\nif(this.props.role===1){socket.emit(\"getPlayerActivity\",this.state.id,h.props.id,function(response){console.log(\"GET PLAYER ACTIVITY IS : \",response[0]);//let { selectedTile } = this.state;\n_this.setState(function(state){var selectedTile=state.selectedTile.map(function(item){console.log(\"item = \",item.practice);item=_objectSpread(_objectSpread({},item),{},{practice:response[0].practice});//const source = {practice: response[0].practice}\n//console.log(\"SOURCE = \", source);\n//console.log(Object.assign(item, source));\n//const returned = Object.assign(item, source);\nreturn item;});return _objectSpread(_objectSpread({},state),{},{selectedTile:selectedTile});});/*this.setState({\n                    selectedTile : {\n                        ...this.state.selectedTile,\n                        practice: response[0].practice\n                    }\n                })*/ //console.log(this.state.selectedTile.practice);\n/*const newSelectedTile = this.state.selectedTile;\n                //console.log(newSelectedTile);\n                //newSelectedTile.practice = response[0].practice;\n                this.setState({[this.state.selectedTile.practice]: response[0].practice});\n                console.log(this.state.selectedTile)*/});}}}export default handleClickTileFarmer;","map":{"version":3,"sources":["/home/elouati/Bureau/projet_working/client/src/Game/controls/handleClickTileFarmer.js"],"names":["socket","isIncluded","deleteItemArray","handleClickTileFarmer","h","console","log","state","selectedTile","props","id","boolean","value","setState","role","emit","response","map","item","practice"],"mappings":"yUAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA,OAAQA,MAAR,KAAqB,cAArB,CACA,MAAOC,CAAAA,UAAP,KAAuB,kCAAvB,CACA,MAAOC,CAAAA,eAAP,KAA4B,uCAA5B,CAEA,QAASC,CAAAA,qBAAT,CAA+BC,CAA/B,CAAkC,sCAC9BC,OAAO,CAACC,GAAR,CAAY,kBAAZ,CAAgC,KAAKC,KAAL,CAAWC,YAA3C,EACAH,OAAO,CAACC,GAAR,CAAY,gBAAkBF,CAAC,CAACK,KAAF,CAAQC,EAA1B,CAA+B,4BAA/B,yBAA8D,KAAKH,KAAL,CAAWC,YAAzE,gDAA8D,sBAAyBE,EAAvF,CAAZ,EACA,GAAMC,CAAAA,OAAO,CAAGV,UAAU,CAAC,KAAKM,KAAL,CAAWC,YAAZ,CAA0BJ,CAAC,CAACK,KAA5B,CAAV,CAA6C,CAA7C,CAAhB,CACA,GAAMG,CAAAA,KAAK,CAAGX,UAAU,CAAC,KAAKM,KAAL,CAAWC,YAAZ,CAA0BJ,CAAC,CAACK,KAA5B,CAAV,CAA6C,CAA7C,CAAd,CACAJ,OAAO,CAACC,GAAR,CAAY,YAAZ,CAA0BK,OAA1B,EACAN,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAwBM,KAAxB,EACA,GAAID,OAAJ,CAAY,CACR,KAAKE,QAAL,CAAc,CAACL,YAAY,CAAEN,eAAe,CAAC,KAAKK,KAAL,CAAWC,YAAZ,CAA0BI,KAA1B,CAA9B,CAAd,EACH,CACD;AACJ;AACA,OALI,IAMK,CACD,KAAKC,QAAL,CAAc,CAACL,YAAY,8BAAM,KAAKD,KAAL,CAAWC,YAAjB,GAA+BJ,CAAC,CAACK,KAAjC,EAAb,CAAd,EACAJ,OAAO,CAACC,GAAR,CAAY,kBAAZ,CAAgC,KAAKC,KAAL,CAAWC,YAA3C,EACA;AACA;AACA,GAAG,KAAKC,KAAL,CAAWK,IAAX,GAAoB,CAAvB,CAAyB,CACrBd,MAAM,CAACe,IAAP,CAAY,mBAAZ,CAAiC,KAAKR,KAAL,CAAWG,EAA5C,CAAgDN,CAAC,CAACK,KAAF,CAAQC,EAAxD,CAA6D,SAAAM,QAAQ,CAAI,CACrEX,OAAO,CAACC,GAAR,CAAY,2BAAZ,CAAyCU,QAAQ,CAAC,CAAD,CAAjD,EACA;AACA,KAAI,CAACH,QAAL,CACI,SAAAN,KAAK,CAAI,CACL,GAAMC,CAAAA,YAAY,CAAGD,KAAK,CAACC,YAAN,CAAmBS,GAAnB,CAAuB,SAAAC,IAAI,CAAI,CAChDb,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAuBY,IAAI,CAACC,QAA5B,EACAD,IAAI,gCAAOA,IAAP,MAAaC,QAAQ,CAAEH,QAAQ,CAAC,CAAD,CAAR,CAAYG,QAAnC,EAAJ,CACA;AACA;AACA;AACA;AACA,MAAOD,CAAAA,IAAP,CACH,CARoB,CAArB,CASA,sCACOX,KADP,MAEIC,YAAY,CAAZA,YAFJ,GAIH,CAfL,EAiBA;AAChB;AACA;AACA;AACA;AACA,oBAzBqF,CA0BrE;AACA;AAChB;AACA;AACA;AACA,sDACa,CAhCD,EAiCH,CACJ,CACJ,CACD,cAAeL,CAAAA,qBAAf","sourcesContent":["/* \n    Function : handleClickTile\n\n    Syntax  : handleClickTile(h)\n        \n    Input   : h : data of the selectedTile\n        \n    Description : \n        change the state of selectedTile based on which tile is clicked and the current state\n        if the current state's id is equal to h's id, the state is set to null\n        else it is updated to h's data     \n\n    Author : Hugo KELHETTER\n*/\nimport {socket} from \"../../socket\";\nimport isIncluded from \"../../Interface/utils/isIncluded\";\nimport deleteItemArray from \"../../Interface/utils/deleteItemArray\";\n\nfunction handleClickTileFarmer(h) {\n    console.log(\"SELECTED TILE = \", this.state.selectedTile);\n    console.log(\"h.props.id = \" + h.props.id + \" .state.selectedTile.id = \" + this.state.selectedTile?.id)\n    const boolean = isIncluded(this.state.selectedTile, h.props)[0];\n    const value = isIncluded(this.state.selectedTile, h.props)[1];\n    console.log(\"BOOLEAN = \", boolean);\n    console.log(\"VALUE = \", value);\n    if (boolean){\n        this.setState({selectedTile: deleteItemArray(this.state.selectedTile, value)});\n    }\n    /*if (h.props.id === this.state.selectedTile?.id) {\n        this.setState({ selectedTile: null })\n    }*/\n    else {\n        this.setState({selectedTile: [...this.state.selectedTile, h.props]})\n        console.log(\"SELECTED TILE = \", this.state.selectedTile);\n        //this.setState({ selectedTile: h.props })\n        //console.log(\"SELECTED TILE \", this.state.selectedTile?.id);\n        if(this.props.role === 1){\n            socket.emit(\"getPlayerActivity\", this.state.id, h.props.id, (response => {\n                console.log(\"GET PLAYER ACTIVITY IS : \", response[0]);\n                //let { selectedTile } = this.state;\n                this.setState(\n                    state => {\n                        const selectedTile = state.selectedTile.map(item => {\n                            console.log(\"item = \", item.practice);\n                            item = {...item, practice: response[0].practice}\n                            //const source = {practice: response[0].practice}\n                            //console.log(\"SOURCE = \", source);\n                            //console.log(Object.assign(item, source));\n                            //const returned = Object.assign(item, source);\n                            return item;\n                        } )\n                        return {\n                            ...state,\n                            selectedTile\n                        }\n                    }\n                )\n                /*this.setState({\n                    selectedTile : {\n                        ...this.state.selectedTile,\n                        practice: response[0].practice\n                    }\n                })*/\n                //console.log(this.state.selectedTile.practice);\n                /*const newSelectedTile = this.state.selectedTile;\n                //console.log(newSelectedTile);\n                //newSelectedTile.practice = response[0].practice;\n                this.setState({[this.state.selectedTile.practice]: response[0].practice});\n                console.log(this.state.selectedTile)*/\n            }))\n        }\n    }\n}\nexport default handleClickTileFarmer"]},"metadata":{},"sourceType":"module"}