{"ast":null,"code":"import _defineProperty from\"/home/elouati/Bureau/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/home/elouati/Bureau/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/home/elouati/Bureau/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/elouati/Bureau/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/home/elouati/Bureau/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/elouati/Bureau/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/elouati/Bureau/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import{socket}from'../../socket.js';import{generateHexes,generateRivers}from\"../map/MapUtil.js\";import Bassin from\"../map/Bassin.js\";import handleClickTile from'../controls/handleClickTileFarmer.js';import ChangeTile from'./ChangeTile.js';import Menu from'../controls/Menu.js';import{Button,Typography}from'@material-ui/core';//import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\n//import CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport ConfirmDialog from\"../controls/ConfirmDialog.js\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var AnimatorLoader=/*#__PURE__*/function(_React$Component){_inherits(AnimatorLoader,_React$Component);var _super=_createSuper(AnimatorLoader);/* \n        Input : props={name}\n                name: string : name of the player\n        \n        Syntax : <AnimatorLoader name=\"player's name\"/>\n    */function AnimatorLoader(props){var _this;_classCallCheck(this,AnimatorLoader);_this=_super.call(this,props);_this.addConvo=function(data){if(data.convoName.length===0){alert(\"vous devez entrer un nom\");return false;}for(var entry in _this.state.lstConvo){if(entry==data.convoName){alert(\"Nom déjà pris\");return false;}}var newConvo=[];var name=data.convoName;for(var _entry in data.lstPlayer){if(!(_entry==\"convoName\"||_entry==\"lstConvo\")){if(data.lstPlayer[_entry])newConvo.push(_entry);}}if(newConvo.length>0){_this.setState({lstConvo:_objectSpread(_objectSpread({},_this.state.lstConvo),{},_defineProperty({},name,newConvo))});return true;}alert(\"Vous devez selectionner des joueurs\");return false;};_this.updateMap=function(tileChange){var tile=_this.state.map.moreHexas[tileChange.selectedTile-1];delete tileChange.selectedTile;tile=_this.updateObject(tile,tileChange);_this.setState({selectedTile:\"\"});};_this.handleSubmit=function(){/*         console.log(this.state.action)\n                switch (this.state.action) {\n                    case \"Commencer la partie\":\n                        this.setState({ mapReady: false })\n                        socket.emit(\"mapReady\")\n                        break;\n                    case \"Terminer la partie\":\n                        socket.emit(\"endGame\")\n                        break;\n                    default:\n                        socket.emit(\"nextTurn\", () => {\n                            socket.emit(\"getTurn\", (response) => {\n                                this.setState({ tour: response })\n                            })\n                        })\n                } */var action=_this.actionToString();if(action===\"Finir les modifications\"){if(_this.state.tour==-1){socket.emit(\"mapReady\");console.log(\"mapReady\");_this.setState({tour:0});}else{socket.emit(\"inputPhase\");console.log(\"inputphase\");}}else socket.emit(\"nextTurn\",function(){socket.emit(\"getTurn\",function(response){console.log(response);_this.setState({tour:response});});});_this.setState({displayConfirmDialog:false,farmersPlaying:!_this.state.farmersPlaying});};_this.cancel=function(){_this.setState({displayConfirmDialog:false});};_this.handleContinue=function(event){/* console.log(event.currentTarget, event.currentTarget.name)\n        this.setState({ farmersPlaying: !this.state.farmersPlaying })\n        if (!this.state.farmersPlaying) { socket.emit(\"inputPhase\", () => { }) } */_this.setState({action:event.currentTarget.name,displayConfirmDialog:true});};_this.state={lstPlayer:\"\",lstTile:\"\",map:{moreHexas:\"\",moreRivers:null},mapReady:true,tour:-1,action:\"\",disconnected:false,farmersPlaying:false};//this.addConvo = this.addConvo.bind(this)\n_this.handleClickTile=handleClickTile.bind(_assertThisInitialized(_this));return _this;}_createClass(AnimatorLoader,[{key:\"componentDidMount\",value:/* \n        Function : componentDidMount\n\n        Description : retrieve the map and players's data\n\n        Author : Hugo KELHETTER\n \n    */function componentDidMount(){var _this2=this;socket.on(\"disconnect\",function(){_this2.setState({disconnected:true});});socket.on(\"connect\",function(){if(_this2.state.disconnected){socket.emit('reconnect',_this2.props.room,_this2.props.name,function(){_this2.setState({disconnected:false});});}});socket.emit(\"getCurrentGrid\",function(response){var newHexas=generateHexes(response);var lstTile=newHexas[1];var newRivers=generateRivers(newHexas[0]);//const tampon = this.createTampon(newHexas, this.state.map.player)\n_this2.setState({map:_objectSpread(_objectSpread({},_this2.state.map),{},{moreHexas:newHexas[0],moreRivers:newRivers,selectedTile:null}),lstTile:lstTile});});socket.emit(\"playersInRoom\",function(response){_this2.setState({lstPlayer:response});//})\n});}/* \n        Function : updateObject\n\n        Syntax  : obj=updateObject(source,newData)\n\n        Input   : source : object : the object to update\n                  newData : object : the object containing new data\n\n        Output  : obj : object : an updated object\n\n        Description : update source with the subset of data contained in newData\n                        let source = {firstname:hugo,name:kelhetter} and newData={firstname:jhon}\n                        let newObject=updateObject(source,newData)\n                        newObject = {firstname:jhon,name:kelhetter}\n\n        Author : Hugo KELHETTER\n    \n    */},{key:\"updateObject\",value:function updateObject(source,newData){for(var key in newData){source[key]=newData[key];}return source;}/* \n        Function : updateMap\n\n        Syntax  : updateMap(tileChange)\n\n        Input   : tileChange : object : new set of data for a tile of the map\n\n        Description : update the map with new data\n\n        Author : Hugo KELHETTER\n    \n    */},{key:\"openTuto\",value:function openTuto(){window.open(\"\".concat(window.location.href,\"tutorial?tuto=2\"));}},{key:\"actionToString\",value:function actionToString(){if(this.state.farmersPlaying)return\"Finir le tour\";return\"Finir les modifications\";}},{key:\"endGame\",value:function endGame(){socket.emit(\"endGame\");}/* \n    Function : render\n\n    Syntax  : render()\n\n    Description : display the UI of the animator : the map, and controls over the map and the game in general\n\n    Author : Hugo KELHETTER\n \n*/},{key:\"render\",value:function render(){var _this$state$selectedT;console.log(this.state.tour);var buttonValue=this.actionToString();//const buttonValue = this.state.mapReady ? \"Commencer la partie\" : `Terminer le tour ${this.state.tour}`\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[this.state.displayConfirmDialog&&/*#__PURE__*/_jsx(ConfirmDialog,{cancel:this.cancel,confirm:this.handleSubmit,action:this.state.action}),/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsxs(Menu,{children:[/*#__PURE__*/_jsxs(\"div\",{id:\"menu\",children:[/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",onClick:this.openTuto,children:\"Aide\"}),/*#__PURE__*/_jsxs(Typography,{children:[\"tour actuel : \",this.state.tour]}),/*#__PURE__*/_jsxs(Typography,{children:[\" \",this.state.mapReady&&\"Vous pouvez modifier la carte avant le début de la partie. \"]}),/*#__PURE__*/_jsx(Typography,{children:\" Cliquez sur une case pour apporter des modifications\"}),/*#__PURE__*/_jsxs(Typography,{children:[\" L'identifiant de la partie est : \",this.props.room]}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",\"data-testid\":\"submit\",name:buttonValue,value:buttonValue,onClick:this.handleContinue,children:buttonValue}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",\"data-testid\":\"submit\",name:\"Terminer la partie\",onClick:this.endGame,children:\"Terminer la partie\"})]}),this.state.lstPlayer!==\"\"&&this.state.lstTile!==\"\"&&this.state.selectedTile&&!this.state.farmersPlaying&&/*#__PURE__*/_jsx(\"div\",{id:\"changeTile\",children:/*#__PURE__*/_jsx(ChangeTile,{lstPlayer:this.state.lstPlayer,lstTile:this.state.map.moreHexas,updateMap:this.updateMap,selectedTile:this.state.selectedTile,type:this.state.selectedTile.className,id:this.state.selectedTile.id})})]}),this.state.map.moreHexas!==\"\"&&/*#__PURE__*/_jsx(Bassin,{handleClick:this.handleClickTile,selectedId:(_this$state$selectedT=this.state.selectedTile)===null||_this$state$selectedT===void 0?void 0:_this$state$selectedT.id,map:this.state.map,role:this.props.role,id:this.state.id})]})]});}}]);return AnimatorLoader;}(React.Component);export{AnimatorLoader as default};","map":{"version":3,"sources":["/home/elouati/Bureau/client/src/Game/animator/AnimatorLoader.js"],"names":["React","socket","generateHexes","generateRivers","Bassin","handleClickTile","ChangeTile","Menu","Button","Typography","ConfirmDialog","AnimatorLoader","props","addConvo","data","convoName","length","alert","entry","state","lstConvo","newConvo","name","lstPlayer","push","setState","updateMap","tileChange","tile","map","moreHexas","selectedTile","updateObject","handleSubmit","action","actionToString","tour","emit","console","log","response","displayConfirmDialog","farmersPlaying","cancel","handleContinue","event","currentTarget","lstTile","moreRivers","mapReady","disconnected","bind","on","room","newHexas","newRivers","source","newData","key","window","open","location","href","buttonValue","openTuto","endGame","className","id","role","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { socket } from '../../socket.js'\nimport PropTypes from 'prop-types';\nimport { generateHexes, generateRivers } from \"../map/MapUtil.js\"\nimport Bassin from \"../map/Bassin.js\"\nimport handleClickTile from '../controls/handleClickTileFarmer.js'\nimport ChangeTile from './ChangeTile.js'\nimport Menu from '../controls/Menu.js'\nimport { Button, Typography } from '@material-ui/core'\n//import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\n//import CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport ConfirmDialog from \"../controls/ConfirmDialog.js\"\n\nexport default class AnimatorLoader extends React.Component {\n    /* \n        Input : props={name}\n                name: string : name of the player\n        \n        Syntax : <AnimatorLoader name=\"player's name\"/>\n    */\n    constructor(props) {\n        super(props)\n        this.state = {\n            lstPlayer: \"\", lstTile: \"\", map: { moreHexas: \"\", moreRivers: null }, mapReady: true, tour: -1, action: \"\",\n            disconnected: false, farmersPlaying: false\n\n        }\n        //this.addConvo = this.addConvo.bind(this)\n        this.handleClickTile = handleClickTile.bind(this)\n\n    }\n    static propTypes = {\n        name: PropTypes.string.isRequired\n    }\n    /* \nFunction : addConvo\n\nSyntax  : boolean=addConvo(data)\n\nInput   : object following the next pattern\n            {\n                convoName : \"name of the conversation\",\n                player1 : boolean,\n                player2 : boolean\n                ...\n            }\n            playerN's represents the player's name and the value represents \n                    whether or not it is part of the conversation\n\nOutput  : the success of the function\n\nDescription : display the different components of the app\n\nAuthor : Hugo KELHETTER\n    \n*/\n    addConvo = (data) => {\n\n        if (data.convoName.length === 0) {\n            alert(\"vous devez entrer un nom\")\n            return false\n        }\n        for (const entry in this.state.lstConvo) {\n            if (entry == data.convoName) {\n                alert(\"Nom déjà pris\")\n                return false\n            }\n        }\n        let newConvo = []\n        const name = data.convoName\n        for (const entry in data.lstPlayer) {\n            if (!(entry == \"convoName\" || entry == \"lstConvo\")) {\n                if (data.lstPlayer[entry]) newConvo.push(entry)\n            }\n        }\n\n        if (newConvo.length > 0) {\n            this.setState({ lstConvo: { ...this.state.lstConvo, [name]: newConvo } })\n            return true\n        }\n        alert(\"Vous devez selectionner des joueurs\")\n        return false\n    }\n    /* \n        Function : componentDidMount\n\n        Description : retrieve the map and players's data\n\n        Author : Hugo KELHETTER\n \n    */\n    componentDidMount() {\n        socket.on(\"disconnect\", () => {\n            this.setState({ disconnected: true });\n        })\n\n        socket.on(\"connect\", () => {\n            if (this.state.disconnected) {\n                socket.emit('reconnect', this.props.room, this.props.name, () => {\n                    this.setState({ disconnected: false })\n                });\n            }\n        })\n\n        socket.emit(\"getCurrentGrid\", (response) => {\n            const newHexas = generateHexes(response)\n            let lstTile = newHexas[1]\n            const newRivers = generateRivers(newHexas[0])\n            //const tampon = this.createTampon(newHexas, this.state.map.player)\n            this.setState({ map: { ...this.state.map, moreHexas: newHexas[0], moreRivers: newRivers, selectedTile: null }, lstTile })\n\n        })\n        socket.emit(\"playersInRoom\", (response) => {\n            this.setState({ lstPlayer: response })\n            //})\n        })\n    }\n    /* \n        Function : updateObject\n\n        Syntax  : obj=updateObject(source,newData)\n\n        Input   : source : object : the object to update\n                  newData : object : the object containing new data\n\n        Output  : obj : object : an updated object\n\n        Description : update source with the subset of data contained in newData\n                        let source = {firstname:hugo,name:kelhetter} and newData={firstname:jhon}\n                        let newObject=updateObject(source,newData)\n                        newObject = {firstname:jhon,name:kelhetter}\n\n        Author : Hugo KELHETTER\n    \n    */\n    updateObject(source, newData) {\n        for (const key in newData) {\n            source[key] = newData[key]\n        }\n        return source\n    }\n    /* \n        Function : updateMap\n\n        Syntax  : updateMap(tileChange)\n\n        Input   : tileChange : object : new set of data for a tile of the map\n\n        Description : update the map with new data\n\n        Author : Hugo KELHETTER\n    \n    */\n\n    updateMap = (tileChange) => {\n        let tile = this.state.map.moreHexas[tileChange.selectedTile - 1]\n        delete tileChange.selectedTile\n        tile = this.updateObject(tile, tileChange)\n        this.setState({ selectedTile: \"\" })\n    }\n    /* \n        Function : handleSubmit\n\n        Syntax  : handleSubmit()\n\n        Description : if mapReady == false then it starts the game for other players\n                      else it ends the turn\n\n        Author : Hugo KELHETTER\n    \n    */\n    handleSubmit = () => {\n        /*         console.log(this.state.action)\n                switch (this.state.action) {\n                    case \"Commencer la partie\":\n                        this.setState({ mapReady: false })\n                        socket.emit(\"mapReady\")\n                        break;\n                    case \"Terminer la partie\":\n                        socket.emit(\"endGame\")\n                        break;\n                    default:\n                        socket.emit(\"nextTurn\", () => {\n                            socket.emit(\"getTurn\", (response) => {\n                                this.setState({ tour: response })\n                            })\n                        })\n                } */\n        const action = this.actionToString()\n        if (action === \"Finir les modifications\") {\n            if (this.state.tour == -1) {\n                socket.emit(\"mapReady\")\n                console.log(\"mapReady\")\n                this.setState({ tour: 0 })\n            }\n            else {\n                socket.emit(\"inputPhase\")\n                console.log(\"inputphase\")\n            }\n        }\n        else socket.emit(\"nextTurn\", () => {\n            socket.emit(\"getTurn\", (response) => {\n                console.log(response)\n\n                this.setState({ tour: response })\n            })\n        })\n        this.setState({ displayConfirmDialog: false, farmersPlaying: !this.state.farmersPlaying })\n    }\n    cancel = () => {\n        this.setState({ displayConfirmDialog: false })\n    }\n    handleContinue = (event) => {\n        /* console.log(event.currentTarget, event.currentTarget.name)\n        this.setState({ farmersPlaying: !this.state.farmersPlaying })\n        if (!this.state.farmersPlaying) { socket.emit(\"inputPhase\", () => { }) } */\n        this.setState({ action: event.currentTarget.name, displayConfirmDialog: true })\n    }\n\n    openTuto() {\n        window.open(`${window.location.href}tutorial?tuto=2`)\n    }\n    actionToString() {\n        if (this.state.farmersPlaying) return \"Finir le tour\"\n        return \"Finir les modifications\"\n    }\n    endGame() {\n        socket.emit(\"endGame\")\n    }\n    /* \n    Function : render\n\n    Syntax  : render()\n\n    Description : display the UI of the animator : the map, and controls over the map and the game in general\n\n    Author : Hugo KELHETTER\n \n*/\n    render() {\n        console.log(this.state.tour)\n        const buttonValue = this.actionToString()\n        //const buttonValue = this.state.mapReady ? \"Commencer la partie\" : `Terminer le tour ${this.state.tour}`\n        return (<>\n            {this.state.displayConfirmDialog && <ConfirmDialog cancel={this.cancel} confirm={this.handleSubmit} action={this.state.action} />}\n\n            <div className=\"App\">\n                {\n                    < Menu >\n                        <div id=\"menu\">\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.openTuto}>\n                                Aide\n                            </Button>\n                            <Typography>tour actuel : {this.state.tour}</Typography>\n                            <Typography> {this.state.mapReady && \"Vous pouvez modifier la carte avant le début de la partie. \"}</Typography>\n                            <Typography> Cliquez sur une case pour apporter des modifications</Typography>\n                            <Typography> L'identifiant de la partie est : {this.props.room}</Typography>\n                            <Button variant=\"contained\" color=\"primary\" data-testid=\"submit\" name={buttonValue} value={buttonValue} onClick={this.handleContinue}>\n                                {buttonValue}\n                            </Button>\n                            <Button variant=\"contained\" color=\"primary\" data-testid=\"submit\" name=\"Terminer la partie\" onClick={this.endGame}>\n                                Terminer la partie\n                            </Button>\n                        </div>\n                        {(this.state.lstPlayer !== \"\" && this.state.lstTile !== \"\" && this.state.selectedTile && !this.state.farmersPlaying) &&\n                            <div id=\"changeTile\">\n                                <ChangeTile lstPlayer={this.state.lstPlayer} lstTile={this.state.map.moreHexas} updateMap={this.updateMap}\n                                    selectedTile={this.state.selectedTile} type={this.state.selectedTile.className} id={this.state.selectedTile.id} />\n                            </div>\n                        }\n                    </Menu>\n                }\n                {\n                    this.state.map.moreHexas !== \"\" && <Bassin handleClick={this.handleClickTile} selectedId={this.state.selectedTile?.id}\n                        map={this.state.map} role={this.props.role} id={this.state.id} />\n                }\n            </div >\n        </>);\n    }\n}"]},"metadata":{},"sourceType":"module"}