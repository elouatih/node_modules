{"ast":null,"code":"const fs = require(\"fs\");\n\nexport default function defaultSettings(file) {\n  let defaultRes = [];\n  let res = new Promise(resolve => {\n    fs.readFile(file, 'utf8', (err, data) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n\n      resolve(data);\n    });\n  });\n  let lines = res.split(\"\\n\");\n\n  for (var line = 1; line < lines.length; line++) {\n    let subResult = [];\n    let max = file === '../../settings/agris.txt' ? 8 : 5;\n    let elements = lines[line].split(',');\n    elements = elements.slice(1, max);\n\n    for (var i = 0; i < elements.length; i++) {\n      subResult.push(parseInt(elements[i]));\n    }\n\n    defaultRes.push(subResult);\n  }\n\n  console.log(defaultRes);\n  return defaultRes;\n}\n/*\nconst defaultAgris = async () => {\n    const file = '../settings/agris.txt';\n    let defaultAgri = [];\n    let res = await new Promise(resolve => {\n        fs.readFile(file,'utf8', (err, data) => {\n            if (err) {\n                console.error(err);\n                return\n            }\n            resolve(data)\n        })\n    });\n    let lines = res.split(\"\\n\");\n    for(var line = 1; line < lines.length; line++){\n        let agri = [];\n        let elements = lines[line].split(',');\n        elements = elements.slice(1, 8);\n        for(var e=0; e<elements.length; e++){\n            agri.push(parseInt(elements[e]));\n        }\n        defaultAgri.push(agri);\n    }\n    console.log(defaultAgri);\n    return defaultAgri;\n}\n\nconst defaultTimers = async () => {\n    const file = '../settings/timers.txt';\n    let defaultTimers = [];\n    let res = await new Promise(resolve => {\n        fs.readFile(file,'utf8', (err, data) => {\n            if (err) {\n                console.error(err);\n                return\n            }\n            resolve(data)\n        })\n    });\n    let lines = res.split(\"\\n\");\n    for(var line = 1; line < lines.length; line++){\n        let agri = [];\n        let elements = lines[line].split(',');\n        elements = elements.slice(1, 8);\n        for(var e=0; e<elements.length; e++){\n            agri.push(parseInt(elements[e]));\n        }\n        defaultAgri.push(agri);\n    }\n    console.log(defaultAgri);\n    return defaultAgri;\n}*/\n\nmodule.exports = {\n  defaultSettings\n};","map":{"version":3,"sources":["/home/elouati/Bureau/projet_working/client/src/Interface/utils/defaultSettings.js"],"names":["fs","require","defaultSettings","file","defaultRes","res","Promise","resolve","readFile","err","data","console","error","lines","split","line","length","subResult","max","elements","slice","i","push","parseInt","log","module","exports"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AAEA,eAAe,SAASC,eAAT,CAA0BC,IAA1B,EAAiC;AAC5C,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,GAAG,GAAG,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC7BP,IAAAA,EAAE,CAACQ,QAAH,CAAYL,IAAZ,EAAkB,MAAlB,EAA0B,CAACM,GAAD,EAAMC,IAAN,KAAe;AACrC,UAAGD,GAAH,EAAQ;AACJE,QAAAA,OAAO,CAACC,KAAR,CAAcH,GAAd;AACA;AACH;;AACDF,MAAAA,OAAO,CAACG,IAAD,CAAP;AACH,KAND;AAOH,GARS,CAAV;AASA,MAAIG,KAAK,GAAGR,GAAG,CAACS,KAAJ,CAAU,IAAV,CAAZ;;AACA,OAAI,IAAIC,IAAI,GAAC,CAAb,EAAgBA,IAAI,GAAGF,KAAK,CAACG,MAA7B,EAAqCD,IAAI,EAAzC,EAA4C;AACxC,QAAIE,SAAS,GAAG,EAAhB;AACA,QAAIC,GAAG,GAAIf,IAAI,KAAK,0BAAV,GAAwC,CAAxC,GAA4C,CAAtD;AACA,QAAIgB,QAAQ,GAAGN,KAAK,CAACE,IAAD,CAAL,CAAYD,KAAZ,CAAkB,GAAlB,CAAf;AACAK,IAAAA,QAAQ,GAAGA,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBF,GAAlB,CAAX;;AACA,SAAI,IAAIG,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,QAAQ,CAACH,MAAxB,EAAgCK,CAAC,EAAjC,EAAoC;AAChCJ,MAAAA,SAAS,CAACK,IAAV,CAAeC,QAAQ,CAACJ,QAAQ,CAACE,CAAD,CAAT,CAAvB;AACH;;AACDjB,IAAAA,UAAU,CAACkB,IAAX,CAAgBL,SAAhB;AACH;;AACDN,EAAAA,OAAO,CAACa,GAAR,CAAYpB,UAAZ;AACA,SAAOA,UAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAqB,MAAM,CAACC,OAAP,GAAiB;AACbxB,EAAAA;AADa,CAAjB","sourcesContent":["const fs = require(\"fs\");\n\nexport default function defaultSettings (file)  {\n    let defaultRes = [];\n    let res = new Promise(resolve => {\n        fs.readFile(file, 'utf8', (err, data) => {\n            if(err) {\n                console.error(err);\n                return\n            }\n            resolve(data)\n        })\n    });\n    let lines = res.split(\"\\n\");\n    for(var line=1; line < lines.length; line++){\n        let subResult = [];\n        let max = (file === '../../settings/agris.txt') ? 8 : 5;\n        let elements = lines[line].split(',');\n        elements = elements.slice(1, max);\n        for(var i=0; i<elements.length; i++){\n            subResult.push(parseInt(elements[i]));\n        }\n        defaultRes.push(subResult);\n    }\n    console.log(defaultRes);\n    return defaultRes;\n}\n/*\nconst defaultAgris = async () => {\n    const file = '../settings/agris.txt';\n    let defaultAgri = [];\n    let res = await new Promise(resolve => {\n        fs.readFile(file,'utf8', (err, data) => {\n            if (err) {\n                console.error(err);\n                return\n            }\n            resolve(data)\n        })\n    });\n    let lines = res.split(\"\\n\");\n    for(var line = 1; line < lines.length; line++){\n        let agri = [];\n        let elements = lines[line].split(',');\n        elements = elements.slice(1, 8);\n        for(var e=0; e<elements.length; e++){\n            agri.push(parseInt(elements[e]));\n        }\n        defaultAgri.push(agri);\n    }\n    console.log(defaultAgri);\n    return defaultAgri;\n}\n\nconst defaultTimers = async () => {\n    const file = '../settings/timers.txt';\n    let defaultTimers = [];\n    let res = await new Promise(resolve => {\n        fs.readFile(file,'utf8', (err, data) => {\n            if (err) {\n                console.error(err);\n                return\n            }\n            resolve(data)\n        })\n    });\n    let lines = res.split(\"\\n\");\n    for(var line = 1; line < lines.length; line++){\n        let agri = [];\n        let elements = lines[line].split(',');\n        elements = elements.slice(1, 8);\n        for(var e=0; e<elements.length; e++){\n            agri.push(parseInt(elements[e]));\n        }\n        defaultAgri.push(agri);\n    }\n    console.log(defaultAgri);\n    return defaultAgri;\n}*/\n\nmodule.exports = {\n    defaultSettings\n}\n\n"]},"metadata":{},"sourceType":"module"}