{"ast":null,"code":"var _jsxFileName = \"/home/elouati/Bureau/projet_working/client/src/Game/animator/timers-context.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimerContext = /*#__PURE__*/createContext({\n  timerUpdating: [],\n  timerStrategy: [],\n  timerActions: [],\n  timerEvents: [],\n  timerDebriefing: [],\n  timerSatisfaction: [],\n  timerResults: [],\n  updateTimerUpdating: timer => {},\n  updateTimerStrategy: timer => {},\n  updateTimerActions: timer => {},\n  updateTimerEvents: timer => {},\n  updateTimerDebriefing: timer => {},\n  updateTimerSatisfaction: timer => {},\n  updateTimerResults: timer => {}\n});\nexport function TimerContextProvider(props) {\n  _s();\n\n  const [updating, setUpdating] = useState([]);\n  const [strategy, setStrategy] = useState([]);\n  const [actions, setActions] = useState([]);\n  const [events, setEvents] = useState([]);\n  const [debriefing, setDebriefing] = useState([]);\n  const [satisfaction, setSatisfaction] = useState([]);\n  const [results, setResults] = useState([]);\n\n  function updateTimerUpdatingHandler(timer) {\n    setUpdating(timer);\n  }\n\n  function updateTimerStrategyHandler(timer) {\n    setStrategy(timer);\n  }\n\n  function updateTimerActionsHandler(timer) {\n    setActions(timer);\n  }\n\n  function updateTimerEventsHandler(timer) {\n    setEvents(timer);\n  }\n\n  function updateTimerDebriefingHandler(timer) {\n    setDebriefing(timer);\n  }\n\n  function updateTimerSatisfactionHandler(timer) {\n    setSatisfaction(timer);\n  }\n\n  function updateTimerResultsHandler(timer) {\n    setResults(timer);\n  }\n\n  const context = {\n    timerUpdating: updating,\n    timerStrategy: strategy,\n    timerActions: actions,\n    timerEvents: events,\n    timerDebriefing: debriefing,\n    timerSatisfaction: satisfaction,\n    timerResults: results,\n    updateTimerUpdating: updateTimerUpdatingHandler,\n    updateTimerStrategy: updateStrategyHandler,\n    updateActions: updateActionsHandler,\n    updateEvents: updateEventsHandler,\n    updateDebriefing: updateDebriefingHandler,\n    updateSatisfaction: updateSatisfactionHandler,\n    updateResults: updateResultsHandler\n  };\n  return /*#__PURE__*/_jsxDEV(TimerContext.Provider, {\n    value: context,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 12\n  }, this);\n}\n\n_s(TimerContextProvider, \"4h8OnYMRL1kWF4jj+YXHiHPW2hE=\");\n\n_c = TimerContextProvider;\nexport default TimerContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimerContextProvider\");","map":{"version":3,"sources":["/home/elouati/Bureau/projet_working/client/src/Game/animator/timers-context.js"],"names":["createContext","useState","TimerContext","timerUpdating","timerStrategy","timerActions","timerEvents","timerDebriefing","timerSatisfaction","timerResults","updateTimerUpdating","timer","updateTimerStrategy","updateTimerActions","updateTimerEvents","updateTimerDebriefing","updateTimerSatisfaction","updateTimerResults","TimerContextProvider","props","updating","setUpdating","strategy","setStrategy","actions","setActions","events","setEvents","debriefing","setDebriefing","satisfaction","setSatisfaction","results","setResults","updateTimerUpdatingHandler","updateTimerStrategyHandler","updateTimerActionsHandler","updateTimerEventsHandler","updateTimerDebriefingHandler","updateTimerSatisfactionHandler","updateTimerResultsHandler","context","updateStrategyHandler","updateActions","updateActionsHandler","updateEvents","updateEventsHandler","updateDebriefing","updateDebriefingHandler","updateSatisfaction","updateSatisfactionHandler","updateResults","updateResultsHandler","children"],"mappings":"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","sourcesContent":["import { createContext, useState } from 'react';\n\nconst TimerContext = createContext({\n    timerUpdating: [],\n    timerStrategy: [],\n    timerActions: [],\n    timerEvents: [],\n    timerDebriefing: [],\n    timerSatisfaction: [],\n    timerResults: [],\n    updateTimerUpdating: (timer) => { },\n    updateTimerStrategy: (timer) => { },\n    updateTimerActions: (timer) => { },\n    updateTimerEvents: (timer) => { },\n    updateTimerDebriefing: (timer) => { },\n    updateTimerSatisfaction: (timer) => { },\n    updateTimerResults: (timer) => { },\n});\n\nexport function TimerContextProvider(props) {\n\n    const [updating, setUpdating] = useState([]);\n    const [strategy, setStrategy] = useState([]);\n    const [actions, setActions] = useState([]);\n    const [events, setEvents] = useState([]);\n    const [debriefing, setDebriefing] = useState([]);\n    const [satisfaction, setSatisfaction] = useState([]);\n    const [results, setResults] = useState([]);\n\n    function updateTimerUpdatingHandler(timer) {\n        setUpdating(timer);\n    }\n    function updateTimerStrategyHandler(timer) {\n        setStrategy(timer);\n    }\n    function updateTimerActionsHandler(timer) {\n        setActions(timer);\n    }\n    function updateTimerEventsHandler(timer) {\n        setEvents(timer);\n    }\n    function updateTimerDebriefingHandler(timer) {\n        setDebriefing(timer);\n    }\n    function updateTimerSatisfactionHandler(timer) {\n        setSatisfaction(timer);\n    }\n    function updateTimerResultsHandler(timer) {\n        setResults(timer);\n    }\n\n    const context = {\n        timerUpdating: updating,\n        timerStrategy: strategy,\n        timerActions: actions,\n        timerEvents: events,\n        timerDebriefing: debriefing,\n        timerSatisfaction: satisfaction,\n        timerResults: results,\n        updateTimerUpdating: updateTimerUpdatingHandler,\n        updateTimerStrategy: updateStrategyHandler,\n        updateActions: updateActionsHandler,\n        updateEvents: updateEventsHandler,\n        updateDebriefing: updateDebriefingHandler,\n        updateSatisfaction: updateSatisfactionHandler,\n        updateResults: updateResultsHandler\n    };\n\n    return <TimerContext.Provider value={context}>\n        {props.children}\n    </TimerContext.Provider>\n}\n\nexport default TimerContext;"]},"metadata":{},"sourceType":"module"}