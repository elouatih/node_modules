[{"/home/elouati/Bureau/projet_working/client/src/index.js":"1","/home/elouati/Bureau/projet_working/client/src/App.js":"2","/home/elouati/Bureau/projet_working/client/src/reportWebVitals.js":"3","/home/elouati/Bureau/projet_working/client/src/Menu/player-context.js":"4","/home/elouati/Bureau/projet_working/client/src/Menu/menu-context.js":"5","/home/elouati/Bureau/projet_working/client/src/tutoriel.js":"6","/home/elouati/Bureau/projet_working/client/src/GameOver.js":"7","/home/elouati/Bureau/projet_working/client/src/socket.js":"8","/home/elouati/Bureau/projet_working/client/src/tutorials/PlayAsAnimator.js":"9","/home/elouati/Bureau/projet_working/client/src/tutorials/NotExistingTuto.js":"10","/home/elouati/Bureau/projet_working/client/src/tutorials/PlayAsFarmer.js":"11","/home/elouati/Bureau/projet_working/client/src/tutorials/CreateAndJoinGame.js":"12","/home/elouati/Bureau/projet_working/client/src/Menu/Menu.js":"13","/home/elouati/Bureau/projet_working/client/src/Game/controls/warningText.js":"14","/home/elouati/Bureau/projet_working/client/src/Game/map/MapUtil.js":"15","/home/elouati/Bureau/projet_working/client/src/Game/animator/AnimatorLoader.js":"16","/home/elouati/Bureau/projet_working/client/src/Game/Game.js":"17","/home/elouati/Bureau/projet_working/client/src/Game/controls/Menu.js":"18","/home/elouati/Bureau/projet_working/client/src/Game/controls/handleClickTileFarmer.js":"19","/home/elouati/Bureau/projet_working/client/src/Game/controls/ConfirmDialog.js":"20","/home/elouati/Bureau/projet_working/client/src/Game/controls/Ressources.js":"21","/home/elouati/Bureau/projet_working/client/src/Game/controls/roleToString.js":"22","/home/elouati/Bureau/projet_working/client/src/Game/Diary.js":"23","/home/elouati/Bureau/projet_working/client/src/Game/controls/ActivitySwapper.js":"24","/home/elouati/Bureau/projet_working/client/src/Game/controls/ValidationTour.js":"25","/home/elouati/Bureau/projet_working/client/src/Game/controls/SlideField.js":"26","/home/elouati/Bureau/projet_working/client/src/Game/Chat.js":"27","/home/elouati/Bureau/projet_working/client/src/Game/map/Bassin.js":"28","/home/elouati/Bureau/projet_working/client/src/Game/animator/ChangeTile.js":"29","/home/elouati/Bureau/projet_working/client/src/Game/controls/createCheckbox.js":"30","/home/elouati/Bureau/projet_working/client/src/Game/map/layoutProps.js":"31","/home/elouati/Bureau/projet_working/client/src/Interface/Updating/Updating.js":"32","/home/elouati/Bureau/projet_working/client/src/Interface/Header/Header.js":"33","/home/elouati/Bureau/projet_working/client/src/Interface/utils/roleToString.js":"34","/home/elouati/Bureau/projet_working/client/src/Interface/utils/phaseToString.js":"35","/home/elouati/Bureau/projet_working/client/src/Interface/utils/MeetingTime.js":"36","/home/elouati/Bureau/projet_working/client/src/Interface/utils/formationId.js":"37","/home/elouati/Bureau/projet_working/client/src/Interface/MenuRight/MenuRight.js":"38","/home/elouati/Bureau/projet_working/client/src/Interface/Strategy/Strategy.js":"39","/home/elouati/Bureau/projet_working/client/src/Interface/Strategy/CallingList.js":"40","/home/elouati/Bureau/projet_working/client/src/Interface/Strategy/CallingElement.js":"41","/home/elouati/Bureau/projet_working/client/src/Interface/Events/Events.js":"42","/home/elouati/Bureau/projet_working/client/src/Interface/utils/meteoToString.js":"43","/home/elouati/Bureau/projet_working/client/src/Interface/Debriefing/Debriefing.js":"44","/home/elouati/Bureau/projet_working/client/src/Interface/utils/Validation.js":"45","/home/elouati/Bureau/projet_working/client/src/Game/interface-context.js":"46","/home/elouati/Bureau/projet_working/client/src/Interface/utils/Timer/ReactTimerStopwatch.js":"47","/home/elouati/Bureau/projet_working/client/src/Interface/utils/Timer/Component/Time/Time.js":"48","/home/elouati/Bureau/projet_working/client/src/Interface/utils/Timer/Component/Circle/Circle.js":"49","/home/elouati/Bureau/projet_working/client/src/Interface/Animator/SetFarmers.js":"50","/home/elouati/Bureau/projet_working/client/src/Interface/Animator/FarmerActivity.js":"51","/home/elouati/Bureau/projet_working/client/src/Interface/utils/Checkbox.js":"52","/home/elouati/Bureau/projet_working/client/src/Interface/Animator/SetTimeInterface.js":"53","/home/elouati/Bureau/projet_working/client/src/Interface/utils/calculateTime.js":"54","/home/elouati/Bureau/projet_working/client/src/Interface/Banque/Banque.js":"55","/home/elouati/Bureau/projet_working/client/src/Interface/Animator/Settings.js":"56","/home/elouati/Bureau/projet_working/client/src/Interface/ActionChoice/Pratiques.js":"57","/home/elouati/Bureau/projet_working/client/src/Interface/ActionChoice/DetailsParcelle.js":"58","/home/elouati/Bureau/projet_working/client/src/Interface/Results/Results.js":"59","/home/elouati/Bureau/projet_working/client/src/Interface/Satisfaction/Satisfaction.js":"60","/home/elouati/Bureau/projet_working/client/src/Game/animator/timers-context.js":"61","/home/elouati/Bureau/projet_working/client/src/Game/TimersDefault.js":"62","/home/elouati/Bureau/projet_working/client/src/Game/controls/handleClickTile.js":"63","/home/elouati/Bureau/projet_working/client/src/Interface/utils/idFromArray.js":"64","/home/elouati/Bureau/projet_working/client/src/Interface/utils/isIncluded.js":"65","/home/elouati/Bureau/projet_working/client/src/Interface/utils/deleteItemArray.js":"66","/home/elouati/Bureau/projet_working/client/src/Interface/ActionChoice/ActionsAutres.js":"67"},{"size":751,"mtime":1623921997000,"results":"68","hashOfConfig":"69"},{"size":3188,"mtime":1626269704017,"results":"70","hashOfConfig":"69"},{"size":404,"mtime":1623921997000,"results":"71","hashOfConfig":"69"},{"size":1290,"mtime":1623921997000,"results":"72","hashOfConfig":"69"},{"size":547,"mtime":1623921997000,"results":"73","hashOfConfig":"69"},{"size":196,"mtime":1623921997000,"results":"74","hashOfConfig":"69"},{"size":572,"mtime":1623921997000,"results":"75","hashOfConfig":"69"},{"size":410,"mtime":1623921997000,"results":"76","hashOfConfig":"69"},{"size":1616,"mtime":1623921997000,"results":"77","hashOfConfig":"69"},{"size":250,"mtime":1623921997000,"results":"78","hashOfConfig":"69"},{"size":1284,"mtime":1623921997000,"results":"79","hashOfConfig":"69"},{"size":1876,"mtime":1623921997000,"results":"80","hashOfConfig":"69"},{"size":12860,"mtime":1626194197467,"results":"81","hashOfConfig":"69"},{"size":363,"mtime":1623921997000,"results":"82","hashOfConfig":"69"},{"size":6218,"mtime":1627201388055,"results":"83","hashOfConfig":"69"},{"size":23174,"mtime":1627771071011,"results":"84","hashOfConfig":"69"},{"size":28676,"mtime":1627822004501,"results":"85","hashOfConfig":"69"},{"size":218,"mtime":1623921997000,"results":"86","hashOfConfig":"69"},{"size":3229,"mtime":1627774969608,"results":"87","hashOfConfig":"69"},{"size":1137,"mtime":1624580509110,"results":"88","hashOfConfig":"69"},{"size":1217,"mtime":1626089460571,"results":"89","hashOfConfig":"69"},{"size":190,"mtime":1623921997000,"results":"90","hashOfConfig":"69"},{"size":1923,"mtime":1623921997000,"results":"91","hashOfConfig":"69"},{"size":4697,"mtime":1627207682929,"results":"92","hashOfConfig":"69"},{"size":3053,"mtime":1623921997000,"results":"93","hashOfConfig":"69"},{"size":2931,"mtime":1627287223551,"results":"94","hashOfConfig":"69"},{"size":6045,"mtime":1623921997000,"results":"95","hashOfConfig":"69"},{"size":8500,"mtime":1627771373962,"results":"96","hashOfConfig":"69"},{"size":14231,"mtime":1625916439543,"results":"97","hashOfConfig":"69"},{"size":585,"mtime":1623921997000,"results":"98","hashOfConfig":"69"},{"size":165,"mtime":1627202547514,"results":"99","hashOfConfig":"69"},{"size":5365,"mtime":1627819957556,"results":"100","hashOfConfig":"69"},{"size":2609,"mtime":1627656112848,"results":"101","hashOfConfig":"69"},{"size":266,"mtime":1625937035224,"results":"102","hashOfConfig":"69"},{"size":542,"mtime":1627387579346,"results":"103","hashOfConfig":"69"},{"size":737,"mtime":1626311813919,"results":"104","hashOfConfig":"69"},{"size":414,"mtime":1626861346689,"results":"105","hashOfConfig":"69"},{"size":1734,"mtime":1626861346673,"results":"106","hashOfConfig":"69"},{"size":7178,"mtime":1627694093736,"results":"107","hashOfConfig":"69"},{"size":501,"mtime":1625766217633,"results":"108","hashOfConfig":"69"},{"size":187,"mtime":1625766246722,"results":"109","hashOfConfig":"69"},{"size":7796,"mtime":1627694093728,"results":"110","hashOfConfig":"69"},{"size":241,"mtime":1625351962918,"results":"111","hashOfConfig":"69"},{"size":3894,"mtime":1627694093744,"results":"112","hashOfConfig":"69"},{"size":253,"mtime":1625422641128,"results":"113","hashOfConfig":"69"},{"size":616,"mtime":1626105873528,"results":"114","hashOfConfig":"69"},{"size":1041,"mtime":1626107359894,"results":"115","hashOfConfig":"69"},{"size":3596,"mtime":1626215665723,"results":"116","hashOfConfig":"69"},{"size":1482,"mtime":499162500000,"results":"117","hashOfConfig":"69"},{"size":3299,"mtime":1627646146294,"results":"118","hashOfConfig":"69"},{"size":6869,"mtime":1626862938781,"results":"119","hashOfConfig":"69"},{"size":1012,"mtime":1626888494625,"results":"120","hashOfConfig":"69"},{"size":7966,"mtime":1627692790159,"results":"121","hashOfConfig":"69"},{"size":284,"mtime":1626308578875,"results":"122","hashOfConfig":"69"},{"size":2074,"mtime":1626610533124,"results":"123","hashOfConfig":"69"},{"size":5127,"mtime":1627730998480,"results":"124","hashOfConfig":"69"},{"size":10612,"mtime":1627775202440,"results":"125","hashOfConfig":"69"},{"size":1728,"mtime":1627341615789,"results":"126","hashOfConfig":"69"},{"size":2116,"mtime":1627694093768,"results":"127","hashOfConfig":"69"},{"size":4501,"mtime":1627694093752,"results":"128","hashOfConfig":"69"},{"size":2621,"mtime":1627664823287,"results":"129","hashOfConfig":"69"},{"size":563,"mtime":1627690365005,"results":"130","hashOfConfig":"69"},{"size":1763,"mtime":1627424595819,"results":"131","hashOfConfig":"69"},{"size":219,"mtime":1627770968140,"results":"132","hashOfConfig":"69"},{"size":293,"mtime":1627770828864,"results":"133","hashOfConfig":"69"},{"size":293,"mtime":1627772890774,"results":"134","hashOfConfig":"69"},{"size":8152,"mtime":1627821915289,"results":"135","hashOfConfig":"69"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},"oeqhih",{"filePath":"139","messages":"140","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"138"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"138"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"138"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"138"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"138"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"138"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"138"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"138"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"138"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"138"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"231"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"231"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"138"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"138"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"138"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"138"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"138"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292"},"/home/elouati/Bureau/projet_working/client/src/index.js",[],["293","294"],"/home/elouati/Bureau/projet_working/client/src/App.js",["295","296","297","298","299","300","301","302","303","304"],"import React, {useContext} from \"react\"\nimport Tutoriel from './tutoriel.js'\nimport Menu from './Menu/Menu.js';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport GameOver from './GameOver.js'\nimport CreateAndJoinGame from \"./tutorials/CreateAndJoinGame.js\";\nimport PlayAsAnimator from \"./tutorials/PlayAsAnimator.js\";\nimport PlayAsFarmer from \"./tutorials/PlayAsFarmer.js\";\nimport NotExistingTuto from \"./tutorials/NotExistingTuto.js\";\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { socket } from \"./socket.js\";\nimport PlayerContext from './Menu/player-context';\nimport Updating from \"./Interface/Updating/Updating\";\nimport Strategy from \"./Interface/Strategy/Strategy\";\nimport Events from \"./Interface/Events/Events\";\nimport Debriefing from \"./Interface/Debriefing/Debriefing\";\nimport SetFarmers from \"./Interface/Animator/SetFarmers\";\nimport SetTimeInterface from \"./Interface/Animator/SetTimeInterface\";\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { tuto: \"1\" }\n    }\n    displayTuto = () => {\n        switch (this.state.tuto) {\n            case \"0\": window.location = \"/\"; break\n            case \"1\": return <CreateAndJoinGame />\n            case \"2\": return <PlayAsAnimator />\n            case \"3\": return <PlayAsFarmer />\n            default: return <NotExistingTuto />\n        }\n    }\n    handleClick = (value, newValue) => {\n        this.setState({ tuto: newValue })\n    }\n    componentDidMount() {\n        socket.on(\"endGame\", () => {\n            window.location = \"/gameOver\"\n        })\n        const tuto = new URLSearchParams(window.location.search).get('tuto') || \"\"\n        if (tuto != \"\") this.setState({ tuto })\n    }\n    render() {\n        console.log(this.state.actions)\n        return (\n\n            <Router>\n                <Route exact path=\"/\">\n                    <Menu />\n                </Route>\n                <Route exact path=\"/tutoriel\">\n                    <Tutoriel />\n                </Route>\n                <Route exact path=\"/gameOver\">\n                    <GameOver />\n                </Route>\n                <Route path=\"/tutorial\">\n                    <Paper >\n                        <Tabs\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            centered\n                            onChange={this.handleClick}\n                            value={this.state.tuto}\n                        >\n                            <Tab label=\"Accueil\" value=\"0\" />\n                            <Tab label=\"Créer et rejoindre une partie \" value=\"1\" />\n                            <Tab label=\"Le rôle d'animateur \" value=\"2\" />\n                            <Tab label=\"Le rôle d'agriculteur\" value=\"3\" />\n\n                        </Tabs>\n                    </Paper>\n                    {this.displayTuto()}\n                </Route>\n\n            </Router>\n        );\n        /*return (\n            <>\n                {<SetTimeInterface pseudo={\"Hossam\"}/>}\n            </>\n\n        )*/\n    }\n}","/home/elouati/Bureau/projet_working/client/src/reportWebVitals.js",[],"/home/elouati/Bureau/projet_working/client/src/Menu/player-context.js",[],"/home/elouati/Bureau/projet_working/client/src/Menu/menu-context.js",[],"/home/elouati/Bureau/projet_working/client/src/tutoriel.js",[],"/home/elouati/Bureau/projet_working/client/src/GameOver.js",[],"/home/elouati/Bureau/projet_working/client/src/socket.js",[],"/home/elouati/Bureau/projet_working/client/src/tutorials/PlayAsAnimator.js",[],"/home/elouati/Bureau/projet_working/client/src/tutorials/NotExistingTuto.js",[],"/home/elouati/Bureau/projet_working/client/src/tutorials/PlayAsFarmer.js",[],"/home/elouati/Bureau/projet_working/client/src/tutorials/CreateAndJoinGame.js",[],"/home/elouati/Bureau/projet_working/client/src/Menu/Menu.js",["305","306","307","308","309"],"import React, { useState, useContext } from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport Select from '@material-ui/core/Select';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport { socket } from '../socket.js';\nimport Typography from '@material-ui/core/Typography';\nimport AnimatorLoader from '../Game/animator/AnimatorLoader.js'\nimport PlayerContext from './player-context';\nimport { setPlayerClass, getSubBassin } from '../Game/map/MapUtil.js';\nimport MenuContext from './menu-context';\n\nimport Game from '../Game/Game.js';\nimport Updating from \"../Interface/Updating/Updating\";\nimport warningText from '../Game/controls/warningText.js';\nimport Header from \"../Interface/Header/Header\";\n\n\n\nfunction Menu() {\n    const playerCtx = useContext(PlayerContext);\n    const MenuCtx = useContext(MenuContext);\n\n\n    const marg = {\n        marginRight: 5\n    }\n\n\n\n    const handleName = (event) => {\n        playerCtx.updateName(event.target.value);\n    }\n\n    const handleChange = (event) => {\n        playerCtx.updateRole(event.target.value);\n    };\n\n    const handleRoomName = (event) => {\n        const fRoom = event.target.value.toLowerCase();\n        playerCtx.updateRoom(fRoom);\n    }\n\n    const [loading, setLoading] = useState(false)\n\n    const [playerList, setPlayerList] = useState([]);\n    const [warningMessage, setWarningMessage] = useState(\"\");\n    socket.on(\"playersUpdate\", (resp) => {\n        setPlayerList(resp);\n    });\n\n    const [playerGameStarted, setPlayerGameStarted] = useState(false);\n\n    socket.on(\"mapReady\", () => {\n        setPlayerGameStarted(true)\n    })\n    socket.on(\"start\", () => {\n        MenuCtx.updateLocation(\"started\");\n    });\n\n    async function handleCreate() {\n        if (playerCtx.name === \"\" || playerCtx.role === \"\") {\n            setWarningMessage(\"Veuillez remplir les champs\")\n        }\n        else {\n            console.log(playerCtx.role)\n\n            const room = await new Promise(resolve => {\n                socket.emit(\"createRoom\", playerCtx.name, playerCtx.role, (response) => {\n                    resolve(response);\n                });\n            });\n            playerCtx.updateRoom(room);\n            MenuCtx.updateLocation(\"lobbyCreated\");\n        }\n\n\n    }\n\n    async function handleJoin() {\n        if (playerCtx === \"\" || playerCtx.name === \"\" || playerCtx.role === \"\") {\n            setWarningMessage(\"Veuillez remplir les champs\")\n        }\n        else {\n\n\n            const room = await new Promise(resolve => {\n                socket.emit(\"joinRoom\", playerCtx.room, playerCtx.name, playerCtx.role, (response) => {\n                    resolve(response);\n                });\n            });\n            if (room === \"Code de lobby incorrect\") {\n                setWarningMessage(room);\n            }\n            else {\n                playerCtx.updateRoom(room);\n                MenuCtx.updateLocation(\"lobbyJoined\");\n            }\n        }\n    }\n\n    function handleStart() {\n        setLoading(true)\n        socket.emit(\"startGame\");\n    }\n\n    async function getNewPlayerList() {\n        const newLst = await new Promise(resolve => {\n            socket.emit(\"playersFromRoom\", playerCtx.room, (resp) => {\n                resolve(resp);\n            })\n        });\n        if (newLst === \"Partie inexistante\") {\n            setWarningMessage(newLst);\n        }\n        else {\n            setPlayerList(newLst);\n        }\n    }\n\n    async function handleReconnectChange(event) {\n        const lngth = event.target.value.length;\n        const pName = event.target.value.substring(0, lngth - 1);\n        const pRole = event.target.value.substring(lngth - 1);\n        playerCtx.updateName(pName);\n        playerCtx.updateRole(pRole);\n\n    }\n\n    async function handleReconnect() {\n        if (playerCtx.room === \"\" || playerCtx.name === \"\") {\n            setWarningMessage(\"Veuillez remplir les champs\")\n        } else {\n            socket.emit(\"reconnect\", playerCtx.room, playerCtx.name, () => {\n                MenuCtx.updateLocation(\"started\")\n                socket.emit(\"getTurn\", (response) => {\n                    if (response > -1) setPlayerGameStarted(true)\n\n                })\n            });\n        }\n    }\n\n\n\n    function CreateForm() {\n        playerCtx.updateRole(3)\n        return (\n            <div>\n                <TextField key=\"name\" label=\"Pseudo\" value={playerCtx.name} onChange={handleName}></TextField>\n                {/*                 <FormControl>\n                    <InputLabel id=\"role-label\">Role</InputLabel>\n                    <Select\n                        labelId=\"role-label\"\n                        id=\"role\"\n                        value={playerCtx.role}\n                        onChange={handleChange}\n                    >\n                        <MenuItem value={1}>Agriculteur</MenuItem>\n                        <MenuItem value={2}>Elu</MenuItem>\n                        <MenuItem value={3}>Animateur</MenuItem>\n                    </Select>\n                </FormControl> */}\n                <Button variant=\"contained\" color=\"primary\" onClick={handleCreate}>Créer</Button>\n                {warningText(warningMessage)}\n                <Button variant=\"contained\" color=\"primary\" style={marg} onClick={() => { MenuCtx.updateLocation(\"menu\") }}>Menu</Button>\n\n            </div>\n        )\n    }\n\n    function JoinForm() {\n        return (\n            <div>\n                <TextField key=\"roomName\" label=\"Code Partie\" value={playerCtx.room} onChange={handleRoomName}></TextField>\n                <TextField key=\"nameJoin\" label=\"Pseudo\" value={playerCtx.name} onChange={handleName}/>\n                <FormControl>\n                    <InputLabel id=\"role-label\">Role</InputLabel>\n                    <Select\n                        labelId=\"role-label\"\n                        id=\"role\"\n                        value={playerCtx.role}\n                        onChange={handleChange}\n                    >\n                        <MenuItem key={1} value={1}>Agriculteur</MenuItem>\n                        <MenuItem key={0} value={0}>Elu</MenuItem>\n                        <MenuItem key={2} value={2}>Gestionnaire de Bassin</MenuItem>\n                    </Select>\n                </FormControl>\n                <Button variant=\"contained\" color=\"primary\" onClick={handleJoin}>Rejoindre la partie</Button>\n                {warningText(warningMessage)}\n\n                <Button variant=\"contained\" color=\"primary\" style={marg} onClick={() => { MenuCtx.updateLocation(\"menu\") }}>Menu</Button>\n\n            </div>\n        )\n    }\n\n    function roleToString(role) {\n        if (role === 1) return \"agriculteur\"\n        if (role === 3) return \"animateur\"\n        if (role === 2) return \"gestionnaire\"\n        if (role === 0) return \"elu\"\n        return \"\"\n    }\n    function displayNumBassin(id) {\n        if (id === 0 || id > 9) return \"\"\n        return `${getSubBassin(id)} bassin`\n    }\n    function LobbyCreated() {\n        let bassin = \"\"\n        return (\n            <div>\n                <Typography variant=\"h3\">\n                    {playerCtx.room}\n                </Typography>\n                <List>\n                    {playerList.map(item => (\n                        <ListItem\n                            key={item.Id}\n                        >\n                            <ListItemText primary={`${item.Name} ${roleToString(item.Role)} ${item.Id} ${displayNumBassin(item.Id)}`} />\n                        </ListItem>\n                    ))}\n                </List>\n                <Button variant=\"contained\" color=\"primary\" onClick={handleStart} >Commencer la partie</Button>\n                {loading && <Typography>Chargement...</Typography>}\n            </div>\n        );\n    }\n    function PlayersWaitingLobby() {\n        return (\n            <div>\n                <Typography>\n                    L'animateur est en train de préparer la carte. Veuillez patienter\n                </Typography>\n            </div>\n        )\n    }\n    function LobbyJoined() {\n        return (\n            <div>\n                <Typography variant=\"h3\">\n                    {playerCtx.room}\n                </Typography>\n                <List>\n                    {playerList.map(item => (\n                        <ListItem\n                            key={item.Id}\n                        >\n                            {console.log(item)}\n                            <ListItemText primary={item.Name} />\n                        </ListItem>\n                    ))}\n                </List>\n            </div>\n        );\n    }\n\n    function GameStarted() {\n        {console.log(\"Context ROLE IS : \"+playerCtx.role+\" and NAME : \" + playerCtx.name)};\n        return (\n            <div>\n                {playerCtx.role > 2 ? <AnimatorLoader name={playerCtx.name} room={playerCtx.room} /> :\n                    playerGameStarted ? <Game name={playerCtx.name} role={playerCtx.role} room={playerCtx.room} /> :\n                        <div className=\"App-header\">{PlayersWaitingLobby()}</div>}\n            </div>\n        )\n    }\n\n    /*function GameStarted() {\n        {console.log(\"Context Player = \" + playerCtx)};\n\n        return (\n            <div>\n                {playerCtx.role > 2 ? <AnimatorLoader name={playerCtx.name} room={playerCtx.room} /> :\n                    playerGameStarted ? <div>\n                                            <Header role={playerCtx.role} pseudo={playerCtx.name} bassin={getSubBassin(playerCtx)} />\n                                            <Updating role={playerCtx.role} ut={23} oldUt={34} ub={2} oldUb={12} formations={[1, 1, 0, 1]}/>\n                                        </div>:\n                        <div className=\"App-header\">{PlayersWaitingLobby()}</div>}\n            </div>\n        )\n    }*/\n\n    function RejoinGame() {\n        return (\n            <div>\n                <p>\n                    <TextField key=\"roomRejoin\" label=\"Code Partie\" value={playerCtx.room} onChange={handleRoomName}/>\n                </p>\n                <p>\n                    <Button variant=\"contained\" color=\"primary\" onClick={getNewPlayerList}>Chercher les joueurs</Button>\n                </p>\n                <InputLabel id=\"nameLabel\">Votre nom dans la partie</InputLabel>\n                <FormControl>\n\n                    <Select\n                        labelId=\"nameLabel\"\n                        id=\"playerSelect\"\n                        value={playerCtx.name + playerCtx.role}\n                        onChange={handleReconnectChange}\n                    >\n                        {playerList.map(item => (\n                            <MenuItem value={item.Name + item.Role}>{item.Name + ` (role : ` + item.Role + `)`}</MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n                <p>\n                    <Button variant=\"contained\" color=\"primary\" onClick={handleReconnect}>Rejoindre</Button>\n                </p>\n                {warningText(warningMessage)}\n\n            </div>\n        )\n    }\n\n\n    function MainMenu() {\n        playerCtx.updateRole(\"\")\n        console.log(\"INITIAL PLAYER ROLE = \" + playerCtx);\n        console.log(\"INITIAL MENU CTX = \" + playerCtx);\n        return (\n            <div>\n                <Button variant=\"contained\" color=\"primary\" onClick={() => { MenuCtx.updateLocation(\"create\") }}>Creer la partie</Button>\n                <Button variant=\"contained\" color=\"primary\" onClick={() => { MenuCtx.updateLocation(\"join\") }}>Rejoindre la partie</Button>\n                <Button variant=\"contained\" color=\"primary\" onClick={() => { MenuCtx.updateLocation(\"reconnect\") }}>Reconnexion a la partie en cours</Button>\n                <Button variant=\"contained\" color=\"primary\" onClick={() => { window.location = \"/tutorial\" }}>Tutoriels</Button>\n\n            </div>\n        );\n    }\n\n    return (\n        <>\n\n            {\n                MenuCtx.loc === \"started\" ? GameStarted() :\n                    <div className=\"App-header\">\n                        {MenuCtx.loc === \"menu\" && MainMenu()}\n\n                        {MenuCtx.loc === \"create\" && CreateForm()}\n\n                        {MenuCtx.loc === \"join\" && JoinForm()}\n\n                        {MenuCtx.loc === \"lobbyCreated\" && LobbyCreated()}\n\n                        {MenuCtx.loc === \"reconnect\" && RejoinGame()}\n\n                        {MenuCtx.loc === \"lobbyJoined\" && LobbyJoined()}\n\n\n                    </div>\n            }\n        </>\n    )\n\n}\n\nexport default Menu;\n\n/* réseau zone atelier employeur\neredejeu prestataire des zone atelier\nozcar tereno strasbourg\n*/","/home/elouati/Bureau/projet_working/client/src/Game/controls/warningText.js",[],"/home/elouati/Bureau/projet_working/client/src/Game/map/MapUtil.js",["310"],"import { HexUtils } from 'react-hexgrid'\nexport const layout = {\n    spacing: 1,\n    orientation: {\n        f0: Math.sqrt(3.0), f1: Math.sqrt(3.0) / 2.0, f2: 0.0, f3: 3.0 / 2.0, b0: Math.sqrt(3.0) / 3.0, b1: -1.0 / 3.0, b2: 0.0, b3: 2.0 / 3.0, startAngle: 0.5\n    },\n    size: {\n        y: 3,\n        x: 3,\n    },\n    origin: {\n        x: 0,\n        y: 0,\n    },\n}\n/* \n    Function : generateHexes\n\n    Syntax  : hexas=generateHexes()\n    \n    Outputs : hexas : object containing all data to create the hexagones (position)\n                        and the data for the game's interaction ( activity,subBasin...)\n\n    Description : return an object containing all the data needed to generate the map in class Bassin\n        \n    Author : Hugo KELHETTER\n*/\nexport function generateHexes(data) {\n    let hexas = {};\n    let lstTile = {}\n    let hex;\n    for (let i = 0; i < data.length; i++) {\n\n        hex = HexUtils.pixelToHex({ x: (data[i].xOutlet), y: (data[i].yOutlet) }, layout)\n        //map ardiere\n        //hex = HexUtils.pixelToHex({ x: (data[i].x0 + 164.6719013516826) * 4, y: (328 + data[i].y0) * -4 }, layout)\n        // merge hex and data[i] into hexas[i]\n        hexas[i] = Object.assign(hex, data[i])\n        hexas[i].modified = false\n        if (hexas[i].player != null) {\n            lstTile[i] = { player: hexas[i].player, id: hexas[i].Id, cellPlayer: hexas[i].cellPlayer }\n        }\n        //renameProperty(hexas[i], \"mainCLC1\", \"activity\")\n    }\n    return [hexas, lstTile];\n}\n/* this function doesn't work */\n/* export function generateMap(data) {\n    let hexas = {};\n    let hex;\n    let hex2;\n    let rivers = [];\n    let path;\n    for (let i = 0; i < data.length; i++) {\n\n        hex = HexUtils.pixelToHex({ x: (data[i].xOutlet), y: (data[i].yOutlet) }, layout)\n        //map ardiere\n        //hex = HexUtils.pixelToHex({ x: (data[i].x0 + 164.6719013516826) * 4, y: (328 + data[i].y0) * -4 }, layout)\n        // merge hex and data[i] into hexas[i]\n        if (!hexas[i]) {\n            hexas[i] = Object.assign(hex, data[i])\n            hexas[i].modified = false\n        }\n        let j = hexas[hexas[i].downTile + 2]\n        if (!hexas[j]) {\n            hexas[j] = Object.assign(hex, data[j])\n            hexas[j].modified = false\n\n        }\n        path = {\n            start: hexas[i],\n            end: hexas[j],\n            outletFlowAcc: hexas[i].outletFlowAcc\n        }\n        rivers.push(path);\n        //renameProperty(hexas[i], \"mainCLC1\", \"activity\")\n    }\n    return [hexas, rivers]\n} */\n/* \n    Function : generateRivers \n\n    Syntax  : rivers=generateRivers()\n\n    Outputs : array of object containing the start and end of each rivers\n\n    Description : cycle through the hexagones to create and array of object path\n                    containing the hexagon where the river starts and and where it ends\n                    by reading the downStreamCell property\n    \n    Author : Hugo KELHETTER\n*/\nexport function generateRivers(moreHexas) {\n    let rivers = [];\n    let path;\n    for (let i = 0; i < Object.keys(moreHexas).length; i++) {\n        path = {\n            start: moreHexas[i],\n            end: moreHexas[moreHexas[i].downTile - 1],\n            outletFlowAcc: moreHexas[i].outletFlowAcc\n        }\n        rivers.push(path);\n    }\n    return rivers;\n\n}\n/* \n    Function : setPlayerClass\n\n    Syntax\n        playerClass=setPlayerClass(PlayerId)\n    \n    Input\n        PlayerId    :player's id\n\n    Outputs\n        playerClass :player's id on subBasin\n\n    Description\n        Compute player's id on their subBasin based on their global id\n\n    Author : Hugo KELHETTER\n*/\nexport function setPlayerClass(player) {\n    if (player === 0 || player > 9) return \"\" //attributé à aucun joueur\n    switch (player % 3) {\n        case 0: return \"troisieme\" //attribué aux joueurs 3, 6 ou 9\n        case 1: return \"premier\" //attribué aux joueurs 1, 4 ou en 7\n        case 2: return \"deuxieme\" //attribué aux joueurs 2, 5 ou 8\n        default: return \"\"\n    }\n}\n/* \n    Function : activityToString\n\n    Syntax\n        tileActivity=activityToString(activity)\n    \n    Input\n        activity    :tile's activity\n\n    Outputs\n        tileactivity:string corresponding to the activity\n\n    Description\n        returns a string based on the input\n        this is meant to set className to components and apply css style\n    \n    Author : Hugo KELHETTER\n*/\nexport function activityToString(activity) {\n    switch (activity) {\n        case 1: return \"ville\";\n        case 2: return \"agriculture\";\n        case 3: return \"foret\";\n        case 5: return \"water\"\n        default: return \"notInBassin\";\n    }\n}\n/* \n    Function : getSubBassin\n\n    Syntax\n        subBassin=getSubBassin(id)\n    \n    Input\n        id    :player's id\n\n    Outputs\n        playerClass :player's subBasin\n\n    Description\n        Calculate player's subBassin based on their id\n\n    Author : Hugo KELHETTER\n*/\nexport function getSubBassin(id) {\n    if (id < 4 || id === 12) return 1\n    if (id < 7 || id === 13) return 2\n    return 3\n}\n\n/*\n    Function : bassinToString\n\n    Input\n        subBassin : integer calculate by getSubBassin Function\n\n    Output\n        return \"Aval\", \"Amont\" or \"Milieu\" based on the integer passed in\n\n    Author : Hossam ELOUATI\n */\n\nexport function nameSubBassin(numero) {\n    return ((numero === 1) ? \"Amont\" :\n                (numero === 2) ? \"Milieu\" :\n                    (numero === 3) ? \"Aval\" : \"\" )\n}\n/* \n    Function : setMapSize\n\n    Syntax : setMapSize()\n        \n    Description : return a size considering if the scrren if in portrait or landscape \n        \n*/\n\nexport function setMapSize() {\n    return window.matchMedia('(orientation:landscape)').matches ? '100%' : '100%'\n}\n/* \n    Function : setBaseCLasses \n    \n    Syntax  : classes=setBaseClasses(hex)\n    \n    Input   : hex : object : contains the data of an hexagon\n    \n    Output : classes : string : a set of css classes to add to the hexagon\n\n    Description : return a string of classes to add to the hexagon\n        \n    Author : Hugo KELHETTER\n*/\nexport function setBaseClasses(hex) {\n    let classname = activityToString(hex.mainCLC1)\n    if (hex.eco == 1) classname += \" eco\"\n    return classname\n}","/home/elouati/Bureau/projet_working/client/src/Game/animator/AnimatorLoader.js",["311","312","313","314","315","316","317","318"],"import React, {useContext} from 'react'\nimport { socket } from '../../socket.js'\nimport PropTypes from 'prop-types';\nimport { generateHexes, generateRivers } from \"../map/MapUtil.js\"\nimport Bassin from \"../map/Bassin.js\"\nimport handleClickTile from '../controls/handleClickTile.js'\nimport ChangeTile from './ChangeTile.js'\nimport Menu from '../controls/Menu.js'\nimport { Button, Typography } from '@material-ui/core'\n//import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\n//import CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport ConfirmDialog from \"../controls/ConfirmDialog.js\"\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport SetFarmers from \"../../Interface/Animator/SetFarmers\";\nimport SetTimeInterface from \"../../Interface/Animator/SetTimeInterface\";\nimport Settings from \"../../Interface/Animator/Settings\";\nimport Style from \"../../Interface/Header/Header.module.scss\";\nimport StyleStrategy from \"../../Interface/Strategy/Strategy.module.scss\";\nimport Checkbox from \"../../Interface/utils/Checkbox\";\nimport TimerContext from \"./timers-context\";\n\nexport default class AnimatorLoader extends React.Component {\n    /* \n        Input : props={name}\n                name: string : name of the player\n        \n        Syntax : <AnimatorLoader name=\"player's name\"/>\n    */\n    constructor(props) {\n        super(props)\n        this.state = {\n            interfaceCtx: 1,\n            lstPlayer: \"\", lstTile: \"\", map: {moreHexas: \"\", moreRivers: null}, mapReady: true, tour: -1, action: \"\",\n            disconnected: false, farmersPlaying: false, listPlayer: [], agriPlayer: [],\n            pAgris: false, pTimers: false, pNumber: false, allDefault: true, selected: new Set(),\n            finishTour: true, fileAgri: \"./settings/agris.txt\", fileTimers: \"./settings/timers.txt\",\n            timers: []\n        }\n        //this.addConvo = this.addConvo.bind(this)\n        this.handleClickTile = handleClickTile.bind(this)\n\n    }\n\n    static contextType = TimerContext\n\n    static propTypes = {\n        name: PropTypes.string.isRequired\n    }\n    /* \nFunction : addConvo\n\nSyntax  : boolean=addConvo(data)\n\nInput   : object following the next pattern\n            {\n                convoName : \"name of the conversation\",\n                player1 : boolean,\n                player2 : boolean\n                ...\n            }\n            playerN's represents the player's name and the value represents \n                    whether or not it is part of the conversation\n\nOutput  : the success of the function\n\nDescription : display the different components of the app\n\nAuthor : Hugo KELHETTER\n    \n*/\n    addConvo = (data) => {\n\n        if (data.convoName.length === 0) {\n            alert(\"vous devez entrer un nom\")\n            return false\n        }\n        for (const entry in this.state.lstConvo) {\n            if (entry === data.convoName) {\n                alert(\"Nom déjà pris\")\n                return false\n            }\n        }\n\n        let newConvo = []\n        const name = data.convoName\n        for (const entry in data.lstPlayer) {\n            if (!(entry === \"convoName\" || entry === \"lstConvo\")) {\n                if (data.lstPlayer[entry]) newConvo.push(entry)\n            }\n        }\n\n        if (newConvo.length > 0) {\n            this.setState({lstConvo: {...this.state.lstConvo, [name]: newConvo}})\n            return true\n        }\n        alert(\"Vous devez selectionner des joueurs\")\n        return false\n    }\n    componentWillMount = () => {\n        this.selectedCheckboxes = new Set();\n    }\n\n    toggleCheckbox = (label) => {\n        const newSelected = new Set();\n        if (this.selectedCheckboxes.has(label)) {\n            //this.setValueActivity(label, 0);\n            this.selectedCheckboxes.delete(label);\n            this.setState({selected: newSelected});\n\n        } else {\n            this.selectedCheckboxes.add(label);\n            this.setState({selected: newSelected});\n        }\n    }\n\n    /*\n        Function : componentDidMount\n\n        Description : retrieve the map and players's data\n\n        Author : Hugo KELHETTER\n \n    */\n    componentDidMount() {\n        socket.on(\"disconnect\", () => {\n            this.setState({disconnected: true});\n        })\n\n        socket.on(\"connect\", () => {\n            if (this.state.disconnected) {\n                socket.emit('reconnect', this.props.room, this.props.name, () => {\n                    this.setState({disconnected: false})\n                });\n            }\n        })\n\n        socket.emit(\"getCurrentGrid\", (response) => {\n            const newHexas = generateHexes(response)\n            let lstTile = newHexas[1]\n            const newRivers = generateRivers(newHexas[0])\n            //const tampon = this.createTampon(newHexas, this.state.map.player)\n            this.setState({\n                map: {...this.state.map, moreHexas: newHexas[0], moreRivers: newRivers, selectedTile: null},\n                lstTile\n            })\n\n        })\n        socket.emit(\"playersInRoom\", (response) => {\n            //console.log(\"RESPONSE\");\n            //console.log(response);\n            this.setState({listPlayer: response})\n            this.setState({lstPlayer: response})\n            //})\n        })\n\n        socket.emit(\"agriInRoom\", (response) => {\n            //console.log(\"RESPONSE\");\n            const agriculteursInRoom = []\n            response.map((item) => agriculteursInRoom.push(item.Name));\n            this.setState({agriPlayer: agriculteursInRoom})\n            //this.setState({agriPlayer: response})\n            //})\n        })\n\n        /*socket.emit(\"getSettings\", (response) => {\n            const s = response[0];\n            console.log(\"SETTINGS = \", s);\n            this.setState({\n                pAgris: s.PersonalizedAgris,\n                pTimers: s.PersonalizedTimers,\n                pNumber: s.PersonalizedNumber,\n                allDefault: s.DefaultData\n            })\n\n        })*/\n    }\n\n    /*\n        Function : updateObject\n\n        Syntax  : obj=updateObject(source,newData)\n\n        Input   : source : object : the object to update\n                  newData : object : the object containing new data\n\n        Output  : obj : object : an updated object\n\n        Description : update source with the subset of data contained in newData\n                        let source = {firstname:hugo,name:kelhetter} and newData={firstname:jhon}\n                        let newObject=updateObject(source,newData)\n                        newObject = {firstname:jhon,name:kelhetter}\n\n        Author : Hugo KELHETTER\n    \n    */\n    updateObject(source, newData) {\n        for (const key in newData) {\n            source[key] = newData[key]\n        }\n        return source\n    }\n\n    /*\n        Function : updateMap\n\n        Syntax  : updateMap(tileChange)\n\n        Input   : tileChange : object : new set of data for a tile of the map\n\n        Description : update the map with new data\n\n        Author : Hugo KELHETTER\n    \n    */\n\n    updateMap = (tileChange) => {\n        let tile = this.state.map.moreHexas[tileChange.selectedTile - 1]\n        delete tileChange.selectedTile\n        tile = this.updateObject(tile, tileChange)\n        this.setState({selectedTile: \"\"})\n    }\n    /* \n        Function : handleSubmit\n\n        Syntax  : handleSubmit()\n\n        Description : if mapReady == false then it starts the game for other players\n                      else it ends the turn\n\n        Author : Hugo KELHETTER\n    \n    */\n\n\n\n    /*getFinishTourPlayers() {\n        let finishBool = 0;\n        //if(this.state.lstPlayer && this.state.lstPlayer.length){\n        /*for(let i=0; i<this.state.lstPlayer.length; i++){\n            console.log(this.state.lstPlayer[i])\n            if(this.state.lstPlayer[i].Id !== 11){\n                socket.emit(\"getFinishTourPlayer\", this.state.lstPlayer[i].Id, (response) => {\n                    console.log(\"FINISH TOUR \" + this.state.lstPlayer[i].Id + \" : \", response.FinishTour);\n                    finishBool = finishBool + (response.FinishTour? 1: 0);\n                    console.log(\"FINISH TOUR \" + this.state.lstPlayer[i].Id + \" : \", finishBool)\n                })}\n        }\n        this.state.lstPlayer.map(item => {\n            if(item.Id !== 11){\n                socket.emit(\"getFinishTourPlayer\", item.Id, (response) => {\n                    //console.log(\"FINISH TOUR \" + item.Id + \" : \", response.FinishTour);\n                    finishBool = finishBool + (response.FinishTour? 1: 0);\n                    console.log(\"FINISH TOUR \" + item.Id + \" : \", finishBool)\n                })}\n        })\n        //}\n        setTimeout(() => {\n            console.log(\"FINISH BOOL = \", finishBool);\n        }, 500)\n        return finishBool;\n    }*/\n\n    numberPlayers = () => {\n        return this.state.lstPlayer.length - 1;\n    }\n\n    handleSubmit = () => {\n        /*         console.log(this.state.action)\n                switch (this.state.action) {\n                    case \"Commencer la partie\":\n                        this.setState({ mapReady: false })\n                        socket.emit(\"mapReady\")\n                        break;\n                    case \"Terminer la partie\":\n                        socket.emit(\"endGame\")\n                        break;\n                    default:\n                        socket.emit(\"nextTurn\", () => {\n                            socket.emit(\"getTurn\", (response) => {\n                                this.setState({ tour: response })\n                            })\n                        })\n                } */\n        const action = this.actionToString()\n        if (action === \"Finir les modifications\") {\n            if (this.state.tour === -1) {\n                socket.emit(\"mapReady\")\n                console.log(\"mapReady\")\n                this.setState({tour: 0})\n            } else {\n                socket.emit(\"inputPhase\")\n                console.log(\"inputphase\")\n            }\n        } else {\n            let finishBool = 0;\n            //if(this.state.lstPlayer && this.state.lstPlayer.length){\n            /*for(let i=0; i<this.state.lstPlayer.length; i++){\n                console.log(this.state.lstPlayer[i])\n                if(this.state.lstPlayer[i].Id !== 11){\n                    socket.emit(\"getFinishTourPlayer\", this.state.lstPlayer[i].Id, (response) => {\n                        console.log(\"FINISH TOUR \" + this.state.lstPlayer[i].Id + \" : \", response.FinishTour);\n                        finishBool = finishBool + (response.FinishTour? 1: 0);\n                        console.log(\"FINISH TOUR \" + this.state.lstPlayer[i].Id + \" : \", finishBool)\n                    })}\n            }*/\n            this.state.lstPlayer.map(item => {\n                if(item.Id !== 11){\n                    socket.emit(\"getFinishTourPlayer\", item.Id, (response) => {\n                        //console.log(\"FINISH TOUR \" + item.Id + \" : \", response.FinishTour);\n                        finishBool = finishBool + (response.FinishTour? 1: 0);\n                        console.log(\"FINISH TOUR \" + item.Id + \" : \", finishBool)\n                    })}\n            })\n            //}\n            setTimeout(() => {\n                console.log(\"FINISH BOOL = \", finishBool);\n                console.log(\"this.getFinishTourPlayers()\", finishBool);\n                console.log(\"this.numberPlayers\", this.numberPlayers());\n                if(finishBool === this.numberPlayers()){\n                    console.log(\"TOUR FINISHED\");\n                    //console.log(\"this.getFinishTourPlayers()\", finishBool);\n                    socket.emit(\"nextTurn\", () => {\n                        socket.emit(\"getTurn\", (response) => {\n                            //console.log(response)\n                            this.setState({tour: response})\n                        })\n                    })\n                }\n            }, 500)\n            //return finishBool;\n        }\n        console.log(\"TOUR COURANT : \", this.state.tour);\n        this.setState({displayConfirmDialog: false, farmersPlaying: !this.state.farmersPlaying})\n    }\n    cancel = () => {\n        this.setState({displayConfirmDialog: false})\n    }\n    handleContinue = (event) => {\n        /* console.log(event.currentTarget, event.currentTarget.name)\n        this.setState({ farmersPlaying: !this.state.farmersPlaying })\n        if (!this.state.farmersPlaying) { socket.emit(\"inputPhase\", () => { }) } */\n        this.setState({action: event.currentTarget.name, displayConfirmDialog: true})\n    }\n\n    openTuto() {\n        window.open(`${window.location.href}tutorial?tuto=2`)\n    }\n\n    actionToString() {\n        if (this.state.farmersPlaying) return \"Finir le tour\"\n        return \"Finir les modifications\"\n    }\n\n    endGame() {\n        socket.emit(\"endGame\")\n    }\n\n\n    /* author Hossam ELOUATI */\n\n    submit = () => {\n        this.setState({\n            pAgris: this.selectedCheckboxes.has(\" 1.\"),\n            pTimers: this.selectedCheckboxes.has(\" 2.\"),\n            pNumber: this.selectedCheckboxes.has(\" 3.\"),\n            allDefault: false\n        })\n        //socket.emit(\"settings\", (!this.state.pTimers) ? 1 : 0);\n        console.log(this.state.pAgris,this.state.pTimers,this.state.pNumber,this.state.allDefault);\n        if(!this.state.pAgris) {\n            /* Submit les paramètres par défaut des agriculteurs */\n            /*console.log(defaultSettings(this.state.fileAgri, 8));*/\n            //console.log(\"NUMBER AGRIS = \",this.state.agriPlayer.length)\n            socket.emit(\"defaultAgris\", this.state.agriPlayer.length, (response) => {\n                console.log(response);\n            });\n        }\n        if(!this.state.pTimers) {\n            //socket.emit(\"settings\", false);\n            /*socket.emit(\"defaultTimer\", (response) => {\n                console.log(\"SETTINGS TIME CONTEXT\");\n                console.log(\"RESPONSE = \", response[0]);\n\n\n                //this.context.updateTimers(response);\n                await this.context.updateTimerUpdating(response[0]);\n                await this.context.updateTimerStrategy(response[1]);\n                await this.context.updateTimerActions(response[2]);\n                await this.context.updateTimerEvents(response[3]);\n                await this.context.updateTimerDebriefing(response[4]);\n                await this.context.updateTimerSatisfaction(response[5]);\n                await this.context.updateTimerResults(response[6]);\n                //console.log(\"CONTEXT IS : \", this.context);\n            });*/\n\n        }\n    }\n\n    createCheckbox = (label) => (\n        <>\n            <label htmlFor={\"agri\"}>\n                <Checkbox label={label} isChecked={ this.selectedCheckboxes.has(label)} handleCheckboxChange={this.toggleCheckbox} key={label}/>\n            </label>\n        </>\n    )\n\n    settingsOptions(nextInterface) {\n        const nextInterfaceFunction = () => {\n            socket.emit(\"settings\", (this.state.pTimers) ? 1 : 0);\n            nextInterface();\n        }\n        return (\n            <>\n                <div className={Style.Header}>\n                    <div className={Style.Content}>\n                        <div className=\"text-center\">\n                            <div className={Style.TextColor}>\n                                Jeu Sérieux - Le Bassin de Moderbach\n                            </div>\n                        </div>\n                        <div className={Style.TextColor}>\n                            <div className=\"row text-center\">\n                                <div className=\"col-sm-6\">Pseudo : {this.props.pseudo}</div>\n                                <div className=\"col-sm-6\">Rôle : Animateur</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <div className=\"text-center\">\n                        <button className={StyleStrategy.nextInterface} onClick={nextInterfaceFunction}>\n                            Passer à l'interface suivante\n                        </button>\n                    </div>\n                    <section className={StyleStrategy.none4}>\n                        <header className=\"text-center\">\n                            <div className={StyleStrategy.header}>\n                                Choisir entre ces options\n                            </div>\n                        </header>\n                        <section className=\"row text-center\">\n                            <div className={StyleStrategy.header2}>\n                                {this.createCheckbox(\" 1.\")} Personnaliser les rôles des agriculteurs\n                                <br/>\n                                {this.createCheckbox(\" 2.\")} Personnaliser les durées de chaque phase\n                                <br/>\n                                {(this.selectedCheckboxes.has(\" 1.\") === false) ?\n                                    (<>\n                                        {this.createCheckbox(\" 3.\")} Choisir un nombre pour chaque type d'agriculteurs\n                                        <br/>\n                                    </>): null}\n                                {/*(this.selectedCheckboxes.has(\" 3.\" === false)) ?\n                                        (<>\n                                            {this.createCheckbox(\" 4.\")} Définir les types d'agriculteurs aléatoirement\n                                        </>) : null\n                                    }\n                                    {(this.selectedCheckboxes.has(\" 4.\" === false)) ?\n                                        (<>\n                                            {this.createCheckbox(\" 3.\")} Choisir un nombre pour chaque type d'agriculteurs\n                                        </>) : null\n                                    }\n                                    <br/>\n                                    </br>) : null*/}\n\n                            </div>\n                            <button onClick={this.submit} className={StyleStrategy.nextInterface}>Valider</button>\n                        </section>\n                    </section>\n                </div>\n            </>\n        );\n    }\n    agriActivity() {\n        return <SetFarmers pseudo={this.props.name}\n                           listAgri={this.state.agriPlayer}\n                            nextInterface={() => this.setState({\n                                interfaceCtx: (this.state.pTimers === true) ? 3 : 4\n                            })}/>\n    }\n\n    /* author Hossam ELOUATI */\n    setTimers() {\n        return <SetTimeInterface pseudo={this.props.name}\n                                 nextInterface={() => this.setState({interfaceCtx: 4})}/>\n    }\n\n    /*settings() {\n        return <Settings pseudo={this.props.name} nextInterface={\n            () => this.setState({\n                    interfaceCtx: (this.state.pAgris === true) ? 2 : (this.state.pTimers === true) ? 3 : 4\n                })}/>\n    }*/\n\n    /*     Description : display the UI of the animator : the map, and controls over the map and the game in general\n    *       Author : Hugo KELHETTER\n    * */\n    principal() {\n        {console.log(\"LIST PLAYER = \", this.state.lstPlayer)}\n        {this.state.listPlayer.map(item => (\n            console.log(\"ID : \" + item.Id + \" Name : \" + item.Name)))}\n        const buttonValue = this.actionToString()\n        //const buttonValue = this.state.mapReady ? \"Commencer la partie\" : `Terminer le tour ${this.state.tour}`\n        return (<>\n            {this.state.displayConfirmDialog &&\n            <ConfirmDialog cancel={this.cancel} confirm={this.handleSubmit} action={this.state.action}/>}\n\n            <div className=\"App\">\n                {\n                    < Menu>\n                        <div id=\"menu\">\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.openTuto}>\n                                Aide\n                            </Button>\n                            <Typography>tour actuel : {this.state.tour}</Typography>\n                            <Typography> {this.state.mapReady && \"Vous pouvez modifier la carte avant le début de la partie. \"}</Typography>\n                            <Typography> Cliquez sur une case pour apporter des modifications</Typography>\n                            <Typography> L'identifiant de la partie est : {this.props.room}</Typography>\n                            <Button variant=\"contained\" color=\"primary\" data-testid=\"submit\" name={buttonValue}\n                                    value={buttonValue} onClick={this.handleContinue}>\n                                {buttonValue}\n                            </Button>\n\n                            <Button variant=\"contained\" color=\"primary\" data-testid=\"submit\" name=\"Terminer la partie\"\n                                    onClick={this.endGame}>\n                                Terminer la partie\n                            </Button>\n                        </div>\n                        {(this.state.lstPlayer !== \"\" && this.state.lstTile !== \"\" && this.state.selectedTile && !this.state.farmersPlaying) &&\n                        <div id=\"changeTile\">\n                            <ChangeTile lstPlayer={this.state.lstPlayer} lstTile={this.state.map.moreHexas}\n                                        updateMap={this.updateMap}\n                                        selectedTile={this.state.selectedTile} type={this.state.selectedTile.className}\n                                        id={this.state.selectedTile.id}/>\n                        </div>\n                        }\n                    </Menu>\n                }\n                    {\n                        this.state.map.moreHexas !== \"\" &&\n                        <Bassin handleClick={this.handleClickTile} selectedId={this.state.selectedTile?.id}\n                                map={this.state.map} role={this.props.role} id={this.state.id}/>\n                    }\n            </div>\n        </>);\n    }\n\n    /*\n    Function : render\n\n    Syntax  : render()\n\n    Description : display the UI of the animator : the map, and controls over the map and the game in general\n\n    Author : Hossam ELOUATI\n \n*/\n    render() {\n        return (\n            <>\n                {\n                    this.state.interfaceCtx === 2 ? this.agriActivity() :\n                        this.state.interfaceCtx === 3 ? this.setTimers() :\n                            this.state.interfaceCtx === 1 ? this.settingsOptions(() => this.setState({\n                                    interfaceCtx: (this.state.pAgris === true) ? 2 : (this.state.pTimers === true) ? 3 : 4\n                                })):\n                                this.principal()\n                }\n                {/*{console.log(\"STATE ID = \" + this.state.id + \"\\nROLE = \"+this.props.role)}\n                <Updating ut={23} ub={3} oldUb={-1} oldUt={0} formations={[1, 0, 9, 1]} role={this.props.role} h={0} m={0} s={20}\n                   pseudo={this.props.name} bassin={nameSubBassin(getSubBassin(this.state.id))} numeroPhase={1} tour={this.state.tour}/>);*/}\n            </> )\n    }\n}","/home/elouati/Bureau/projet_working/client/src/Game/Game.js",["319","320","321","322","323","324","325","326","327","328","329","330","331"],"import React, {useContext} from 'react'\nimport {generateHexes, generateRivers, getSubBassin} from \"./map/MapUtil.js\"\nimport Bassin from \"./map/Bassin.js\"\nimport ActivitySwapper from \"./controls/ActivitySwapper.js\"\nimport ValidationTour from \"./controls/ValidationTour.js\"\nimport handleClickTileFarmer from './controls/handleClickTileFarmer.js'\nimport Chat from \"./Chat.js\"\nimport { socket } from \"../socket.js\"\nimport Ressources from \"./controls/Ressources.js\"\nimport '../index.css'\nimport PropTypes from 'prop-types';\nimport SlideField from \"./controls/SlideField.js\"\nimport Menu from \"./controls/Menu.js\"\nimport Diary from \"./Diary.js\"\nimport roleToString from '../Interface/utils/roleToString'\nimport { Button } from '@material-ui/core';\nimport Updating from \"../Interface/Updating/Updating\";\nimport {nameSubBassin} from \"./map/MapUtil.js\";\nimport MenuContext from \"../Menu/menu-context\";\nimport InterfaceContext from \"./interface-context\";\nimport Strategy from \"../Interface/Strategy/Strategy\";\nimport Events from \"../Interface/Events/Events\";\nimport Debriefing from \"../Interface/Debriefing/Debriefing\";\nimport Style from \"../Interface/Strategy/Strategy.module.scss\";\nimport Pratiques from \"../Interface/ActionChoice/Pratiques\";\nimport DetailsParcelle from \"../Interface/ActionChoice/DetailsParcelle\";\nimport Header from \"../Interface/Header/Header\";\nimport MenuRight from \"../Interface/MenuRight/MenuRight\";\nimport StylePratique from \"../Interface/ActionChoice/Pratiques.module.scss\";\nimport Results from \"../Interface/Results/Results\";\nimport Satisfaction from \"../Interface/Satisfaction/Satisfaction\";\nimport calculateTime from \"../Interface/utils/calculateTime\";\nimport TimerContext from \"./animator/timers-context\";\nimport timersDefault from \"./TimersDefault\";\nimport idFromArray from \"../Interface/utils/idFromArray\";\nimport ActionsAutres from \"../Interface/ActionChoice/ActionsAutres\";\n\n\nclass Conteneur extends React.Component {\n    /* \n        Input : props={name,role}\n                name : string : player's name\n                role : number : player's name\n\n        Syntax : <Game name={name} role={role} />\n    */\n\n    static contextType = TimerContext\n\n    constructor(props) {\n        super(props)\n        //this.changeTileActivity = this.changeTileActivity.bind(this)\n        this.handleClickTile = handleClickTileFarmer.bind(this)\n        //this.a = this.a.bind(this)\n\n\n        this.state = {\n            map: {moreHexas: \"\", moreRivers: null},\n            selectedTile: [], HexasTampon: null,\n            cost: {},\n            tour: 0,\n            fini: false,\n            actions: {},\n            timer: [],\n            allCostsUt : [],\n            allCostsUb : [],\n            lstConvo: {},\n            displayDiary: false,\n            disconnected: false,\n            displaySlider: false,\n            inputPhase: true,\n            interfaceCtx: 1,\n            selectedTilePractise: 0,\n            competences: [],\n            resources: [],\n            totalUt: 0,\n            totalUb: 0,\n            pTimers: false\n        }\n    }\n\n    static propTypes = {\n        name: PropTypes.string.isRequired,\n        role: PropTypes.number.isRequired\n    }\n\n    //timers = useContext(TimerContext);\n    /*\n        Function : createTampon\n    \n        Syntax  : HexasTampon=createTampon(moreHexas)\n        \n        Input   : moreHexas : object containing data to create hexagons\n            \n        Outputs : HexasTampon : a copy of moreHexas containing a subset of entries\n    \n        Description : \n            create a copy of moreHexas containing a subset of entries of moreHexas.\n            the remaining entries are those the players can change directly.\n\n        Author : Hugo KELHETTER\n    --------------------------------------------------------------------------------------------------------\n    not in current use\n    --------------------------------------------------------------------------------------------------------\n    */\n    createTampon(moreHexas, player) {\n\n        let HexasTampon = {}\n        for (const key in moreHexas) {\n            if (moreHexas[key].player === player) {\n                let hex = {};\n                hex.activity = moreHexas[key].activity\n                hex.player = moreHexas[key].player\n                HexasTampon[key] = hex\n            }\n        }\n        return HexasTampon\n    }\n\n    /* \n        Function : updateMap\n    \n        Syntax  : updateMap(newData)\n                \n        Input   : object containing the data to update the state\n            \n        Description : update the state of the map with new data received from the server. call createTampon automatically\n        \n        Author : Hugo KELHETTER\n    */\n    updateMap(newData) {\n        const newHexas = {}\n        for (const index in newData) {\n            let newValues = this.state.map.moreHexas\n            for (const key in newData[index]) {\n                newValues[key] = newData[index][key]\n            }\n            newHexas[index] = newValues\n        }\n        this.setState({moreHexas: newHexas, cost: {}})\n        //this.createTampon(this.state.map.moreHexas, this.state.map.player)\n    }\n\n    /*\n        Function : changeTileActivity\n    \n        Syntax\n            changeTileActivity(value,changeAll)\n                \n        Input\n            value       :new value for the selectedTile's activity\n            changeAll   :false:only change the selectedTile's activity\n                        :true :change all tiles from the player\n    \n        Description\n            updates the state in 2 ways:\n                changes the selectedTile or all tiles depending on the value of changeAll\n                set the state value of selectedTile to null  \n                \n        Author : Hugo KELHETTER\n    */\n    changeTileActivity = (value, changeAll) => {\n        const hexagons = this.state.map.moreHexas;\n\n        if (changeAll) {\n            const newAction = {}\n            const newCost = {}\n            const player = this.state.id//const player = hexagons[this.state.selectedTile.id].player\n            Object.values(hexagons).forEach(hex => {\n                if (hex.player === player) {\n                    hex.modified = true\n                    newAction[hex.Id] = value.Id\n                    newCost[hex.Id] = {ub: value.Intrants, ut: value.Travail}\n                }\n            })\n            this.setState({actions: newAction, cost: newCost})\n        } else {\n            let cost = this.state.cost\n            if(this.state.selectedTile !== null && this.state.selectedTile.length !== 0){\n                for(let i=0; i<this.state.selectedTile.length; i++){\n                    cost[this.state.selectedTile[i].id] = {ub: value.Intrants, ut: value.Travail}\n                    this.setState({actions: {...this.state.actions, [this.state.selectedTile[i].id]: value.Id, cost}})\n                    hexagons[this.state.selectedTile[i].id - 1].modified = true\n                }\n            }\n            /*cost[this.state.selectedTile.id] = {ub: value.Intrants, ut: value.Travail}\n            this.setState({actions: {...this.state.actions, [this.state.selectedTile.id]: value.Id, cost}})\n            hexagons[this.state.selectedTile.id - 1].modified = true*/\n        }\n        this.setState({map: {...this.state.map, moreHexas: hexagons}, selectedTile: []})\n\n        /*\n                 fetch(\"https://formsubmit.co/ajax/b6d145cfd9512d53d10dd9f9a938ae75\", {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                },\n                body: JSON.stringify({\n                    name: \"FormSubmit\",\n                    message: JSON.stringify(this.state.map.moreHexas[0])\n                })\n            })\n                .then(response => response.json())\n                .then(data => console.log(data))\n                .catch(error => console.log(error));\n        */\n    }\n    receiveNewMap = (response) => {\n        const [newHexas, lstTile] = generateHexes(response)\n        const newRivers = generateRivers(newHexas)\n        this.setState({map: {...this.state.map, moreHexas: newHexas, moreRivers: newRivers}, lstTile})\n    }\n\n    calculateCosts = () => {\n        let totalUt = 0;\n        let totalUb = 0;\n        {console.log(\"ACTIONS CHOISIES : \", this.state.actions)}\n        /*this.state.actions.map(item => {\n            if(item !== null){\n                totalUb += item.cost.ub;\n                totalUt += item.cost.ut;\n            }\n        })*/\n        //console.log(\"costs = \", this.state.actions.cost)\n        for(const index in this.state.actions.cost){\n            //console.log(this.state.actions.cost[index])\n            totalUt += this.state.actions.cost[index].ut;\n            totalUb += this.state.actions.cost[index].ub;\n        }\n        //console.log(\"RESOURCES UT = \", this.state.resources[0])\n        //console.log(\"RESOURCES UB = \", this.state.resources[1])\n        //console.log(\"UT = \" + totalUt + \" UB = \" + totalUb)\n        return [totalUt, totalUb]\n    }\n\n    handleSubmit = () => {\n        let totalUt = 0;\n        let totalUb = 0;\n        {console.log(\"ACTIONS CHOISIES : \", this.state.actions)}\n        /*this.state.actions.map(item => {\n            if(item !== null){\n                totalUb += item.cost.ub;\n                totalUt += item.cost.ut;\n            }\n        })*/\n        //console.log(\"costs = \", this.state.actions.cost)\n        for(const index in this.state.actions.cost){\n            //console.log(this.state.actions.cost[index])\n            totalUt += this.state.actions.cost[index].ut;\n            totalUb += this.state.actions.cost[index].ub;\n        }\n        //console.log(\"RESOURCES UT = \", this.state.resources[0])\n        //console.log(\"RESOURCES UB = \", this.state.resources[1])\n        //console.log(\"UT = \" + totalUt + \" UB = \" + totalUb)\n        totalUt = this.state.resources[0] - totalUt;\n        totalUb = this.state.resources[1] - totalUb\n        //console.log(\"new UT = \" + totalUt + \" new UB = \" + totalUb)\n        /*this.setState({\n            totalUt: totalUt,\n            totalUb: totalUb\n        })*/\n        //console.log(\"new UT = \" + this.state.totalUt + \" new UB = \" + this.state.totalUb)\n        //console.log(\"FINAL TOTAL UT \" + this.state.totalUt + \" UB \" + this.state.totalUb)\n        socket.emit(\"setPlayersResources\", totalUt, totalUb)\n        this.setState({interfaceCtx: 4})\n    }\n\n    /*\n        Function : componentDidMount\n    \n        Description : subscribe to the required function from server to keep up to date\n\n        Author : Hugo KELHETTER\n            \n    */\n    componentDidMount() {\n        socket.emit(\"getTurn\", (response) => {\n            this.setState({tour: response})\n        })\n\n        socket.emit(\"getTimer\", 3,(response) => {\n            console.log(response);\n            console.log(calculateTime(response));\n            this.setState({timer: calculateTime(response)});\n            console.log(\"State : \", this.state.timer);\n        })\n\n        socket.emit(\"getSettings\", (response) => {\n            console.log(\"GET SETTINGS = \", response[0].pTimer);\n            this.setState({pTimers: response[0].pTimer === 1});\n            console.log(\"state settings = \", this.state.pTimers);\n        })\n\n        socket.emit(\"getStats\", this.props.name, (response) => {\n            console.log(response[0]);\n            const resources = [response[0].ut, response[0].ub]\n            const competences = [response[0].GCultures, response[0].Verger,\n                response[0].BovinV, response[0].Viticulture, response[0].BovinL, response[0].Granivore];\n            //this.setState({competences, resources})\n            this.setState({competences, resources})\n            //console.log(calculateTime(response));\n            //this.setState({timer: calculateTi, me(response)});\n            //console.log(\"State : \", this.state.timer);\n        })\n\n        /*socket.emit(\"getPlayerActivity\", this.state.id, (response) => {\n            console.log(\"GET PLAYER ACTIVITY IS : \", response);\n        })*/\n\n\n        socket.on(\"disconnect\", () => {\n            this.setState({disconnected: true});\n        })\n\n        socket.on(\"connect\", () => {\n            if (this.state.disconnected) {\n                socket.emit('reconnect', this.props.room, this.props.name, () => {\n                    this.setState({disconnected: false})\n                });\n            }\n        })\n\n        if (this.props.role < 10) {\n            socket.emit(\"updateStats\", (response) => {\n                this.setState({ressources: response[0]})\n            })\n        }\n\n        socket.on(\"results\", (response) => {\n            this.setState({\n                ressources: response.stats,\n                data: response.graph,\n                fini: false,\n                displaySlider: true,\n                inputPhase: false\n            })\n            socket.emit(\"getTurn\", (response) => {\n                this.setState({tour: response})\n            })\n            this.setState({actions: {}})\n            socket.emit(\"getCurrentGrid\", (response) => {\n                this.receiveNewMap(response)\n            })\n            //    this.setState({ ressources: response[0] })\n\n        })\n        /*  socket.emit(\"createRoom\", \"player1\", 0, (responseCreateRoom) => {\n             this.setState({ room: responseCreateRoom })\n             socket.emit(\"startGame\")*/\n        socket.on(\"inputPhase\", () => {\n            console.log(\"aaaaaaaa\")\n            socket.emit(\"getCurrentGrid\", (response) => {\n                this.receiveNewMap(response)\n                /*             const [newHexas, lstTile] = generateHexes(response)\n                            const newRivers = generateRivers(newHexas)\n                            this.setState({ map: { ...this.state.map, moreHexas: newHexas, moreRivers: newRivers }, lstTile })\n                 */\n            })\n            this.setState({inputPhase: true})\n\n        })\n        socket.emit(\"getCurrentGrid\", (response) => {\n            this.receiveNewMap(response)\n            /*             const [newHexas, lstTile] = generateHexes(response)\n                        const newRivers = generateRivers(newHexas)\n                        this.setState({ map: { ...this.state.map, moreHexas: newHexas, moreRivers: newRivers }, lstTile })\n             */\n        })\n        socket.emit(\"getAllActions\", (response) => {\n            this.setState({lstActions: response})\n        })\n        socket.emit(\"playersInRoom\", (response) => {\n            const player = response.filter((player, i) => player.Name === this.props.name)\n            this.setState({lstPlayer: response, id: player[0].Id})\n            //})\n        })\n    }\n\n    componentWillUnmount() {\n        socket.removeAllListeners()\n    }\n\n\n    endRound = () => {\n        this.setState({fini: true, action: {}})\n    }\n\n    /* \n        Function : render\n     \n        Syntax  : render()\n     \n        Description : display the different components of the app\n        \n        Author : Hugo KELHETTER\n    */\n    closeDiary = () => {\n        this.setState({displayDiary: false})\n    }\n\n    openTuto() {\n        window.open(`${window.location.href}tutorial?tuto=3`)\n    }\n\n    displayDiary = () => {\n        this.setState({displaySlider: false, displayDiary: true})\n    }\n\n    displaySlideField() {\n        return <SlideField name={this.props.name} displayDiary={this.displayDiary}/>\n    }\n\n    actionChoice() {\n        let costs = this.calculateCosts();\n        //console.log(this.state.inputPhase)\n        return (<>\n            <Header tour={this.state.tour}\n                    role={this.props.role}\n                    pseudo={this.props.name}\n                    bassin={nameSubBassin(getSubBassin(this.state.id))}\n                    numeroPhase={3}\n                    h={(this.state.pTimers) ? this.state.timer[0] : timersDefault(3)[0]}\n                    m={(this.state.pTimers) ? this.state.timer[1] : timersDefault(3)[1]}\n                    s={(this.state.pTimers) ? this.state.timer[2] : timersDefault(3)[2]}\n                    finishEvent={() => {\n                        this.setState({interfaceCtx: 4})\n                    }}/>\n            <div className=\"row\">\n                <div className=\"col-sm-2\">\n                    <MenuRight ut={23} ub={33} formations={[]} role={this.props.role} pseudo={this.props.name}/>\n                </div>\n                <div className=\"col-sm-10\">\n                    {<>\n                        {console.log(\"ID ARRAYS = \", idFromArray(this.state.selectedTile))}\n                        {Object.keys(this.state.lstConvo).length > 0 ? <Chat lstConvo={this.state.lstConvo}/> : \"\"}\n                        <div className=\"row\">\n                            <div className=\"col-sm-8\">\n                                <section>\n                                    {\n                                        this.state.map.moreHexas !== \"\" && <Bassin handleClick={this.handleClickTile}\n                                                                                   map={this.state.map}\n                                                                                   role={this.props.role}\n                                                                                   selectedId={idFromArray(this.state.selectedTile)}\n                                                                                   id={this.state.id}/>\n                                    }\n                                </section>\n                            </div>\n                            <div className=\"col-sm-4\">\n                                {<>\n                                    {console.log(this.state.actions)}\n                                    <DetailsParcelle\n                                        id={this.state.selectedTile[this.state.selectedTile.length - 1]?.practice}\n                                        currentActivity={this.state.lstActions[this.state.selectedTile[this.state.selectedTile.length - 1]?.practice - 101]?.Pratique}/>\n                                    {(this.state.selectedTile.length === 0) ? null :\n                                        <>\n                                            <section className={StylePratique.classNameSection} onClick={() => {\n                                                this.setState({interfaceCtx: 0})\n                                            }}>\n                                                <p className=\"text-center\">Choisir une activité</p>\n                                            </section>\n                                            <section className={StylePratique.classNameSection} onClick={() => {\n                                                this.setState({interfaceCtx: 8})\n                                            }}>\n                                                <p className=\"text-center\">Choisir une action hors pratique</p>\n                                            </section>\n                                        </>\n                                    }\n                                    <div className=\"text-center\">\n                                        {/*costs = this.calculateCosts()*/}\n                                        <section className={StylePratique.classNameSection}>\n                                            <header>\n                                                Dépense de ce tour\n                                            </header>\n                                            <p>UT : {costs[0]}</p>\n                                            <p>UB : {costs[1]}</p>\n                                        </section>\n                                    </div>\n                                    <button onClick={this.handleSubmit}>Next</button>\n                                </>\n                                }\n                            </div>\n                        </div>\n                    </>\n                    }\n                </div>\n            </div>\n        </>)\n    }\n\n    /*\n        author : Hossam ELOUATI\n     */\n\n    /*< div className=\"App\" >\n                    {this.state.displayDiary &&\n                        <Diary nom={this.props.name} data={this.state.data} closeDiary={this.closeDiary} />}\n                    <Menu >\n                        {this.state.inputPhase ?\n                            <div id=\"menu\">\n                                <Button variant=\"contained\" color=\"primary\" onClick={this.openTuto}>Aide</Button>\n                                <p>Nous sommes au tour : {this.state.tour}</p>\n                                <p>Bonjour {this.props.name}. Vous êtes {roleToString(this.props.role)}, votre identifiant est {this.state.id}</p>\n                                {this.state.ressources !== undefined && <Ressources ressources={this.state.ressources} cost={this.state.cost} />}\n                                {!this.state.fini ?\n                                    <>\n                                        {console.log(\"SELECTED TILE = \", this.state.selectedTile)}\n                                        {this.state.selectedTile === null ? \"\" :\n                                            <ActivitySwapper key=\"changeActivity\" changeTileActivity={this.changeTileActivity}\n                                                selectedTile={this.state.selectedTile} actions={this.state.lstActions} />\n                                        }\n                                        {console.log(\"LIST ACTIONS = \", this.state.lstActions)}\n                                        <ValidationTour key=\"validation\" endRound={this.endRound} tour={this.state.tour} actions={this.state.actions} />\n                                    </>\n                                    : \" En attente des autres joueurs...\"}\n                            </div> : \"L'animateur est en train de modifier la carte\"}\n                    </Menu>\n                    {Object.keys(this.state.lstConvo).length > 0 ? <Chat lstConvo={this.state.lstConvo} /> : \"\"}\n                    <div className=\"row\">\n                        <div className=\"col-sm-6\">\n                            {\n                                this.state.map.moreHexas !== \"\" && <Bassin handleClick={this.handleClickTile}\n                                                                           map={this.state.map} role={this.props.role} selectedId={this.state.selectedTile?.id} id={this.state.id} />\n                            }\n                        </div>\n                        <div className=\"col-sm-6\">\n                            <DetailsParcelle id={this.state.selectedTile?.practice} currentActivity={this.state.selectedTile?.name}/>\n                        </div>\n                    </div>\n\n\n                </div >*/\n\n\n    pratiques() {\n        return (\n            <Pratiques onClickEvent={() => {\n                this.setState({interfaceCtx: 3})\n            }} changeTileActivity={this.changeTileActivity} selectedTile={this.state.selectedTile}\n                       actions={this.state.lstActions} role={this.props.role} pseudo={this.props.name}\n                        competences={this.state.competences}/>\n        )\n    }\n\n    autresActions() {\n        return (\n            <ActionsAutres changeTileActivity={this.changeTileActivity} selectedTile={this.state.selectedTile} actions={this.state.lstActions}\n            onClickEvent={() => {\n                this.setState({interfaceCtx: 3})\n            }} role={this.props.role} pseudo={this.props.name}\n                           competences={this.state.competences}/>\n        )\n    }\n\n    updating() {\n        return (\n            <Updating ut={23} ub={3} oldUb={-1} oldUt={0} formations={[1, 0, 9, 1]} role={this.props.role}\n                      pseudo={this.props.name} bassin={nameSubBassin(getSubBassin(this.state.id))}\n                      tour={this.state.tour}\n                      h={timersDefault(1)[0]}\n                      m={timersDefault(2)[1]}\n                      s={timersDefault(3)[2]}\n                      onClickEvent={() => this.setState({interfaceCtx: 2})}\n                        pTimer={this.state.pTimers}/>\n        )\n\n    }\n\n    strategy() {\n        return (\n            <Strategy h={timersDefault(2)[0]}\n                      m={timersDefault(2)[1]}\n                      s={timersDefault(2)[2]} role={this.props.role} listPlayers={[\"Hossam\", \"Rien\", \"Plus\", \"Au\", \"CR\"]}\n                      pseudo={this.props.name} bassin={nameSubBassin(getSubBassin(this.state.id))}\n                      tour={this.state.tour} formations={[1, 0, 1, 1]}\n                      ut={23} ub={23}\n                      onClickEvent={() => this.setState({interfaceCtx: 3})} pTimer={this.state.pTimers}/>\n        )\n    }\n\n    events() {\n        return (\n            <Events pseudo={this.props.name} bassin={nameSubBassin(getSubBassin(this.state.id))} tour={this.state.tour}\n                    formations={[1, 0, 1, 1]} indicateurs={[123, 56]}\n                    ut={23} ub={23} meteorology={[[0, 1], [2, 1], [2, 3]]} role={this.props.role} maladie={true}\n                    onClickEvent={() => this.setState({interfaceCtx: 5})}\n                    h={timersDefault(4)[0]}\n                    m={timersDefault(4)[1]}\n                    s={timersDefault(4)[2]}\n                    pTimer={this.state.pTimers}/>\n        )\n    }\n\n    debriefing() {\n        return (\n            <>\n                <Debriefing h={timersDefault(5)[0]}\n                            m={timersDefault(5)[1]}\n                            s={timersDefault(5)[2]} role={this.props.role}\n                            pseudo={this.props.name} bassin={nameSubBassin(getSubBassin(this.state.id))}\n                            tour={this.state.tour}\n                            onClickEvent={() => this.setState({interfaceCtx: 6})}\n                            pTimer={this.state.pTimers}/>\n            </>\n        )\n    }\n\n    finishTour = () => {\n        socket.emit(\"finishTour\", this.state.id, true, (response) => {\n            console.log(\"Finish Tour : \", this.state.id);\n        })\n        //this.setState({interfaceCtx: 7});\n    }\n\n    satisfaction() {\n        return (\n            <Satisfaction role={this.props.role}\n                          h={timersDefault(6)[0]}\n                          m={timersDefault(6)[1]}\n                          s={timersDefault(6)[2]}\n                     pseudo={this.props.name}\n                          pTimer={this.state.pTimers}\n                     bassin={nameSubBassin(getSubBassin(this.state.id))}\n                     tour={this.state.tour} onClickEvent={this.finishTour} resultats={() => {this.setState({interfaceCtx: 7})}}/>\n        )\n    }\n\n    results() {\n        return (\n            <Results role={this.props.role}\n                     h={timersDefault(7)[0]}\n                     m={timersDefault(7)[1]}\n                     s={timersDefault(7)[2]}\n                            data={this.state.data}\n                          pseudo={this.props.name}\n                     pTimer={this.state.pTimers}\n                          bassin={nameSubBassin(getSubBassin(this.state.id))}\n                          tour={this.state.tour} onClickEvent={() => this.setState({interfaceCtx: 1}) }/>\n        )\n    }\n\n    render() {\n        console.log(\"CONTEXT : \", this.context);\n        return (\n            <>\n                {\n                    this.state.interfaceCtx === 1 ? this.updating() :\n                        <div>\n                            {this.state.interfaceCtx === 2 && this.strategy()}\n                            {this.state.interfaceCtx === 3 && this.actionChoice()}\n                            {this.state.interfaceCtx === 4 && this.events()}\n                            {this.state.interfaceCtx === 5 && this.debriefing()}\n                            {this.state.interfaceCtx === 6 && this.satisfaction()}\n                            {this.state.interfaceCtx === 7 && this.results()}\n                            {this.state.interfaceCtx === 0 && this.pratiques()}\n                            {this.state.interfaceCtx === 8 && this.autresActions()}\n                        </div>\n                }\n                {/*{console.log(\"STATE ID = \" + this.state.id + \"\\nROLE = \"+this.props.role)}\n                <Updating ut={23} ub={3} oldUb={-1} oldUt={0} formations={[1, 0, 9, 1]} role={this.props.role} h={0} m={0} s={20}\n                   pseudo={this.props.name} bassin={nameSubBassin(getSubBassin(this.state.id))} numeroPhase={1} tour={this.state.tour}/>);*/}\n            </>)\n    }\n}\nexport default Conteneur\n/*\n\ngarder activités des derniers tours\nconserver les noms durant les formulaires\n\n*/","/home/elouati/Bureau/projet_working/client/src/Game/controls/Menu.js",[],"/home/elouati/Bureau/projet_working/client/src/Game/controls/handleClickTileFarmer.js",[],"/home/elouati/Bureau/projet_working/client/src/Game/controls/ConfirmDialog.js",["332"],"import Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport React from 'react'\nexport default class ConfirmDialog extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        return (\n            <Dialog\n                open={true}\n                disableBackdropClick\n                disableEscapeKeyDown\n            >\n                <DialogContent>\n                    <DialogContentText>\n                        Etes-vous sûr de vouloire faire l'action suivante : {this.props.action}\n                    </DialogContentText>\n                    <DialogActions>\n                        <Button onClick={this.props.cancel} color=\"primary\">annuler</Button>\n                        <Button onClick={this.props.confirm} color=\"primary\">confirmer</Button>\n                    </DialogActions>\n                </DialogContent>\n            </Dialog>\n        )\n    }\n}","/home/elouati/Bureau/projet_working/client/src/Game/controls/Ressources.js",[],"/home/elouati/Bureau/projet_working/client/src/Game/controls/roleToString.js",[],["333","334"],"/home/elouati/Bureau/projet_working/client/src/Game/Diary.js",["335"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport SlideField from './controls/SlideField';\nimport { socket } from '../socket';\nexport default class ScrollDialog extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { slider: 0 }\n    }\n    handleChange = (event, value) => {\n        this.setState({ slider: value })\n    }\n    handleClose = () => {\n        socket.emit(\"satisfaction\", this.state.slider);\n        this.setState({ slider: 0 })\n        this.props.closeDiary()\n    }\n    render() {\n        return (\n            <div>\n                <Dialog\n                    fullScreen\n                    open={true}\n                    scroll=\"paper\"\n                    aria-labelledby=\"scroll-dialog-title\"\n                    aria-describedby=\"scroll-dialog-description\"\n                >\n                    <DialogTitle id=\"scroll-dialog-title\">Que s'est-il passé ?</DialogTitle>\n                    <DialogContent dividers='paper'>\n                        <DialogContentText\n                            id=\"scroll-dialog-description\"\n                            tabIndex={-1}\n                        >\n                            <img src={this.props.data} width=\"100%\" alt=\"\" />\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.props.closeDiary} color=\"primary\">\n                            Valider\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div >\n        );\n    }\n}\n","/home/elouati/Bureau/projet_working/client/src/Game/controls/ActivitySwapper.js",["336"],"import React from 'react'\nimport PropTypes from 'prop-types';\nimport Select from '@material-ui/core/Select';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport createCheckbox from \"./createCheckbox.js\"\nimport { Button } from '@material-ui/core'\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Typography } from '@material-ui/core';\nclass ActivitySwapper extends React.Component {\n    /*    \n        Input : props={changeTileActivity,selectedTile,actions}\n                changeTileActivity : func : function declared in parent to change tile(s)'s activity\n                selectedTile : object : tile selected by the player\n                actions : object : list of all the available actions\n\n        Syntax : <ActivitySwapper changeTileActivity={this.changeTileActivity} \n            selectedTile={the selected tile} actions={the list of actions} />\n\n        Author : Hugo KELHETTER            \n    */\n    constructor(props) {\n        super(props);\n        this.state = { selectActivity: 0, checkbox: false };\n        this.createCheckbox = createCheckbox.bind(this)\n        //this.handleChange = this.handleChange.bind(this);\n        //this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    static propTypes = {\n        changeTileActivity: PropTypes.func.isRequired,\n        selectedTile: PropTypes.object.isRequired,\n        actions: PropTypes.array.isRequired\n    }\n    /* \n        Function : handleChange\n    \n        Syntax  : handleChange(event)\n            \n        Input   : event : the event calling the function\n            \n        Description : \n            function called when interacting with the form's components\n            if the target is a checkBox, change its validation\n            update the state value for the corresponding event target\n    \n        Author : Hugo KELHETTER\n    */\n    handleChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        this.setState({ [target.name]: value });\n    }\n    /* \n        Function : handleSubmit\n    \n        Syntax  : handleSubmit(event)\n        \n        Input   : event :  the event calling the function\n    \n        Description : \n            call the function changeTileActivity from parent with in parameters the values of the fieldset \n           \n        Author : Hugo KELHETTER\n    */\n    handleSubmit = (event) => {\n        event.preventDefault();\n        if (this.state.selectActivity != null) {\n            this.props.changeTileActivity(this.props.actions[this.state.selectActivity], this.state.checkbox)\n        }\n    }\n    actionToString(action, id) {\n        let i = 0;\n\n        /*while (action[i].Id !== id) {\n            console.log(action[i], id)\n            i++\n        }*/\n        return action[i].Pratique\n    }\n    /* \n        Function : render\n    \n        Syntax  : render()\n            \n        Description : display the form to change tile/subBasin's activityy\n           \n        Author : Hugo KELHETTER\n    */\n    render() {\n        return (\n            < form onSubmit={this.handleSubmit} >\n                <FormLabel>\n                    Choisissez votre nouvelle activité pour\n                    {this.state.checkbox ? ' le sous bassin'\n                        : 'la case ${this.props.selectedTile.subId}'}\n                </FormLabel >\n                <Typography>Activité en cours : {this.actionToString(this.props.actions, this.props.selectedTile.practice)}</Typography>\n                <Select name=\"selectActivity\" onChange={this.handleChange} value={this.state.selectActivity}>\n                    {/* display all possible action for selected tile */}\n                    {this.props.actions.map((action, i) =>\n                        <MenuItem key={i} value={i}>{action.Pratique}</MenuItem>,\n                    )}\n                    {/*  {this.props.selectedTile.activity === \"1\" ? \"\" : <option value=\"1\">vigne</option>}\n                        {this.props.selectedTile.activity === \"2\" ? \"\" : <option value=\"2\">blé</option>}\n                        {this.props.selectedTile.activity === \"3\" ? \"\" : <option value=\"3\">bovins</option>} */}\n                </Select>\n\n\n                <br />\n\n                <FormLabel>modifier toutes les cases\n                    {this.createCheckbox(\"checkbox\")}\n                </FormLabel>\n\n\n                <Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit}>Envoyer</Button>\n            </form >\n        );\n    }\n}\n\nexport default ActivitySwapper\n/*\necran de fin de partie\nselection activité de derniere partie\nvalidation prochain tour\nrecuperation du tour depuis le serveur\nchanger style des boutons radios\n\n*/","/home/elouati/Bureau/projet_working/client/src/Game/controls/ValidationTour.js",[],"/home/elouati/Bureau/projet_working/client/src/Game/controls/SlideField.js",[],"/home/elouati/Bureau/projet_working/client/src/Game/Chat.js",["337","338","339"],"import React from 'react'\nimport { socket } from '../socket'\nimport PropTypes from 'prop-types';\n\nexport default class Chat extends React.Component {\n    /*             \n        Input : props={lstPlayer,lstConvo,authore}\n                lstPlayer : object : list of all the players\n                lstConvo : object : list of all the conversations\n                authore : string : name of the player\n\n        Syntax : <Chat lstPlayer={lstPlayer} lstConvo={lstConvo} authore={authore} />\n            \n        Author : Hugo KELHETTER\n    */\n    constructor(props) {\n        super(props)\n        let messages = {}\n        Object.keys(this.props.lstConvo).map((convo) =>\n            messages[convo] = []\n        )\n        this.state = { textValue: \"\", convo: Object.keys(this.props.lstConvo)[0], messages, inConvo: false }\n        //this.handleSubmit = this.handleSubmit.bind(this)\n        //this.handleConvoChange = this.handleConvoChange.bind(this)\n        //this.receiveMessage = this.receiveMessage.bind(this)\n        this.lastMessage = React.createRef()\n    }\n    static propTypes = {\n        lstPlayer: PropTypes.object.isRequired,\n        lstConvo: PropTypes.object.isRequired\n    }\n    /* \n        Function : shouldComponentUpdate\n    \n        Description : the component only updates if the state changes\n            \n        Author : Hugo KELHETTER\n    */\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.state !== nextState || this.props.lstConvo !== nextProps.lstConvo\n    }\n    /* \n        Function : handleSubmit\n    \n        Syntax  : handleSubmit(e)\n            \n        Input   : e : event calling the function\n        \n        Description : \n            update this.state.messages by adding a new value to the object \n                containing conversation room's name a string and author's id\n            this.state.textValue is set to \"\"\n        \n        Author : Hugo KELHETTER\n    */\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (!this.state.textValue) return\n        const newMessage = { msg: this.state.textValue, authore: this.props.authore, convo: this.state.convo }\n        this.setState({\n            messages: this.addMessage(newMessage),\n            textValue: \"\"\n        })\n        socket.emit(\"sendMessage\", newMessage)\n\n    }\n    addMessage(newMessage) {\n        let messages = this.state.messages\n        messages[this.state.convo].push(newMessage)\n        return messages\n    }\n    receiveMessage = (newMessage) => {\n        let messages = this.state.messages\n        const message = { msg: [newMessage.msg], authore: [newMessage.authore] }\n        messages[newMessage.convo].push(message)\n    }\n    /* \n        Function : updateText \n    \n        Syntax  : updateText(e)\n            \n        Input   : e : the value of the event calling the function\n            \n        Description : update this.state.textValue based on the pressed key\n\n        Author : Hugo KELHETTER\n            \n    */\n    updateText(e) {\n        this.setState({ textValue: e })\n    }\n    componentDidMount() {\n        this.scrollToBottom()\n        socket.on(\"receiveMessage\", (data) => {\n            this.setState({ message: this.addMessage(data) })\n        })\n    }\n    componentDidUpdate(prevProps, prevState) {\n        Object.keys(this.props.lstConvo).map((convo) => {\n            if (this.state.messages[convo] === undefined) this.state.messages[convo] = []\n        })\n        if (prevState.messages[this.state.convo].length !== this.state.messages[this.state.convo].length) this.scrollToBottom()\n\n    }\n    componentWillUnmount() {\n        socket.removeAllListeners()\n    }\n    /* \n        Function : scrollToBottom\n    \n        Syntax  : scrollToBottom()\n        \n        Description : focus on the bottom of the chat\n            \n    */\n    scrollToBottom() {\n        this.lastMessage?.current?.scrollIntoView({ behavior: 'smooth' })\n    }\n    /* \n        Function : handleConvoChange\n            \n        Description : set the active conversation\n\n        Author : Hugo KELHETTER\n            \n    */\n    handleConvoChange = (event) => {\n        this.setState({ convo: event.target.value })\n    }\n    /* \n        Function : render\n    \n        Syntax  : render()\n            \n        Description : display a chat + available conversations\n        \n        Author : Hugo KELHETTER\n    */\n    render() {\n        return (\n            <div className=\"chat\">\n                <>\n                    <div id=\"convoChoice\">\n\n                        <select name=\"convoSelect\" onChange={this.handleConvoChange}>\n                            {Object.keys(this.props.lstConvo).map((convo) =>\n                                <option key={convo} >{convo}</option>\n                            )}\n                        </select>\n                    </div>\n                    <div className=\"convo\">\n                        {Object.values(this.state.messages[this.state.convo]).map((msg, i) =>\n                            <div key={i} className={`message ${msg.authore == this.props.authore ? \"\" : \"received\"}`}>\n                                <p className=\"msg\"> {msg.msg}</p>\n                                <p className=\"authore\">{msg.authore === this.props.authore ? \"Vous\" : this.state.authore?.name}</p>\n                            </div>\n\n                        )}\n                        {/* empty div to focus on with scrollToBottom */}\n                        <div className=\"dummy\" ref={this.lastMessage}></div>\n                    </div>\n                    <div className=\"submit\">\n                        <form onSubmit={this.handleSubmit} >\n                            <fieldset disabled={this.state.inConvo}>\n                                <input id=\"inputChat\" autoComplete=\"off\" value={this.state.textValue} onChange={e => this.updateText(e.target.value)} />\n                                <input type=\"submit\"></input>\n                            </fieldset>\n                        </form>\n                    </div>\n                </>\n\n\n            </div>\n        );\n    }\n}\n","/home/elouati/Bureau/projet_working/client/src/Game/map/Bassin.js",["340"],"import React, { Component } from 'react'\nimport { HexGrid, Layout, Path, Hexagon, Text } from 'react-hexgrid'\nimport layoutProps from './layoutProps.js'\nimport { setPlayerClass, getSubBassin, setMapSize, setBaseClasses } from './MapUtil.js'\nimport PropTypes from 'prop-types';\nexport default class Bassin extends Component {\n    constructor(props) {\n        super(props)\n        this.update = this.update.bind(this)\n    }\n\n    /* \n        Input : props={map:{moreHexas,moreRivers,player},handleClick,role,selectedId}\n                map.moreHexas : object : contains all data to create the map\n                map.Rivers : array : contains object to create river\n                        They look like that {start,end,outletFlowAcc}\n                        start : hexagon where the river stats\n                        end : hexagon where the river ends\n                        outletFlowAcc : how much water there is\n                handleClick : func : set the selected tile in parent component\n                selectedId : number : id of the selected tile\n\n        Syntax : <Bassin map={moreHewas,moreRivers,player} handleClick={this.handleClick} \n            role={role} selectedId={selectedId} />\n    */\n    static propTypes = {\n        map: PropTypes.object.isRequired,\n        handleClick: PropTypes.func.isRequired,\n        role: PropTypes.number.isRequired,\n        selectedId: PropTypes.number\n    }\n    update = () => {\n        this.forceUpdate()\n    }\n    componentDidMount() {\n        /* \n            re-render when window is resized\n            allows to update dimensions of Hexgrid\n        */\n        window.addEventListener('resize', this.update)\n\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.update)\n    }\n\n    /* \n        Function : createHexeFarmer\n    \n        Syntax\n            <Hexagon/>=createHexeFarmer(hex,i)        \n        \n        Input\n            hex :object containing the data to create the hexagon\n            i   :hex's id\n    \n        Outputs\n            polygon :polygon of type svg with hexagon shape\n            text    :text inside the polygon countaining hex's id + 1\n    \n        Description\n            returns the following architecture:\n                <g class='hexagon-group' plus some others such as the output of activityToString>\n                    <g>\n                        <polygon/>\n                        <text/>\n                    </g>\n                </g>\n        \n        see /src/map/MapUtil.js for more information about hex'properties\n    \n        Author : Hugo KELHETTER\n    */\n    createHexeFarmer(hex, i, player) {\n        if (hex.basin === getSubBassin(player)) {\n            const bassin = getSubBassin(player)\n            let classname = \"\";\n            const mainCLC1 = hex.mainCLC1.toString()\n            classname += hex.basin === bassin ? `${hex.modified} ${setBaseClasses(hex)} \n        ${setPlayerClass(hex.player)} ${hex.player % 3} ${hex.Id}` : \"notInBassin\"\n            if (this.props.selectedId.includes(hex.Id)) classname += \" selected\"\n            //console.log(\"HEX.PLAYER = \" + hex.player + \" PLAYER = \" + player);\n            //console.log(\"HEX.ID : \", hex.player === player);\n            return <Hexagon\n                bassin={bassin}\n                onClick={(e, h) => hex.player ==  player && this.props.handleClick(h)}\n                mainCLC1={mainCLC1} irrig={hex.irrig} eco={hex.eco} market={hex.market}\n                className={classname}\n                /* data can be found in h.props in handleClick */\n                subId={hex.cellPlayer}\n                key={hex.Id} id={hex.Id} q={hex.q} r={hex.r} s={hex.s}\n                practice={hex.practice}>\n                {(hex.basin === bassin && hex.cellPlayer != null && hex.cellPlayer > 0) && this.displayTextTop(hex.cellPlayer)}\n                {(hex.basin === bassin && mainCLC1 === 1 && hex.market === 1) && this.displayTextBottom(\"M\")}\n                {(hex.basin === bassin && hex.irrig === 1) && this.displayTextBottom(\"💧\")}\n            </Hexagon>\n        }\n    }\n    /* same thing as createHexeFarm but for elected players */\n    createHexeElected(hex, i) {\n        let classname = setBaseClasses(hex)\n        if (hex.Id === this.props.selectedId) classname += \" selected\"\n        const mainCLC1 = hex.mainCLC1.toString()\n        return <Hexagon\n            onClick={(e, h) => this.props.handleClick(h)}\n\n            className={classname}\n            key={i} id={i} q={hex.q} r={hex.r} s={hex.s}\n            mainCLC1={mainCLC1} irrig={hex.irrig} eco={hex.eco} market={hex.market}\n        >\n            {hex.cellPlayer != null && this.displayTileId(hex.cellPlayer)}\n            {mainCLC1 === 1 && this.displayMarket(hex.market)}\n\n        </Hexagon >\n    }\n    /* same thing as createHexeFarmer but for animator */\n    createHexeAnimator(hex, i) {\n        let classname = setBaseClasses(hex)\n        if (hex.Id === this.props.selectedId) classname += \" selected\"\n        //console.log(\"BASSIN CLASSNAME = \", classname);\n        const mainCLC1 = hex.mainCLC1.toString();\n        //console.log(\"HEX.ID = \" + hex.Id + \" SELECTED_ID = \" + this.props.selectedId);\n        return <Hexagon\n            className={classname}\n            bassin={hex.basin}\n            player={hex.player}\n            onClick={(e, h) => this.props.handleClick(h)}\n            key={hex.Id} id={hex.Id} q={hex.q} r={hex.r} s={hex.s}\n            mainCLC1={mainCLC1} irrig={hex.irrig} eco={hex.eco} market={hex.market}\n            practice={hex.practice}\n        >\n            {hex.cellPlayer != null && this.displayTileId(hex.cellPlayer)}\n            {mainCLC1 === 1 && this.displayMarket(hex.market)}\n            {(hex.irrig === 1) && this.displayTextBottom(\"💧\")}\n        </Hexagon>\n    }\n    /* \n        Function : displayTileId \n        \n        Syntax  :  displayTileId(text)\n        \n        Input   : text : text to display\n            \n        Description : return an object <Text> containing the input text\n            \n        Author : Hugo KELHETTER\n    */\n    displayTileId(id) {\n        return id > 0 && <Text key=\"tileId\" y={-2}>{id.toString()}</Text>\n    }\n    displayMarket(market) {\n        return market === 1 && <Text key=\"market\" y={2}>M</Text>\n    }\n    /* \n        Function : displayTextBottom \n        \n        Syntax  :  displayTextBottom(text)\n        \n        Input   : text : text to display\n            \n        Description : return an object <Text> containing the input text at the bottom of the parent\n            \n        Author : Hugo KELHETTER\n    */\n    displayTextBottom(text) {\n        return <Text key={text} y={2}>{text}</Text>\n    }\n    /* \n        Function : displayTextTop \n        \n        Syntax  :  displayTextTop(text)\n        \n        Input   : text : text to display\n            \n        Description : return an object <Text> containing the input text at the top of the parent\n            \n        Author : Hugo KELHETTER\n    */\n    displayTextTop(text) {\n        return <Text key={text} y={-2}>{text}</Text>\n    }\n\n    /* \n        Function : render \n        \n        Description : display an hexagonal grid and rivers\n        \n        Author : Hugo KELHETTER\n    */\n    render() {\n        return (<>\n            <HexGrid width={setMapSize()} height={setMapSize()} viewBox=\"-50 -50 100 100\" >\n                <Layout size={layoutProps.size} flat={layoutProps.flat}\n                    spacing={layoutProps.spacing} origin={{ x: layoutProps.x, y: layoutProps.y }} >\n                    {/* loops are done separetly because else the rivers may not always be visible */}\n                    {Object.values(this.props.map.moreHexas).map((hex, i) =>\n                        this.props.role === 1 ? this.createHexeFarmer(hex, i, this.props.id) :\n                            this.props.role === 2 ? this.createHexeElected(hex, i) :\n                                this.createHexeAnimator(hex, i)\n                    )}\n                    {this.props.map.moreRivers.map((river, i) =>\n                        <g key={i} className={river.start.outletFlowAcc === 1 ? \"small\" : \"\"} >\n                            {(this.props.role === 1 && river.end !== undefined) && river.start.basin !== getSubBassin(this.props.id) ? \"\" :\n                                <Path\n                                    key={i} start={river.start} end={river.end}\n                                />}\n\n                        </g>)}\n                </Layout>\n            </HexGrid >\n        </>\n        );\n    }\n}\n","/home/elouati/Bureau/projet_working/client/src/Game/animator/ChangeTile.js",[],"/home/elouati/Bureau/projet_working/client/src/Game/controls/createCheckbox.js",[],"/home/elouati/Bureau/projet_working/client/src/Game/map/layoutProps.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/Updating/Updating.js",["341","342","343"],"import React, {Component} from \"react\";\nimport Style from \"./Updating.module.scss\";\nimport ImageUp from \"./up.png\";\nimport ImageDown from \"./down.png\";\nimport ImageArgent from \"./argent.png\";\nimport ImageTemps from \"./montre_circulaire.png\";\nimport Header from \"../Header/Header\";\nimport formationId from \"../utils/formationId\";\nimport MenuRight from \"../MenuRight/MenuRight\";\nimport {socket} from \"../../socket\";\nimport calculateTime from \"../utils/calculateTime\";\nimport Banque from \"../Banque/Banque\";\nimport timersDefault from \"../../Game/TimersDefault\";\n\n\nexport default class Updating extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            colonnes: [\"col-sm-12\", \"col-sm-6\", \"col-sm-4\", \"col-sm-3\"],\n            imageUt: (this.props.oldUt >= 0) ? ImageUp : ImageDown,\n            imageUb: (this.props.oldUb >= 0) ? ImageUp : ImageDown,\n            timer: [],\n            resources: [],\n            competences: [],\n            banque: false\n            //isOn: false\n        }\n\n        //setTimeout( () => {this.setState({isOn: true})}, 5)\n    }\n\n    /*setTimer = () => {\n        socket.emit(\"getTimerUpdating\", (response) => {\n            console.log(response);\n            console.log(calculateTime(response));\n            this.setState({timer: calculateTime(response)});\n            console.log(\"State : \", this.state.timer);\n        })\n    }*/\n\n    componentDidMount() {\n        socket.emit(\"getTimer\", 1,(response) => {\n            console.log(response);\n            console.log(calculateTime(response));\n            this.setState({timer: calculateTime(response)});\n            console.log(\"State : \", this.state.timer);\n        })\n\n        socket.emit(\"getStats\", this.props.pseudo, (response) => {\n            console.log(response[0]);\n            const resources = [response[0].ut, response[0].ub]\n            const competences = [response[0].GCultures, response[0].Verger,\n                response[0].BovinV, response[0].Viticulture, response[0].BovinL, response[0].Granivore];\n            this.setState({competences});\n            this.setState({resources})\n        })\n    }\n\n    nombreElements() {\n        let index = 0;\n        for(let i = 0; i < 4; i++){\n            if(this.state.competences[i] !== 0) {\n                index += 1;\n            }\n        }\n        return index;\n    }\n\n\n\n    render() {\n        return (\n            <>\n                <Header tour={this.props.tour} pseudo={this.props.pseudo} bassin={this.props.bassin} role={this.props.role} numeroPhase={1} h={(this.props.pTimer)? this.state.timer[0] : timersDefault(1)[0]}\n                        m={(this.props.pTimer)? this.state.timer[1] : timersDefault(1)[1]}\n                        s={(this.props.pTimer)? this.state.timer[2] : timersDefault(1)[2]}\n                    finishEvent={this.props.onClickEvent}/>\n                <div className=\"row\">\n                    <div className=\"col-sm-2\">\n                        <MenuRight role={this.props.role} pseudo={this.props.pseudo} onClickBank={() => this.setState({banque: true})}/>\n                    </div>\n                        <div className=\"col-sm-10\">\n                        {(!this.state.banque) ?\n                            <>\n                            <section className={Style.Updating}>\n                                Vos ressources au début du tour :\n                                <div className=\"row text-center\">\n                                    <div className=\"col-sm-6\">\n                                        <h2 className={Style.TextColor}>\n                                            <img className={Style.Image} src={ImageArgent}/> UB : {this.state.resources[1]}\n                                        </h2>\n                                    </div>\n                                    <div className=\"col-sm-6\">\n                                        <h2 className={Style.TextColor}>\n                                            <img className={Style.Image} src={ImageTemps}/> UT : {this.state.resources[0]}\n                                        </h2>\n                                    </div>\n                                </div>\n                                {this.props.role === 1 ? (<div>Vos niveaux de compétence :\n                                    <div className={\"row text-center\"}>{this.state.competences.map((f, index) =>\n                                        {if (f !== 0){\n                                            return (<div className={this.state.colonnes[this.nombreElements(this.state.competences)-1]}>\n                                                <p className={Style.TextColor}> {formationId(index)} </p>\n                                                <p className={Style.TextDecor}> {f} </p>\n                                            </div>  )\n                                        }}\n                                    )}</div></div>) : null}\n                            </section>\n                            <button onClick={this.props.onClickEvent} className={\"btn btn-small btn-primary\"}>Next</button>\n                            </>\n                        : <Banque pseudo={this.props.pseudo} ut={this.state.resources[0]} ub={this.state.resources[1]} retour={() => this.setState({banque: false})}/> }\n                        </div>\n                </div>\n            </>\n        )\n    }\n}","/home/elouati/Bureau/projet_working/client/src/Interface/Header/Header.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/utils/roleToString.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/utils/phaseToString.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/utils/MeetingTime.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/utils/formationId.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/MenuRight/MenuRight.js",["344"],"import React, {Component} from \"react\";\nimport StyleStrategy from \"../Strategy/Strategy.module.scss\";\nimport formationId from \"../utils/formationId\";\nimport {socket} from \"../../socket\";\n\nexport default class MenuRight extends Component {\n    state = {\n        competences: [],\n        resources: []\n    }\n\n    componentDidMount() {\n        socket.emit(\"getStats\", this.props.pseudo, (response) => {\n            console.log(response[0]);\n            const resources = [response[0].ut, response[0].ub]\n            const competences = [response[0].GCultures, response[0].Verger,\n                response[0].BovinV, response[0].Viticulture, response[0].BovinL, response[0].Granivore];\n            this.setState({competences, resources})\n            //console.log(calculateTime(response));\n            //this.setState({timer: calculateTi, me(response)});\n            //console.log(\"State : \", this.state.timer);\n        })\n    }\n\n    render() {\n        return (\n            <div className={StyleStrategy.containerPrime}>\n                <ul>\n                    <p className={StyleStrategy.texte}>Mes ressources :</p>\n                    <li>U B : {this.state.resources[1] }</li>\n                    <li>U T : {this.state.resources[0] }</li>\n                    {(this.props.role === 1) ? <div> <p className={StyleStrategy.texte}>Mes compétences :</p>{this.state.competences.map((f, index) =>\n                        {if (f !== 0){\n                            return (<li> {formationId(index)} {f} </li>)\n                        }}\n                    )} </div>: null}\n                    <button onClick={this.props.onClickBank} className={StyleStrategy.banque}>Banque</button>\n                </ul>\n            </div>\n        )\n    }\n}","/home/elouati/Bureau/projet_working/client/src/Interface/Strategy/Strategy.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/Strategy/CallingList.js",["345","346"],"import React, {Component} from \"react\";\nimport CallingElement from \"./CallingElement\";\nimport ImageRDV from \"./rdv.png\";\nimport Style from \"./Strategy.module.scss\";\n\nexport default class CallingList extends Component{\n\n    render() {\n        return (\n            <>\n                <div className=\"row\">\n                {this.props.listPlayers.map((f, index) =>\n                    <CallingElement order={index} player={f}/>\n                )}\n                </div>\n            </>\n        );\n    }\n}",["347","348"],"/home/elouati/Bureau/projet_working/client/src/Interface/Strategy/CallingElement.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/Events/Events.js",["349","350","351","352","353","354","355"],"import React, {Component} from \"react\";\nimport meteoToString from \"../utils/meteoToString\";\nimport Header from \"../Header/Header\";\nimport MenuRight from \"../MenuRight/MenuRight\";\nimport StyleStrategy from \"../Strategy/Strategy.module.scss\";\nimport Soleil from \"./soleil.png\";\nimport Pluie from \"./pluie.png\";\nimport Maladie from \"./maladie.png\";\nimport Eau from \"./eau.png\";\nimport Territoire from \"./territoire.png\";\nimport {socket} from \"../../socket\";\nimport calculateTime from \"../utils/calculateTime\";\nimport timersDefault from \"../../Game/TimersDefault\";\n\nexport default class Events extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timer: []\n        }\n    }\n\n    componentDidMount() {\n        socket.emit(\"getTimer\", 4,(response) => {\n            console.log(response);\n            console.log(calculateTime(response));\n            this.setState({timer: calculateTime(response)});\n            console.log(\"State : \", this.state.timer);\n        })\n    }\n\n    meteoAnnee(annee, index) {\n        return (\n            <div className=\"col-sm-4 text-center\">\n                <div className={StyleStrategy.meteo}>\n                    <header className={StyleStrategy.header3}>\n                        Année {index}\n                    </header>\n                    <p className={StyleStrategy.texteMeteo}>\n                        <img src={Pluie} className={StyleStrategy.ImageMeteo}/> Hiver {meteoToString(annee[0])}\n                    </p>\n                    <p className={StyleStrategy.texteMeteo}>\n                        <img src={Soleil} className={StyleStrategy.ImageMeteo}/> Été {meteoToString(annee[1])}\n                    </p>\n                </div>\n            </div>\n        );\n    }\n\n    indicateursBassin() {\n        if(this.props.role === 2) {\n            return (\n                <>\n                    <header className=\"text-center\">\n                        <div className={StyleStrategy.header}>\n                            Qualité de l'eau du Bassin\n                        </div>\n                    </header>\n                    <div className=\"text-center\">\n                        <div className={StyleStrategy.maladie}>\n                            <p className={StyleStrategy.texteMeteo}>\n                                <img src={Eau} className={StyleStrategy.ImageMaladie}/>\n                                <h2>{this.props.indicateurs[0]}</h2>\n                            </p>\n                        </div>\n                    </div>\n                </>)\n        }\n        if(this.props.role === 0) {\n            return (\n                <>\n                    <header className=\"text-center\">\n                        <div className={StyleStrategy.header}>\n                            Qualité du territoire\n                        </div>\n                    </header>\n                    <div className=\"text-center\">\n                        <div className={StyleStrategy.maladie}>\n                            <p className={StyleStrategy.texteMeteo}>\n                                <img src={Territoire} className={StyleStrategy.ImageMaladie}/>\n                                <h2>{this.props.indicateurs[1]}</h2>\n                            </p>\n                        </div>\n                    </div>\n                </>)\n        }\n    }\n\n\n    render() {\n        return (\n            <>\n                <Header tour={this.props.tour} pseudo={this.props.pseudo} bassin={this.props.bassin} role={this.props.role} numeroPhase={4} h={(this.props.pTimer)? this.state.timer[0] : timersDefault(4)[0]}\n                        m={(this.props.pTimer)? this.state.timer[1] : timersDefault(4)[1]}\n                        s={(this.props.pTimer)? this.state.timer[2] : timersDefault(4)[2]}\n                        finishEvent={this.props.onClickEvent}/>\n                <div className=\"row\">\n                    <div className=\"col-sm-2\">\n                        <MenuRight ut={this.props.ut} ub={this.props.ub} formations={this.props.formations} role={this.props.role} pseudo={this.props.pseudo}/>\n                        {/*<div className={StyleStrategy.containerPrime}>\n                            <ul className=\"text-center\">\n                                <p className={StyleStrategy.texte}>Mes ressources :</p>\n                                <li>U T : {this.props.ut }</li>\n                                <li>U B : {this.props.ub }</li>\n                                {(this.props.role === 3) ? <div> <p className={StyleStrategy.texte}>Mes compétences :</p>{this.props.formations.map((f, index) =>\n                                    {if (f !== 0){\n                                        return (<li> {formationId(index)} {f} </li>)\n                                    }}\n                                )} </div>: null}\n                            </ul>\n                        </div>*/}\n                    </div>\n                    <div className=\"col-sm-10\">\n                        <section className={StyleStrategy.none2}>\n                            <header className=\"text-center\">\n                                <div className={StyleStrategy.header}>\n                                    Météo des 3 années passées\n                                </div>\n                            </header>\n                            <div className=\"row\">\n                                {this.props.meteorology.map((annee, index) =>\n                                    this.meteoAnnee(annee, index))}\n                            </div>\n                            <header className=\"text-center\">\n                                <div className={StyleStrategy.header}>\n                                    Événements particuliers\n                                </div>\n                            </header>\n                            <div className=\"text-center\">\n                                <div className={StyleStrategy.maladie}>\n                                    <header className={StyleStrategy.header3}>\n                                        Maladie & Bio-agresseurs\n                                    </header>\n                                    <p className={StyleStrategy.texteMeteo}>\n                                        <img src={Maladie} className={StyleStrategy.ImageMaladie}/>\n                                        <i> {(this.props.maladie === false) ? \"Pas d'\" : \"\"}Attaque de bio-agresseurs</i>\n                                    </p>\n                                </div>\n                            </div>\n                            {this.indicateursBassin()}\n                        </section>\n                        <button onClick={this.props.onClickEvent} className={\"btn btn-small btn-primary\"}>Next</button>\n                    </div>\n                </div>\n            </>)\n\n                    {/*<div className=\"row\">\n                <div className=\"col-sm-4\">\n                </div>\n                <div data-autoplay={12000}/>\n                <div className=\"col-sm-4\">\n\n                </div>\n                <div className=\"col-sm-4\">\n\n                </div>\n\n                {this.props.meteorology.map((annee, index) =>\n                    annee.map((saison, i) =>\n                        <div className=\"col-sm-4\">\n                            Année {index} : {i === 0 ?\n                            <h2>Hiver {meteoToString(saison)}</h2> :\n                            <h2>Été {meteoToString(saison)}</h2>}\n                        </div>))}\n                {this.props.role === 1 ? <h3>Indice de qualité du territoire : {this.props.iqTerritoire}</h3> :\n                    this.props.role === 2 ? <h3>Indice de qualité de l'eau du bassin : {this.props.iqBassin}</h3>:\n                        null\n                }\n            </div>*/}\n\n    }\n}\n\n","/home/elouati/Bureau/projet_working/client/src/Interface/utils/meteoToString.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/Debriefing/Debriefing.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/utils/Validation.js",[],["356","357"],"/home/elouati/Bureau/projet_working/client/src/Game/interface-context.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/utils/Timer/ReactTimerStopwatch.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/utils/Timer/Component/Time/Time.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/utils/Timer/Component/Circle/Circle.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/Animator/SetFarmers.js",["358","359","360","361"],"import React, {Component} from 'react';\nimport Style from \"../Header/Header.module.scss\";\nimport MeetingTime from \"../utils/MeetingTime\";\nimport phaseToString from \"../utils/phaseToString\";\nimport roleToString from \"../utils/roleToString\";\nimport StyleStrategy from \"../Strategy/Strategy.module.scss\";\nimport Checkbox from \"../utils/Checkbox\";\nimport FarmerActivity from \"./FarmerActivity\";\n\nclass SetFarmers extends Component {\n\n    state = {\n        bassins: [\"Amont\", \"Milieu\", \"Aval\"],\n        agriculteurs: [],\n        defaultOption: this.props.default,\n        valueButton: 0\n    }\n\n    increments = () => {\n        this.setState({valueButton: this.state.valueButton+1})\n        //document.getElementById('inc').value = this.state.valueButton + 1;\n    }\n\n    decrements = () => {\n        this.setState({valueButton: this.state.valueButton-1})\n        //document.getElementById('inc').value = this.state.valueButton + 1;\n    }\n\n    selectAgri() {\n        console.log(this.state.valueButton)\n        return (\n            <>\n                <button onClick={this.increments}>+</button>\n                <button onClick={this.decrements}>-</button>\n                <input type=\"text\" id=\"inc\" value={this.state.valueButton}/>\n            </>\n        )\n    }\n\n    render() {\n        return (\n            <>\n                <div className={Style.Header}>\n                    <div className={Style.Content}>\n                        <div className=\"text-center\">\n                            <div className={Style.TextColor}>\n                                Jeu Sérieux - Le Bassin de Moderbach\n                            </div>\n                        </div>\n                        <div className={Style.TextColor}>\n                            <div className=\"row text-center\">\n                                <div className=\"col-sm-6\">Pseudo : {this.props.pseudo}</div>\n                                <div className=\"col-sm-6\">Rôle : Animateur</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <div className={StyleStrategy.nextInterface} onClick={this.props.nextInterface}>\n                        <div className=\"text-center\">\n                            Passer à l'interface suivante\n                        </div>\n                    </div>\n                    <section className={StyleStrategy.none}>\n                        <header className=\"text-center\">\n                            <div className={StyleStrategy.header}>\n                                Niveaux de compétences pour les agriculteurs\n                            </div>\n                        </header>\n                        <section>\n                            <header className=\"text-center\">\n                                <div className={StyleStrategy.header}>\n                                    Bassin Amont\n                                </div>\n                            </header>\n                            {this.props.listAgri.map(\n                                x => <FarmerActivity x={x}/>)}\n                        </section>\n                        {this.selectAgri()}\n                    </section>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default SetFarmers;","/home/elouati/Bureau/projet_working/client/src/Interface/Animator/FarmerActivity.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/utils/Checkbox.js",["362","363"],"import React, { Component, PropTypes } from 'react';\nimport Style from \"../Header/Header.module.scss\";\n\nclass Checkbox extends Component {\n    state = {\n        isChecked: false,\n    }\n\n    toggleCheckboxChange = () => {\n        const { handleCheckboxChange, label } = this.props;\n\n        this.setState(({ isChecked }) => (\n            {\n                isChecked: !isChecked,\n            }\n        ));\n\n        handleCheckboxChange(label);\n    }\n\n    render() {\n        const { label } = this.props;\n        const { isChecked } = this.state;\n\n        return (\n            <div className=\"checkbox\">\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            value={label}\n                            checked={isChecked}\n                            onChange={this.toggleCheckboxChange}\n                        />\n                        {label}\n                    </label>\n            </div>\n        );\n    }\n}\n\nexport default Checkbox;\n\n","/home/elouati/Bureau/projet_working/client/src/Interface/Animator/SetTimeInterface.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/utils/calculateTime.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/Banque/Banque.js",["364","365"],"import React, {Component} from 'react';\nimport Style from \"../Strategy/Strategy.module.scss\";\nimport StyleUpdating from \"../Updating/Updating.module.scss\";\nimport ImageArgent from \"../Updating/argent.png\";\nimport ImageTemps from \"../Updating/montre_circulaire.png\";\n\nclass Banque extends Component {\n    render() {\n        return (\n            <section className={Style.none4}>\n                <div className=\"text-center\">\n                    <header className={Style.header}>\n                        Banque\n                    </header>\n                    <div className={Style.header2}>\n                        Compte Courant : {this.props.pseudo}\n                    </div>\n                    <div className=\"row text-center\">\n                        <div className=\"col-sm-6\">\n                            <h2 className={StyleUpdating.TextBanque}>\n                                <img className={StyleUpdating.Image} src={ImageArgent}/> UB : {this.props.ub}\n                            </h2>\n                        </div>\n                        <div className=\"col-sm-6\">\n                            <h2 className={StyleUpdating.TextBanque}>\n                                <img className={StyleUpdating.Image} src={ImageTemps}/> UT : {this.props.ut}\n                            </h2>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-sm-6\">\n                            <header className={Style.header2}>\n                                Effectuer un virement\n                            </header>\n                        </div>\n                        <div className=\"col-sm-6\">\n                            <header className={Style.header2}>\n                                Recevoir de l'argent\n                            </header>\n                        </div>\n                    </div>\n                </div>\n                <button className={Style.banque} onClick={this.props.retour}>Retour</button>\n            </section>\n        );\n    }\n}\n\nexport default Banque;","/home/elouati/Bureau/projet_working/client/src/Interface/Animator/Settings.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/ActionChoice/Pratiques.js",["366"],"import React, {Component} from 'react';\nimport Style from \"./Pratiques.module.scss\";\nimport GrandesCultures from \"./Cultures/grandes_cultures.png\";\nimport Verger from \"./Cultures/verger.webp\";\nimport BovinViande from \"./Cultures/bovinViande.png\";\nimport BovinLaitier from \"./Cultures/bovinLaitier.png\";\nimport Viticulture from \"./Cultures/viticulture.webp\";\nimport Granivore from \"./Cultures/granivore.png\";\nimport Unavailable from \"./Cultures/interdit.png\";\nimport createCheckbox from \"../../Game/controls/createCheckbox\";\nimport PropTypes from \"prop-types\";\nimport {socket} from \"../../socket\";\nimport MenuRight from \"../MenuRight/MenuRight\";\n\nclass Pratiques extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = { selectActivity: 0, checkbox: false };\n        this.createCheckbox = createCheckbox.bind(this)\n    }\n\n    static propTypes = {\n        changeTileActivity: PropTypes.func.isRequired,\n        selectedTile: PropTypes.object.isRequired,\n        actions: PropTypes.array.isRequired\n    }\n\n    /*\n        Function : handleChange\n\n        Syntax  : handleChange(event)\n\n        Input   : event : the event calling the function\n\n        Description :\n            function called when interacting with the form's components\n            if the target is a checkBox, change its validation\n            update the state value for the corresponding event target\n\n        Author : Hugo KELHETTER\n    */\n    handleChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        this.setState({ [target.name]: value });\n    }\n    /*\n        Function : handleSubmit\n\n        Syntax  : handleSubmit(event)\n\n        Input   : event :  the event calling the function\n\n        Description :\n            call the function changeTileActivity from parent with in parameters the values of the fieldset\n\n        Author : Hugo KELHETTER\n    */\n    handleSubmit = () => {\n        //event.preventDefault();\n        if (this.state.selectActivity !== 0) {\n            console.log(\"SELECT ACTIVITY : \", this.state.selectActivity)\n            //this.props.changeTileActivity(this.props.actions[this.state.selectActivity], this.state.checkbox)\n            //console.log(\"ACTIVITY FOR \", this.props.selectedTile)\n            let pratique = this.props.actions[this.state.selectActivity - 101];\n            this.props.changeTileActivity(pratique, this.state.checkbox);\n            for(let i=0; i<this.props.selectedTile.length; i++){\n                socket.emit(\"setPractise\", this.state.selectActivity, this.props.selectedTile[i].id, (response => {\n                    console.log(\"SUBMIT = \", response);\n                }));\n            }\n            //console.log(pratique.Intrants)\n        }\n        this.props.onClickEvent();\n    }\n\n\n    cardPratiques(image, titre, sousTitre, cost, prod, pollution, classNameImage, classNameSection, activityId, currentCompetence) {\n        //let classNameVar = (cost[2] > currentCompetence) ? Style.UnavailableCard : classNameSection;\n        return (\n            <div className={Style.classNameSection} onClick={() => this.setState({selectActivity: activityId})}>\n                <section className={(cost[2] > this.props.competences[currentCompetence]) ? Style.UnavailableCard : classNameSection}>\n                            <div className=\"row\">\n                                <div className=\"col-sm-4\">\n                                    <img src={(cost[2] > this.props.competences[currentCompetence])? Unavailable: image} alt={\"/\"} className={classNameImage}/>\n                                </div>\n                                <div className=\"col-sm-8\">\n                                    <div className=\"text-center\">\n                                        <p className={Style.Title}>{titre}</p>\n                                        <p className={Style.SubTitle}>{sousTitre}</p>\n                                        <p>Coût : <b>{cost[0]}</b> UT & <b>{cost[1]}</b> UB</p>\n                                        <p>Niveau de compétence : {cost[2]}</p>\n                                        <p>Production : {prod}</p>\n                                        <p>Pollution : {pollution}</p>\n                                    </div>\n\n                                </div>\n                            </div>\n                </section>\n            </div>\n        )\n    }\n\n    render() {\n        {console.log(\"COMPETENCES = \", this.props.competences)}\n        return (\n            <>\n                <div className=\"row\">\n                    <div className=\"col-sm-3\">\n                        <MenuRight pseudo={this.props.pseudo} role={this.props.role} onClickBank={null}/>\n                    </div>\n                    <div className=\"col-sm-9\">\n                        <div className=\"row\">\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(BovinViande, \"Bovin Viande\", \"Hors-Sol\", [3,4,4], 5, 3, Style.BovinViande, Style.BovinViandeCard, 101, 2)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(BovinViande, \"Bovin Viande\", \"50% Pâturage\", [3,2,2], 3, 2, Style.BovinViande, Style.BovinViandeCard, 102, 2)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(BovinViande, \"Bovin Viande\", \"100% Pâturage\", [3,1,2], 2, 0, Style.BovinViande, Style.BovinViandeCard, 103, 2)}\n                            </div>\n\n                        </div>\n\n                        <div className=\"row\">\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(GrandesCultures, \"Grandes Cultures\", \"Conventionnel\", [3,4,3], 5, 3, Style.BovinViande, Style.GrandesCulturesCard, 104, 0)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(GrandesCultures, \"Grandes Cultures\", \"Conventionnel Irrigué\", [3,4,3], 5, 3, Style.BovinViande, Style.GrandesCulturesCard, 105, 0)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Verger, \"Verger\", \"Conventionnel\", [3,3,1], 5, 3, Style.BovinViande, Style.VergerCard, 106, 1)}\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Verger, \"Verger\", \"Conventionnel Irrigué\", [3,3,1], 5, 3, Style.BovinViande, Style.VergerCard, 107, 1)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Verger, \"Verger\", \"Raisonné\", [4,2,4], 4, 2, Style.BovinViande, Style.VergerCard, 108, 1)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Verger, \"Verger\", \"Raisonné Irrigué\", [4,2,4], 4, 2,Style.BovinViande, Style.VergerCard, 109, 1)}\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Verger, \"Verger\", \"Bio\", [5,1,5], 3, 1, Style.BovinViande, Style.VergerCard, 110, 1)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Verger, \"Verger\", \"Bio Irrigué\", [5,1,5], 3, 1, Style.BovinViande, Style.VergerCard, 111, 1)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Viticulture, \"Viticulture\", \"Conventionnel\", [3,3,1], 5, 3, Style.BovinViande, Style.ViticultureCard, 112, 3)}\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Viticulture, \"Viticulture\", \"Conventionnel Irrigué\", [3,3,1], 5, 3, Style.BovinViande, Style.ViticultureCard, 113, 3)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Viticulture, \"Viticulture\", \"Raisonné\", [4,2,4], 4, 2, Style.BovinViande, Style.ViticultureCard, 114, 3)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Viticulture, \"Viticulture\", \"Raisonné Irrigué\", [4,2,4], 4, 2, Style.BovinViande, Style.ViticultureCard, 115, 3)}\n                            </div>\n\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Viticulture, \"Viticulture\", \"Bio\", [5,1,5], 3, 1, Style.BovinViande, Style.ViticultureCard, 116, 3)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Viticulture, \"Viticulture\", \"Bio Irrigué\", [5,1,5], 3, 1, Style.BovinViande, Style.ViticultureCard, 117, 3)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(BovinLaitier, \"Bovin Laitier\", \"\", [5,1,3], 3, 1, Style.BovinViande, Style.BovinLaitierCard, 118, 4)}\n                            </div>\n                        </div>\n                        <div className=\"row\">\n\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Granivore, \"Granivore\", \"Plein Air\", [4,2,3], 4, 1, Style.BovinViande, Style.GranivoreCard, 119, 5)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Granivore, \"Granivore\", \"Intensif\", [5,3,3], 5, 3, Style.BovinViande, Style.GranivoreCard, 120, 5)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                <button onClick={this.handleSubmit}>Retour</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </>\n\n        );\n    }\n}\n\nexport default Pratiques;","/home/elouati/Bureau/projet_working/client/src/Interface/ActionChoice/DetailsParcelle.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/Results/Results.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/Satisfaction/Satisfaction.js",[],"/home/elouati/Bureau/projet_working/client/src/Game/animator/timers-context.js",[],"/home/elouati/Bureau/projet_working/client/src/Game/TimersDefault.js",[],"/home/elouati/Bureau/projet_working/client/src/Game/controls/handleClickTile.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/utils/idFromArray.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/utils/isIncluded.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/utils/deleteItemArray.js",[],"/home/elouati/Bureau/projet_working/client/src/Interface/ActionChoice/ActionsAutres.js",["367","368"],"import React, {Component} from 'react';\nimport Style from \"./Pratiques.module.scss\";\nimport AgroEcology from \"./Actions/agroecologique.png\";\nimport Brigade from \"./Actions/Badge_BrigadeVerte.png\";\nimport Bail from \"./Actions/bail_envir.png\";\nimport Equipement from \"./Actions/equipement.png\";\nimport Expertise from \"./Actions/expertise_scientifique.jpg\";\nimport Formation from \"./Actions/formation.png\";\nimport Infrastructure from \"./Actions/infrastructure.png\";\nimport Market from \"./Actions/marché.jpg\";\nimport Plu from \"./Actions/plu.png\";\nimport Reglement from \"./Actions/reglement.png\";\nimport RenaturationEau from \"./Actions/renaturation_eau.png\";\nimport Assainissement from \"./Actions/reseau_assainissement.png\";\nimport ReunionCle from \"./Actions/reunion_cle.png\";\n\nimport createCheckbox from \"../../Game/controls/createCheckbox\";\nimport PropTypes from \"prop-types\";\nimport {socket} from \"../../socket\";\nimport MenuRight from \"../MenuRight/MenuRight\";\n\nclass ActionsAutres extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { selectActivity: 0, checkbox: false };\n        this.createCheckbox = createCheckbox.bind(this)\n    }\n\n    static propTypes = {\n        changeTileActivity: PropTypes.func.isRequired,\n        selectedTile: PropTypes.object.isRequired,\n        actions: PropTypes.array.isRequired\n    }\n\n    /*\n        Function : handleChange\n\n        Syntax  : handleChange(event)\n\n        Input   : event : the event calling the function\n\n        Description :\n            function called when interacting with the form's components\n            if the target is a checkBox, change its validation\n            update the state value for the corresponding event target\n\n        Author : Hugo KELHETTER\n    */\n    handleChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        this.setState({ [target.name]: value });\n    }\n    /*\n        Function : handleSubmit\n\n        Syntax  : handleSubmit(event)\n\n        Input   : event :  the event calling the function\n\n        Description :\n            call the function changeTileActivity from parent with in parameters the values of the fieldset\n\n        Author : Hugo KELHETTER\n    */\n    handleSubmit = () => {\n        //event.preventDefault();\n        if (this.state.selectActivity !== 0) {\n            console.log(\"SELECT ACTIVITY : \", this.state.selectActivity)\n            //this.props.changeTileActivity(this.props.actions[this.state.selectActivity], this.state.checkbox)\n            //console.log(\"ACTIVITY FOR \", this.props.selectedTile)\n            let pratique = this.props.actions[this.state.selectActivity - 101];\n            this.props.changeTileActivity(pratique, this.state.checkbox);\n            /*socket.emit(\"setPractise\", this.state.selectActivity, this.props.selectedTile.id, (response => {\n                console.log(\"SUBMIT = \", response);\n            }));*/\n            //console.log(pratique.Intrants)\n        }\n        this.props.onClickEvent();\n    }\n\n\n    cardPratiques(image, titre, cost, prod, pollution, activityId) {\n        // cost = [Travail, Fonctionnement, Investissement, Entretien]\n        //let classNameVar = (cost[2] > currentCompetence) ? Style.UnavailableCard : classNameSection;\n        return (\n            <div className={Style.classNameSection} onClick={() => this.setState({selectActivity: activityId})}>\n                <section className={Style.AutresActionsCard}>\n                    <div className=\"row\">\n                        <div className=\"col-sm-4\">\n                            <img src={image} alt={\"/\"} className={Style.BovinViande}/>\n                        </div>\n                        <div className=\"col-sm-8\">\n                            <div className=\"text-center\">\n                                <p className={Style.Title}>{titre}</p>\n                                <p>Travail : {cost[0]} UT</p>\n                                <p>Fonctionnement : {cost[1]} UB</p>\n                                <p>Investissement : {cost[2]} UB</p>\n                                <p>Entretien : {cost[3]} UB</p>\n                                <p>Production : {prod}</p>\n                                <p>Pollution : {pollution}</p>\n                            </div>\n\n                        </div>\n                    </div>\n                </section>\n            </div>\n        )\n    }\n\n    render() {\n        {console.log(\"COMPETENCES = \", this.props.competences)}\n        return (\n            <>\n                <div className=\"row\">\n                    <div className=\"col-sm-3\">\n                        <MenuRight pseudo={this.props.pseudo} role={this.props.role} onClickBank={null}/>\n                    </div>\n                    <div className=\"col-sm-9\">\n                        <div className=\"row\">\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Assainissement, \"Investissement Réseau Assainissement\", [4, 0, 10, 0], 0, 0, 202)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Infrastructure, \"Investissement Infrastructure\", [4, 0, 10, 0], 0, 0, 303)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(AgroEcology, \"Infrastructure Agroécologique\", [2, 0, 3, 0], 0, 0, 11)}\n                            </div>\n\n                        </div>\n\n                        <div className=\"row\">\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Bail, \"Bail Environnemental\", [3, 0, 2, 0], 0, 0, 52)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Brigade, \"Brigades Vertes\", [2, 1, 2, 0], 0, 0, 53)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Expertise, \"Expertise scientifique\", [1, 0, 2, 0], 0, 0, 306)}\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(RenaturationEau, \"Renaturation Cours d'eau\", [4, 0, 5, 0], 0, 0, 307)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Market, \"Marché des producteurs\", [1, 0, 2, 1], 0, 0, 402)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Reglement, \"Révision Règlement\", [3, 0, 1, 0], 0, 0, 51)}\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Plu, \"Révision PLU\", [3, 0, 1, 0], 0, 0, 401)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Formation, \"Formation\", [0, 0, 0, 0], 0, 0, 203)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(Equipement, \"Investissement Équipement\", [0, 0, 0, 0], 0, 0, 204)}\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-sm-4\">\n                                {this.cardPratiques(ReunionCle, \"Réunion Clé\", [1, 0, 0, 0], 0, 0, 301)}\n                            </div>\n                            <div className=\"col-sm-4\">\n                                <button onClick={this.handleSubmit}>Retour</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </>\n\n        );\n    }\n}\n\nexport default ActionsAutres;",{"ruleId":"369","replacedBy":"370"},{"ruleId":"371","replacedBy":"372"},{"ruleId":"373","severity":1,"message":"374","line":1,"column":16,"nodeType":"375","messageId":"376","endLine":1,"endColumn":26},{"ruleId":"373","severity":1,"message":"377","line":4,"column":42,"nodeType":"375","messageId":"376","endLine":4,"endColumn":46},{"ruleId":"373","severity":1,"message":"378","line":14,"column":8,"nodeType":"375","messageId":"376","endLine":14,"endColumn":21},{"ruleId":"373","severity":1,"message":"379","line":15,"column":8,"nodeType":"375","messageId":"376","endLine":15,"endColumn":16},{"ruleId":"373","severity":1,"message":"380","line":16,"column":8,"nodeType":"375","messageId":"376","endLine":16,"endColumn":16},{"ruleId":"373","severity":1,"message":"381","line":17,"column":8,"nodeType":"375","messageId":"376","endLine":17,"endColumn":14},{"ruleId":"373","severity":1,"message":"382","line":18,"column":8,"nodeType":"375","messageId":"376","endLine":18,"endColumn":18},{"ruleId":"373","severity":1,"message":"383","line":19,"column":8,"nodeType":"375","messageId":"376","endLine":19,"endColumn":18},{"ruleId":"373","severity":1,"message":"384","line":20,"column":8,"nodeType":"375","messageId":"376","endLine":20,"endColumn":24},{"ruleId":"385","severity":1,"message":"386","line":44,"column":18,"nodeType":"387","messageId":"388","endLine":44,"endColumn":20},{"ruleId":"373","severity":1,"message":"389","line":15,"column":10,"nodeType":"375","messageId":"376","endLine":15,"endColumn":24},{"ruleId":"373","severity":1,"message":"379","line":19,"column":8,"nodeType":"375","messageId":"376","endLine":19,"endColumn":16},{"ruleId":"373","severity":1,"message":"390","line":21,"column":8,"nodeType":"375","messageId":"376","endLine":21,"endColumn":14},{"ruleId":"373","severity":1,"message":"391","line":216,"column":13,"nodeType":"375","messageId":"376","endLine":216,"endColumn":19},{"ruleId":"392","severity":1,"message":"393","line":266,"column":9,"nodeType":"394","messageId":"395","endLine":266,"endColumn":91},{"ruleId":"385","severity":1,"message":"396","line":227,"column":17,"nodeType":"387","messageId":"388","endLine":227,"endColumn":19},{"ruleId":"373","severity":1,"message":"374","line":1,"column":16,"nodeType":"375","messageId":"376","endLine":1,"endColumn":26},{"ruleId":"373","severity":1,"message":"397","line":13,"column":8,"nodeType":"375","messageId":"376","endLine":13,"endColumn":16},{"ruleId":"373","severity":1,"message":"398","line":14,"column":8,"nodeType":"375","messageId":"376","endLine":14,"endColumn":20},{"ruleId":"373","severity":1,"message":"399","line":17,"column":8,"nodeType":"375","messageId":"376","endLine":17,"endColumn":16},{"ruleId":"373","severity":1,"message":"400","line":220,"column":9,"nodeType":"375","messageId":"376","endLine":220,"endColumn":13},{"ruleId":"401","severity":1,"message":"402","line":307,"column":43,"nodeType":"403","messageId":"404","endLine":307,"endColumn":45},{"ruleId":"392","severity":1,"message":"393","line":499,"column":9,"nodeType":"394","messageId":"395","endLine":499,"endColumn":62},{"ruleId":"392","severity":1,"message":"393","line":500,"column":9,"nodeType":"394","messageId":"395","endLine":501,"endColumn":71},{"ruleId":"373","severity":1,"message":"374","line":1,"column":16,"nodeType":"375","messageId":"376","endLine":1,"endColumn":26},{"ruleId":"373","severity":1,"message":"405","line":4,"column":8,"nodeType":"375","messageId":"376","endLine":4,"endColumn":23},{"ruleId":"373","severity":1,"message":"406","line":5,"column":8,"nodeType":"375","messageId":"376","endLine":5,"endColumn":22},{"ruleId":"373","severity":1,"message":"407","line":9,"column":8,"nodeType":"375","messageId":"376","endLine":9,"endColumn":18},{"ruleId":"373","severity":1,"message":"408","line":13,"column":8,"nodeType":"375","messageId":"376","endLine":13,"endColumn":12},{"ruleId":"373","severity":1,"message":"409","line":14,"column":8,"nodeType":"375","messageId":"376","endLine":14,"endColumn":13},{"ruleId":"373","severity":1,"message":"410","line":15,"column":8,"nodeType":"375","messageId":"376","endLine":15,"endColumn":20},{"ruleId":"373","severity":1,"message":"411","line":16,"column":10,"nodeType":"375","messageId":"376","endLine":16,"endColumn":16},{"ruleId":"373","severity":1,"message":"412","line":19,"column":8,"nodeType":"375","messageId":"376","endLine":19,"endColumn":19},{"ruleId":"373","severity":1,"message":"413","line":20,"column":8,"nodeType":"375","messageId":"376","endLine":20,"endColumn":24},{"ruleId":"373","severity":1,"message":"414","line":24,"column":8,"nodeType":"375","messageId":"376","endLine":24,"endColumn":13},{"ruleId":"392","severity":1,"message":"393","line":218,"column":9,"nodeType":"394","messageId":"395","endLine":218,"endColumn":65},{"ruleId":"392","severity":1,"message":"393","line":240,"column":9,"nodeType":"394","messageId":"395","endLine":240,"endColumn":65},{"ruleId":"415","severity":1,"message":"416","line":8,"column":5,"nodeType":"417","messageId":"418","endLine":10,"endColumn":6},{"ruleId":"369","replacedBy":"419"},{"ruleId":"371","replacedBy":"420"},{"ruleId":"373","severity":1,"message":"421","line":8,"column":8,"nodeType":"375","messageId":"376","endLine":8,"endColumn":18},{"ruleId":"422","severity":1,"message":"423","line":94,"column":27,"nodeType":"424","messageId":"425","endLine":94,"endColumn":69},{"ruleId":"401","severity":1,"message":"402","line":99,"column":54,"nodeType":"403","messageId":"404","endLine":99,"endColumn":56},{"ruleId":"426","severity":1,"message":"427","line":100,"column":59,"nodeType":"428","messageId":"429","endLine":100,"endColumn":78},{"ruleId":"385","severity":1,"message":"396","line":153,"column":76,"nodeType":"387","messageId":"388","endLine":153,"endColumn":78},{"ruleId":"385","severity":1,"message":"396","line":86,"column":47,"nodeType":"387","messageId":"388","endLine":86,"endColumn":49},{"ruleId":"430","severity":1,"message":"431","line":91,"column":45,"nodeType":"432","endLine":91,"endColumn":93},{"ruleId":"430","severity":1,"message":"431","line":96,"column":45,"nodeType":"432","endLine":96,"endColumn":92},{"ruleId":"401","severity":1,"message":"433","line":101,"column":111,"nodeType":"403","messageId":"434","endLine":101,"endColumn":113},{"ruleId":"401","severity":1,"message":"433","line":32,"column":149,"nodeType":"403","messageId":"434","endLine":32,"endColumn":151},{"ruleId":"373","severity":1,"message":"435","line":3,"column":8,"nodeType":"375","messageId":"376","endLine":3,"endColumn":16},{"ruleId":"373","severity":1,"message":"414","line":4,"column":8,"nodeType":"375","messageId":"376","endLine":4,"endColumn":13},{"ruleId":"369","replacedBy":"436"},{"ruleId":"371","replacedBy":"437"},{"ruleId":"430","severity":1,"message":"431","line":40,"column":25,"nodeType":"432","endLine":40,"endColumn":80},{"ruleId":"430","severity":1,"message":"431","line":43,"column":25,"nodeType":"432","endLine":43,"endColumn":81},{"ruleId":"430","severity":1,"message":"431","line":62,"column":33,"nodeType":"432","endLine":62,"endColumn":88},{"ruleId":"430","severity":1,"message":"431","line":80,"column":33,"nodeType":"432","endLine":80,"endColumn":95},{"ruleId":"430","severity":1,"message":"431","line":135,"column":41,"nodeType":"432","endLine":135,"endColumn":100},{"ruleId":"392","severity":1,"message":"393","line":147,"column":21,"nodeType":"394","messageId":"395","endLine":169,"endColumn":22},{"ruleId":"438","severity":1,"message":"439","line":147,"column":21,"nodeType":"394","messageId":"440","endLine":169,"endColumn":22},{"ruleId":"369","replacedBy":"441"},{"ruleId":"371","replacedBy":"442"},{"ruleId":"373","severity":1,"message":"443","line":3,"column":8,"nodeType":"375","messageId":"376","endLine":3,"endColumn":19},{"ruleId":"373","severity":1,"message":"444","line":4,"column":8,"nodeType":"375","messageId":"376","endLine":4,"endColumn":21},{"ruleId":"373","severity":1,"message":"410","line":5,"column":8,"nodeType":"375","messageId":"376","endLine":5,"endColumn":20},{"ruleId":"373","severity":1,"message":"445","line":7,"column":8,"nodeType":"375","messageId":"376","endLine":7,"endColumn":16},{"ruleId":"373","severity":1,"message":"446","line":1,"column":28,"nodeType":"375","messageId":"376","endLine":1,"endColumn":37},{"ruleId":"373","severity":1,"message":"414","line":2,"column":8,"nodeType":"375","messageId":"376","endLine":2,"endColumn":13},{"ruleId":"430","severity":1,"message":"431","line":21,"column":33,"nodeType":"432","endLine":21,"endColumn":89},{"ruleId":"430","severity":1,"message":"431","line":26,"column":33,"nodeType":"432","endLine":26,"endColumn":88},{"ruleId":"392","severity":1,"message":"393","line":107,"column":9,"nodeType":"394","messageId":"395","endLine":107,"endColumn":64},{"ruleId":"373","severity":1,"message":"447","line":19,"column":9,"nodeType":"375","messageId":"376","endLine":19,"endColumn":15},{"ruleId":"392","severity":1,"message":"393","line":113,"column":9,"nodeType":"394","messageId":"395","endLine":113,"endColumn":64},"no-native-reassign",["448"],"no-negated-in-lhs",["449"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'PlayerContext' is defined but never used.","'Updating' is defined but never used.","'Strategy' is defined but never used.","'Events' is defined but never used.","'Debriefing' is defined but never used.","'SetFarmers' is defined but never used.","'SetTimeInterface' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'setPlayerClass' is defined but never used.","'Header' is defined but never used.","'bassin' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","Expected '===' and instead saw '=='.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'Settings' is defined but never used.","'tile' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'ActivitySwapper' is defined but never used.","'ValidationTour' is defined but never used.","'Ressources' is defined but never used.","'Menu' is defined but never used.","'Diary' is defined but never used.","'roleToString' is defined but never used.","'Button' is defined but never used.","'MenuContext' is defined but never used.","'InterfaceContext' is defined but never used.","'Style' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["448"],["449"],"'SlideField' is defined but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'ImageRDV' is defined but never used.",["448"],["449"],"no-unreachable","Unreachable code.","unreachableCode",["448"],["449"],"'MeetingTime' is defined but never used.","'phaseToString' is defined but never used.","'Checkbox' is defined but never used.","'PropTypes' is defined but never used.","'socket' is defined but never used.","no-global-assign","no-unsafe-negation"]